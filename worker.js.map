{"version":3,"file":"worker.js","mappings":"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","sources":["webpack://aleo-website/webpack/runtime/async module","webpack://aleo-website/./node_modules/@aleohq/wasm/aleo_wasm.js","webpack://aleo-website/./node_modules/@aleohq/wasm/snippets/wasm-bindgen-rayon-7afa899f36665473/src/workerHelpers.js","webpack://aleo-website/./src/workers/keys.js","webpack://aleo-website/./src/workers/worker.js","webpack://aleo-website/webpack/bootstrap","webpack://aleo-website/webpack/runtime/define property getters","webpack://aleo-website/webpack/runtime/ensure chunk","webpack://aleo-website/webpack/runtime/get javascript chunk filename","webpack://aleo-website/webpack/runtime/global","webpack://aleo-website/webpack/runtime/harmony module decorator","webpack://aleo-website/webpack/runtime/hasOwnProperty shorthand","webpack://aleo-website/webpack/runtime/make namespace object","webpack://aleo-website/webpack/runtime/publicPath","webpack://aleo-website/webpack/runtime/importScripts chunk loading","webpack://aleo-website/webpack/startup"],"sourcesContent":["var webpackQueues = typeof Symbol === \"function\" ? Symbol(\"webpack queues\") : \"__webpack_queues__\";\nvar webpackExports = typeof Symbol === \"function\" ? Symbol(\"webpack exports\") : \"__webpack_exports__\";\nvar webpackError = typeof Symbol === \"function\" ? Symbol(\"webpack error\") : \"__webpack_error__\";\nvar resolveQueue = (queue) => {\n\tif(queue && queue.d < 1) {\n\t\tqueue.d = 1;\n\t\tqueue.forEach((fn) => (fn.r--));\n\t\tqueue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));\n\t}\n}\nvar wrapDeps = (deps) => (deps.map((dep) => {\n\tif(dep !== null && typeof dep === \"object\") {\n\t\tif(dep[webpackQueues]) return dep;\n\t\tif(dep.then) {\n\t\t\tvar queue = [];\n\t\t\tqueue.d = 0;\n\t\t\tdep.then((r) => {\n\t\t\t\tobj[webpackExports] = r;\n\t\t\t\tresolveQueue(queue);\n\t\t\t}, (e) => {\n\t\t\t\tobj[webpackError] = e;\n\t\t\t\tresolveQueue(queue);\n\t\t\t});\n\t\t\tvar obj = {};\n\t\t\tobj[webpackQueues] = (fn) => (fn(queue));\n\t\t\treturn obj;\n\t\t}\n\t}\n\tvar ret = {};\n\tret[webpackQueues] = x => {};\n\tret[webpackExports] = dep;\n\treturn ret;\n}));\n__webpack_require__.a = (module, body, hasAwait) => {\n\tvar queue;\n\thasAwait && ((queue = []).d = -1);\n\tvar depQueues = new Set();\n\tvar exports = module.exports;\n\tvar currentDeps;\n\tvar outerResolve;\n\tvar reject;\n\tvar promise = new Promise((resolve, rej) => {\n\t\treject = rej;\n\t\touterResolve = resolve;\n\t});\n\tpromise[webpackExports] = exports;\n\tpromise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise[\"catch\"](x => {}));\n\tmodule.exports = promise;\n\tbody((deps) => {\n\t\tcurrentDeps = wrapDeps(deps);\n\t\tvar fn;\n\t\tvar getResult = () => (currentDeps.map((d) => {\n\t\t\tif(d[webpackError]) throw d[webpackError];\n\t\t\treturn d[webpackExports];\n\t\t}))\n\t\tvar promise = new Promise((resolve) => {\n\t\t\tfn = () => (resolve(getResult));\n\t\t\tfn.r = 0;\n\t\t\tvar fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));\n\t\t\tcurrentDeps.map((dep) => (dep[webpackQueues](fnQueue)));\n\t\t});\n\t\treturn fn.r ? promise : getResult();\n\t}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));\n\tqueue && queue.d < 0 && (queue.d = 0);\n};","import { startWorkers } from './snippets/wasm-bindgen-rayon-7afa899f36665473/src/workerHelpers.js';\n\nlet wasm;\n\nconst cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );\n\nif (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); };\n\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8Memory0().slice(ptr, ptr + len));\n}\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet WASM_VECTOR_LEN = 0;\n\nconst cachedTextEncoder = (typeof TextEncoder !== 'undefined' ? new TextEncoder('utf-8') : { encode: () => { throw Error('TextEncoder not available') } } );\n\nconst encodeString = function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n};\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_3.get(state.dtor)(a, state.b);\n\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n\n    return real;\n}\nfunction __wbg_adapter_32(arg0, arg1, arg2) {\n    wasm.wasm_bindgen__convert__closures__invoke1_mut__h1fddb499e1f697ee(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\nfunction __wbg_adapter_216(arg0, arg1, arg2, arg3) {\n    wasm.wasm_bindgen__convert__closures__invoke2_mut__hf1fd991b79c948a9(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));\n}\n\n/**\n* @param {number} num_threads\n* @returns {Promise<any>}\n*/\nexport function initThreadPool(num_threads) {\n    const ret = wasm.initThreadPool(num_threads);\n    return takeObject(ret);\n}\n\n/**\n* @param {number} receiver\n*/\nexport function wbg_rayon_start_worker(receiver) {\n    wasm.wbg_rayon_start_worker(receiver);\n}\n\n/**\n*/\nexport class Address {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Address.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_address_free(ptr);\n    }\n    /**\n    * @param {PrivateKey} private_key\n    * @returns {Address}\n    */\n    static from_private_key(private_key) {\n        _assertClass(private_key, PrivateKey);\n        const ret = wasm.address_from_private_key(private_key.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @param {ViewKey} view_key\n    * @returns {Address}\n    */\n    static from_view_key(view_key) {\n        _assertClass(view_key, ViewKey);\n        const ret = wasm.address_from_view_key(view_key.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @param {string} address\n    * @returns {Address}\n    */\n    static from_string(address) {\n        const ptr0 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.address_from_string(ptr0, len0);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.address_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {Uint8Array} message\n    * @param {Signature} signature\n    * @returns {boolean}\n    */\n    verify(message, signature) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(signature, Signature);\n        const ret = wasm.address_verify(this.__wbg_ptr, ptr0, len0, signature.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n/**\n* Webassembly Representation of an Aleo function execution response\n*\n* This object is returned by the execution of an Aleo function off-chain. It provides methods for\n* retrieving the outputs of the function execution.\n*/\nexport class ExecutionResponse {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ExecutionResponse.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_executionresponse_free(ptr);\n    }\n    /**\n    * Get the outputs of the executed function\n    * @returns {Array<any>}\n    */\n    getOutputs() {\n        const ret = wasm.executionresponse_getOutputs(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n/**\n*/\nexport class KeyPair {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeyPair.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keypair_free(ptr);\n    }\n    /**\n    * Create new key pair from proving and verifying keys\n    * @param {ProvingKey} proving_key\n    * @param {VerifyingKey} verifying_key\n    */\n    constructor(proving_key, verifying_key) {\n        _assertClass(proving_key, ProvingKey);\n        var ptr0 = proving_key.__destroy_into_raw();\n        _assertClass(verifying_key, VerifyingKey);\n        var ptr1 = verifying_key.__destroy_into_raw();\n        const ret = wasm.keypair_new(ptr0, ptr1);\n        return KeyPair.__wrap(ret);\n    }\n    /**\n    * Get the proving key\n    * @returns {ProvingKey}\n    */\n    provingKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keypair_provingKey(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the verifying key\n    * @returns {VerifyingKey}\n    */\n    verifyingKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keypair_verifyingKey(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nexport class PrivateKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PrivateKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekey_free(ptr);\n    }\n    /**\n    * Generate a new private key\n    */\n    constructor() {\n        const ret = wasm.privatekey_new();\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * Get a private key from a series of unchecked bytes\n    * @param {Uint8Array} seed\n    * @returns {PrivateKey}\n    */\n    static from_seed_unchecked(seed) {\n        const ptr0 = passArray8ToWasm0(seed, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_from_seed_unchecked(ptr0, len0);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * Create a private key from a string representation\n    *\n    * This function will fail if the text is not a valid private key\n    * @param {string} private_key\n    * @returns {PrivateKey}\n    */\n    static from_string(private_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(private_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_from_string(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the private key\n    *\n    * This function should be used very carefully as it exposes the private key plaintext\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekey_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the view key corresponding to the private key\n    * @returns {ViewKey}\n    */\n    to_view_key() {\n        const ret = wasm.privatekey_to_view_key(this.__wbg_ptr);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Get the address corresponding to the private key\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = wasm.privatekey_to_address(this.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Sign a message with the private key\n    * @param {Uint8Array} message\n    * @returns {Signature}\n    */\n    sign(message) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_sign(this.__wbg_ptr, ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Get a private key ciphertext using a secret.\n    *\n    * The secret is sensitive and will be needed to decrypt the private key later, so it should be stored securely\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    static newEncrypted(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_newEncrypted(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Encrypt the private key with a secret.\n    *\n    * The secret is sensitive and will be needed to decrypt the private key later, so it should be stored securely\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    toCiphertext(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_toCiphertext(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get private key from a private key ciphertext using a secret.\n    * @param {PrivateKeyCiphertext} ciphertext\n    * @param {string} secret\n    * @returns {PrivateKey}\n    */\n    static fromPrivateKeyCiphertext(ciphertext, secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(ciphertext, PrivateKeyCiphertext);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_fromPrivateKeyCiphertext(retptr, ciphertext.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Private Key in ciphertext form\n*/\nexport class PrivateKeyCiphertext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PrivateKeyCiphertext.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekeyciphertext_free(ptr);\n    }\n    /**\n    * Encrypt a private key using a secret string.\n    *\n    * The secret is sensitive and will be needed to decrypt the private key later, so it should be stored securely.\n    * @param {PrivateKey} private_key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    static encryptPrivateKey(private_key, secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_encryptPrivateKey(retptr, private_key.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Decrypts a private ciphertext using a secret string.\n    *\n    * This must be the same secret used to encrypt the private key\n    * @param {string} secret\n    * @returns {PrivateKey}\n    */\n    decryptToPrivateKey(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_decryptToPrivateKey(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the ciphertext string\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekeyciphertext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Creates a PrivateKeyCiphertext from a string\n    * @param {string} ciphertext\n    * @returns {PrivateKeyCiphertext}\n    */\n    static fromString(ciphertext) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Webassembly Representation of an Aleo program\n*\n* This object is required to create an Execution or Deployment transaction. It includes several\n* convenience methods for enumerating available functions and each functions' inputs in a\n* javascript object for usage in creation of web forms for input capture.\n*/\nexport class Program {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Program.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_program_free(ptr);\n    }\n    /**\n    * Create a program from a program string\n    * @param {string} program\n    * @returns {Program}\n    */\n    static fromString(program) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the program\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get javascript array of functions names in the program\n    * @returns {Array<any>}\n    */\n    getFunctions() {\n        const ret = wasm.program_getFunctions(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get a javascript object representation of the function inputs and types. This can be used\n    * to generate a webform to capture user inputs for an execution of a function.\n    * @param {string} function_name\n    * @returns {Array<any>}\n    */\n    getFunctionInputs(function_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getFunctionInputs(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a javascript object representation of a program record and its types\n    * @param {string} record_name\n    * @returns {object}\n    */\n    getRecordMembers(record_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getRecordMembers(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a javascript object representation of a program struct and its types\n    * @param {string} struct_name\n    * @returns {Array<any>}\n    */\n    getStructMembers(struct_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(struct_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getStructMembers(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the credits.aleo program\n    * @returns {Program}\n    */\n    static getCreditsProgram() {\n        const ret = wasm.program_getCreditsProgram();\n        return Program.__wrap(ret);\n    }\n    /**\n    * Get the id of the program\n    * @returns {string}\n    */\n    id() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_id(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Determine equality with another program\n    * @param {Program} other\n    * @returns {boolean}\n    */\n    isEqual(other) {\n        _assertClass(other, Program);\n        const ret = wasm.program_isEqual(this.__wbg_ptr, other.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n/**\n*/\nexport class ProgramManager {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ProgramManager.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_programmanager_free(ptr);\n    }\n    /**\n    * Send credits from one Aleo account to another\n    *\n    * @param private_key The private key of the sender\n    * @param amount_credits The amount of credits to send\n    * @param recipient The recipient of the transaction\n    * @param transfer_type The type of the transfer (options: \"private\", \"public\", \"private_to_public\", \"public_to_private\")\n    * @param amount_record The record to fund the amount from\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param cache Cache the proving and verifying keys in the ProgramManager memory. If this is\n    * set to `true` the keys synthesized (or passed in as optional parameters via the\n    * `transfer_proving_key` and `transfer_verifying_key` arguments) will be stored in the\n    * ProgramManager's memory and used for subsequent transactions. If this is set to `false` the\n    * proving and verifying keys will be deallocated from memory after the transaction is executed\n    * @param transfer_proving_key (optional) Provide a proving key to use for the transfer\n    * function\n    * @param transfer_verifying_key (optional) Provide a verifying key to use for the transfer\n    * function\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @param {PrivateKey} private_key\n    * @param {number} amount_credits\n    * @param {string} recipient\n    * @param {string} transfer_type\n    * @param {RecordPlaintext | undefined} amount_record\n    * @param {number} fee_credits\n    * @param {RecordPlaintext} fee_record\n    * @param {string} url\n    * @param {boolean} cache\n    * @param {ProvingKey | undefined} transfer_proving_key\n    * @param {VerifyingKey | undefined} transfer_verifying_key\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @returns {Promise<Transaction>}\n    */\n    transfer(private_key, amount_credits, recipient, transfer_type, amount_record, fee_credits, fee_record, url, cache, transfer_proving_key, transfer_verifying_key, fee_proving_key, fee_verifying_key) {\n        _assertClass(private_key, PrivateKey);\n        var ptr0 = private_key.__destroy_into_raw();\n        const ptr1 = passStringToWasm0(recipient, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(transfer_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        let ptr3 = 0;\n        if (!isLikeNone(amount_record)) {\n            _assertClass(amount_record, RecordPlaintext);\n            ptr3 = amount_record.__destroy_into_raw();\n        }\n        _assertClass(fee_record, RecordPlaintext);\n        var ptr4 = fee_record.__destroy_into_raw();\n        const ptr5 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len5 = WASM_VECTOR_LEN;\n        let ptr6 = 0;\n        if (!isLikeNone(transfer_proving_key)) {\n            _assertClass(transfer_proving_key, ProvingKey);\n            ptr6 = transfer_proving_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(transfer_verifying_key)) {\n            _assertClass(transfer_verifying_key, VerifyingKey);\n            ptr7 = transfer_verifying_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr8 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr9 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr9 = fee_verifying_key.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_transfer(this.__wbg_ptr, ptr0, amount_credits, ptr1, len1, ptr2, len2, ptr3, fee_credits, ptr4, ptr5, len5, cache, ptr6, ptr7, ptr8, ptr9);\n        return takeObject(ret);\n    }\n    /**\n    * Split an Aleo credits record into two separate records. This function does not require a fee.\n    *\n    * @param private_key The private key of the sender\n    * @param split_amount The amount of the credit split. This amount will be subtracted from the\n    * value of the record and two new records will be created with the split amount and the remainder\n    * @param amount_record The record to split\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param cache Cache the proving and verifying keys in the ProgramManager memory. If this is\n    * set to `true` the keys synthesized (or passed in as optional parameters via the\n    * `split_proving_key` and `split_verifying_key` arguments) will be stored in the\n    * ProgramManager's memory and used for subsequent transactions. If this is set to `false` the\n    * proving and verifying keys will be deallocated from memory after the transaction is executed\n    * @param split_proving_key (optional) Provide a proving key to use for the split function\n    * @param split_verifying_key (optional) Provide a verifying key to use for the split function\n    * @param {PrivateKey} private_key\n    * @param {number} split_amount\n    * @param {RecordPlaintext} amount_record\n    * @param {string} url\n    * @param {boolean} cache\n    * @param {ProvingKey | undefined} split_proving_key\n    * @param {VerifyingKey | undefined} split_verifying_key\n    * @returns {Promise<Transaction>}\n    */\n    split(private_key, split_amount, amount_record, url, cache, split_proving_key, split_verifying_key) {\n        _assertClass(private_key, PrivateKey);\n        var ptr0 = private_key.__destroy_into_raw();\n        _assertClass(amount_record, RecordPlaintext);\n        var ptr1 = amount_record.__destroy_into_raw();\n        const ptr2 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        let ptr3 = 0;\n        if (!isLikeNone(split_proving_key)) {\n            _assertClass(split_proving_key, ProvingKey);\n            ptr3 = split_proving_key.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(split_verifying_key)) {\n            _assertClass(split_verifying_key, VerifyingKey);\n            ptr4 = split_verifying_key.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_split(this.__wbg_ptr, ptr0, split_amount, ptr1, ptr2, len2, cache, ptr3, ptr4);\n        return takeObject(ret);\n    }\n    /**\n    */\n    constructor() {\n        const ret = wasm.programmanager_new();\n        return ProgramManager.__wrap(ret);\n    }\n    /**\n    * Cache the proving and verifying keys for a program function in WASM memory. This method\n    * will take a verifying and proving key and store them in the program manager's internal\n    * in-memory cache. This memory is allocated in WebAssembly, so it is important to be mindful\n    * of the amount of memory being used. This method will return an error if the keys are already\n    * cached in memory.\n    *\n    * @param program_id The name of the program containing the desired function\n    * @param function The name of the function to store the keys for\n    * @param proving_key The proving key of the function\n    * @param verifying_key The verifying key of the function\n    * @param {string} program\n    * @param {string} _function\n    * @param {ProvingKey} proving_key\n    * @param {VerifyingKey} verifying_key\n    */\n    cacheKeypairInWasmMemory(program, _function, proving_key, verifying_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            _assertClass(proving_key, ProvingKey);\n            var ptr2 = proving_key.__destroy_into_raw();\n            _assertClass(verifying_key, VerifyingKey);\n            var ptr3 = verifying_key.__destroy_into_raw();\n            wasm.programmanager_cacheKeypairInWasmMemory(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1, ptr2, ptr3);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the proving & verifying keys cached in WASM memory for a specific function\n    *\n    * @param program_id The name of the program containing the desired function\n    * @param function_id The name of the function to retrieve the keys for\n    * @param {string} program_id\n    * @param {string} _function\n    * @returns {KeyPair}\n    */\n    getCachedKeypair(program_id, _function) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.programmanager_getCachedKeypair(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KeyPair.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Synthesize a proving and verifying key for a program function. This method should be used\n    * when there is a need to pre-synthesize keys (i.e. for caching purposes, etc.)\n    *\n    * @param program The source code of the program containing the desired function\n    * @param function The name of the function to synthesize the key for\n    * @param {string} program\n    * @param {string} _function\n    * @returns {KeyPair}\n    */\n    synthesizeKeypair(program, _function) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.programmanager_synthesizeKeypair(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KeyPair.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Clear key cache in wasm memory.\n    *\n    * This method will clear the key cache in wasm memory. It is important to note that this will\n    * not DE-allocate the memory assigned to wasm as wasm memory cannot be shrunk. The total\n    * memory allocated to wasm will remain constant but will be available for other usage after\n    * calling this method.\n    */\n    clearKeyCache() {\n        wasm.programmanager_clearKeyCache(this.__wbg_ptr);\n    }\n    /**\n    * Check if the cache contains a keypair for a specific function\n    *\n    * @param program_id The name of the program containing the desired function\n    * @param function_id The name of the function to retrieve the keys for\n    * @param {string} program_id\n    * @param {string} function_id\n    * @returns {boolean}\n    */\n    keyExists(program_id, function_id) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(function_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.programmanager_keyExists(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Join two records together to create a new record with an amount of credits equal to the sum\n    * of the credits of the two original records\n    *\n    * @param private_key The private key of the sender\n    * @param record_1 The first record to combine\n    * @param record_2 The second record to combine\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param cache Cache the proving and verifying keys in the ProgramManager memory. If this is\n    * set to `true` the keys synthesized (or passed in as optional parameters via the\n    * `join_proving_key` and `join_verifying_key` arguments) will be stored in the\n    * ProgramManager's memory and used for subsequent transactions. If this is set to `false` the\n    * proving and verifying keys will be deallocated from memory after the transaction is executed\n    * @param join_proving_key (optional) Provide a proving key to use for the join function\n    * @param join_verifying_key (optional) Provide a verifying key to use for the join function\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @param {PrivateKey} private_key\n    * @param {RecordPlaintext} record_1\n    * @param {RecordPlaintext} record_2\n    * @param {number} fee_credits\n    * @param {RecordPlaintext} fee_record\n    * @param {string} url\n    * @param {boolean} cache\n    * @param {ProvingKey | undefined} join_proving_key\n    * @param {VerifyingKey | undefined} join_verifying_key\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @returns {Promise<Transaction>}\n    */\n    join(private_key, record_1, record_2, fee_credits, fee_record, url, cache, join_proving_key, join_verifying_key, fee_proving_key, fee_verifying_key) {\n        _assertClass(private_key, PrivateKey);\n        var ptr0 = private_key.__destroy_into_raw();\n        _assertClass(record_1, RecordPlaintext);\n        var ptr1 = record_1.__destroy_into_raw();\n        _assertClass(record_2, RecordPlaintext);\n        var ptr2 = record_2.__destroy_into_raw();\n        _assertClass(fee_record, RecordPlaintext);\n        var ptr3 = fee_record.__destroy_into_raw();\n        const ptr4 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len4 = WASM_VECTOR_LEN;\n        let ptr5 = 0;\n        if (!isLikeNone(join_proving_key)) {\n            _assertClass(join_proving_key, ProvingKey);\n            ptr5 = join_proving_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(join_verifying_key)) {\n            _assertClass(join_verifying_key, VerifyingKey);\n            ptr6 = join_verifying_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr7 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr8 = fee_verifying_key.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_join(this.__wbg_ptr, ptr0, ptr1, ptr2, fee_credits, ptr3, ptr4, len4, cache, ptr5, ptr6, ptr7, ptr8);\n        return takeObject(ret);\n    }\n    /**\n    * Deploy an Aleo program\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program being deployed\n    * @param imports A javascript object holding the source code of any imported programs in the\n    * form {\"program_name1\": \"program_source_code\", \"program_name2\": \"program_source_code\", ..}.\n    * Note that all imported programs must be deployed on chain before the main program in order\n    * for the deployment to succeed\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {object | undefined} imports\n    * @param {number} fee_credits\n    * @param {RecordPlaintext} fee_record\n    * @param {string} _url\n    * @param {boolean} cache\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @returns {Promise<Transaction>}\n    */\n    deploy(private_key, program, imports, fee_credits, fee_record, _url, cache, fee_proving_key, fee_verifying_key) {\n        _assertClass(private_key, PrivateKey);\n        var ptr0 = private_key.__destroy_into_raw();\n        const ptr1 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        _assertClass(fee_record, RecordPlaintext);\n        var ptr2 = fee_record.__destroy_into_raw();\n        const ptr3 = passStringToWasm0(_url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len3 = WASM_VECTOR_LEN;\n        let ptr4 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr4 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr5 = fee_verifying_key.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_deploy(this.__wbg_ptr, ptr0, ptr1, len1, isLikeNone(imports) ? 0 : addHeapObject(imports), fee_credits, ptr2, ptr3, len3, cache, ptr4, ptr5);\n        return takeObject(ret);\n    }\n    /**\n    * Execute an arbitrary function locally\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program being executed\n    * @param function The name of the function to execute\n    * @param inputs A javascript array of inputs to the function\n    * @param amount_record The record to fund the amount from\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param cache Cache the proving and verifying keys in the ProgramManager's memory.\n    * If this is set to 'true' the keys synthesized (or passed in as optional parameters via the\n    * `proving_key` and `verifying_key` arguments) will be stored in the ProgramManager's memory\n    * and used for subsequent transactions. If this is set to 'false' the proving and verifying\n    * keys will be deallocated from memory after the transaction is executed.\n    * @param proving_key (optional) Provide a verifying key to use for the function execution\n    * @param verifying_key (optional) Provide a verifying key to use for the function execution\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {boolean} cache\n    * @param {ProvingKey | undefined} proving_key\n    * @param {VerifyingKey | undefined} verifying_key\n    * @returns {ExecutionResponse}\n    */\n    execute_local(private_key, program, _function, inputs, cache, proving_key, verifying_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            var ptr0 = private_key.__destroy_into_raw();\n            const ptr1 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ptr2 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len2 = WASM_VECTOR_LEN;\n            let ptr3 = 0;\n            if (!isLikeNone(proving_key)) {\n                _assertClass(proving_key, ProvingKey);\n                ptr3 = proving_key.__destroy_into_raw();\n            }\n            let ptr4 = 0;\n            if (!isLikeNone(verifying_key)) {\n                _assertClass(verifying_key, VerifyingKey);\n                ptr4 = verifying_key.__destroy_into_raw();\n            }\n            wasm.programmanager_execute_local(retptr, this.__wbg_ptr, ptr0, ptr1, len1, ptr2, len2, addHeapObject(inputs), cache, ptr3, ptr4);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ExecutionResponse.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Execute Aleo function and create an Aleo execution transaction\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program being executed\n    * @param function The name of the function to execute\n    * @param inputs A javascript array of inputs to the function\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param cache Cache the proving and verifying keys in the ProgramManager's memory.\n    * If this is set to 'true' the keys synthesized (or passed in as optional parameters via the\n    * `proving_key` and `verifying_key` arguments) will be stored in the ProgramManager's memory\n    * and used for subsequent transactions. If this is set to 'false' the proving and verifying\n    * keys will be deallocated from memory after the transaction is executed.\n    * @param proving_key (optional) Provide a verifying key to use for the function execution\n    * @param verifying_key (optional) Provide a verifying key to use for the function execution\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {number} fee_credits\n    * @param {RecordPlaintext} fee_record\n    * @param {string} url\n    * @param {boolean} cache\n    * @param {ProvingKey | undefined} proving_key\n    * @param {VerifyingKey | undefined} verifying_key\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @returns {Promise<Transaction>}\n    */\n    execute(private_key, program, _function, inputs, fee_credits, fee_record, url, cache, proving_key, verifying_key, fee_proving_key, fee_verifying_key) {\n        _assertClass(private_key, PrivateKey);\n        var ptr0 = private_key.__destroy_into_raw();\n        const ptr1 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        _assertClass(fee_record, RecordPlaintext);\n        var ptr3 = fee_record.__destroy_into_raw();\n        const ptr4 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len4 = WASM_VECTOR_LEN;\n        let ptr5 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr5 = proving_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr6 = verifying_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr7 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr8 = fee_verifying_key.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_execute(this.__wbg_ptr, ptr0, ptr1, len1, ptr2, len2, addHeapObject(inputs), fee_credits, ptr3, ptr4, len4, cache, ptr5, ptr6, ptr7, ptr8);\n        return takeObject(ret);\n    }\n}\n/**\n*/\nexport class ProvingKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ProvingKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_provingkey_free(ptr);\n    }\n    /**\n    * Construct a new proving key from a byte array\n    * @param {Uint8Array} bytes\n    * @returns {ProvingKey}\n    */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.provingkey_fromBytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a byte array from a proving key\n    * @returns {Uint8Array}\n    */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.provingkey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Encrypted Aleo record\n*/\nexport class RecordCiphertext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RecordCiphertext.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_recordciphertext_free(ptr);\n    }\n    /**\n    * Return a record ciphertext from a string.\n    * @param {string} record\n    * @returns {RecordCiphertext}\n    */\n    static fromString(record) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.recordciphertext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return the record ciphertext string.\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordciphertext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Decrypt the record ciphertext into plaintext using the view key.\n    * @param {ViewKey} view_key\n    * @returns {RecordPlaintext}\n    */\n    decrypt(view_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(view_key, ViewKey);\n            wasm.recordciphertext_decrypt(retptr, this.__wbg_ptr, view_key.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordPlaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns `true` if the view key can decrypt the record ciphertext.\n    * @param {ViewKey} view_key\n    * @returns {boolean}\n    */\n    isOwner(view_key) {\n        _assertClass(view_key, ViewKey);\n        const ret = wasm.recordciphertext_isOwner(this.__wbg_ptr, view_key.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n/**\n* Aleo record plaintext\n*/\nexport class RecordPlaintext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RecordPlaintext.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_recordplaintext_free(ptr);\n    }\n    /**\n    * Return a record plaintext from a string.\n    * @param {string} record\n    * @returns {RecordPlaintext}\n    */\n    static fromString(record) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordPlaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the record plaintext string\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordplaintext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Returns the amount of microcredits in the record\n    * @returns {bigint}\n    */\n    microcredits() {\n        const ret = wasm.recordplaintext_microcredits(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n    * Attempt to get the serial number of a record to determine whether or not is has been spent\n    * @param {PrivateKey} private_key\n    * @param {string} program_id\n    * @param {string} record_name\n    * @returns {string}\n    */\n    serialNumberString(private_key, program_id, record_name) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            const ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_serialNumberString(retptr, this.__wbg_ptr, private_key.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr3 = r0;\n            var len3 = r1;\n            if (r3) {\n                ptr3 = 0; len3 = 0;\n                throw takeObject(r2);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n}\n/**\n*/\nexport class Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signature.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signature_free(ptr);\n    }\n    /**\n    * @param {PrivateKey} private_key\n    * @param {Uint8Array} message\n    * @returns {Signature}\n    */\n    static sign(private_key, message) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_sign(private_key.__wbg_ptr, ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * @param {Address} address\n    * @param {Uint8Array} message\n    * @returns {boolean}\n    */\n    verify(address, message) {\n        _assertClass(address, Address);\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_verify(this.__wbg_ptr, address.__wbg_ptr, ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * @param {string} signature\n    * @returns {Signature}\n    */\n    static from_string(signature) {\n        const ptr0 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_from_string(ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signature_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n/**\n* Webassembly Representation of an Aleo transaction\n*\n* This object is created when generating an on-chain function deployment or execution and is the\n* object that should be submitted to the Aleo Network in order to deploy or execute a function.\n*/\nexport class Transaction {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Transaction.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transaction_free(ptr);\n    }\n    /**\n    * Create a transaction from a string\n    * @param {string} transaction\n    * @returns {Transaction}\n    */\n    static fromString(transaction) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(transaction, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transaction_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Transaction.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the transaction as a string. If you want to submit this transaction to the Aleo Network\n    * this function will create the string that should be submitted in the `POST` data.\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the id of the transaction. This is the merkle root of the transaction's inclusion proof.\n    *\n    * This value can be used to query the status of the transaction on the Aleo Network to see\n    * if it was successful. If successful, the transaction will be included in a block and this\n    * value can be used to lookup the transaction data on-chain.\n    * @returns {string}\n    */\n    transactionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_transactionId(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the type of the transaction (will return \"deploy\" or \"execute\")\n    * @returns {string}\n    */\n    transactionType() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_transactionType(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n/**\n*/\nexport class VerifyingKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(VerifyingKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_verifyingkey_free(ptr);\n    }\n    /**\n    * Construct a new verifying key from a byte array\n    * @param {Uint8Array} bytes\n    * @returns {VerifyingKey}\n    */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.verifyingkey_fromBytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a byte array from a verifying key\n    * @returns {Uint8Array}\n    */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifyingkey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nexport class ViewKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ViewKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_viewkey_free(ptr);\n    }\n    /**\n    * @param {PrivateKey} private_key\n    * @returns {ViewKey}\n    */\n    static from_private_key(private_key) {\n        _assertClass(private_key, PrivateKey);\n        const ret = wasm.viewkey_from_private_key(private_key.__wbg_ptr);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * @param {string} view_key\n    * @returns {ViewKey}\n    */\n    static from_string(view_key) {\n        const ptr0 = passStringToWasm0(view_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.viewkey_from_string(ptr0, len0);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.viewkey_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = wasm.viewkey_to_address(this.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @param {string} ciphertext\n    * @returns {string}\n    */\n    decrypt(ciphertext) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.viewkey_decrypt(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr2 = r0;\n            var len2 = r1;\n            if (r3) {\n                ptr2 = 0; len2 = 0;\n                throw takeObject(r2);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n}\n/**\n*/\nexport class wbg_rayon_PoolBuilder {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(wbg_rayon_PoolBuilder.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_wbg_rayon_poolbuilder_free(ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    numThreads() {\n        const ret = wasm.wbg_rayon_poolbuilder_numThreads(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    receiver() {\n        const ret = wasm.wbg_rayon_poolbuilder_receiver(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    */\n    build() {\n        wasm.wbg_rayon_poolbuilder_build(this.__wbg_ptr);\n    }\n}\n\nasync function __wbg_load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction __wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbg_transaction_new = function(arg0) {\n        const ret = Transaction.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        const ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_log_bcdbad8373c39b16 = function(arg0, arg1) {\n        console.log(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_object_clone_ref = function(arg0) {\n        const ret = getObject(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {\n        const obj = getObject(arg1);\n        const ret = typeof(obj) === 'string' ? obj : undefined;\n        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbindgen_cb_drop = function(arg0) {\n        const obj = takeObject(arg0).original;\n        if (obj.cnt-- == 1) {\n            obj.a = 0;\n            return true;\n        }\n        const ret = false;\n        return ret;\n    };\n    imports.wbg.__wbg_new_abda76e883ba8a5f = function() {\n        const ret = new Error();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_stack_658279fe44541cf6 = function(arg0, arg1) {\n        const ret = getObject(arg1).stack;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_error_f851667af71bcfc6 = function(arg0, arg1) {\n        let deferred0_0;\n        let deferred0_1;\n        try {\n            deferred0_0 = arg0;\n            deferred0_1 = arg1;\n            console.error(getStringFromWasm0(arg0, arg1));\n        } finally {\n            wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n        }\n    };\n    imports.wbg.__wbg_fetch_57429b87be3dcc33 = function(arg0) {\n        const ret = fetch(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_link_22046963fe0b707a = function(arg0) {\n        const ret = \"data:application/javascript,\" + encodeURIComponent(`onmessage = function (ev) {\n            let [ia, index, value] = ev.data;\n            ia = new Int32Array(ia.buffer);\n            let result = Atomics.wait(ia, index, value);\n            postMessage(result);\n        };\n        `);\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbindgen_number_new = function(arg0) {\n        const ret = arg0;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_waitAsync_60fb5e2e86467e31 = function() {\n        const ret = Atomics.waitAsync;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_undefined = function(arg0) {\n        const ret = getObject(arg0) === undefined;\n        return ret;\n    };\n    imports.wbg.__wbg_waitAsync_73fd6eb3bace0a8d = function(arg0, arg1, arg2) {\n        const ret = Atomics.waitAsync(getObject(arg0), arg1, arg2);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_async_e1a2a669aacf35ff = function(arg0) {\n        const ret = getObject(arg0).async;\n        return ret;\n    };\n    imports.wbg.__wbg_value_555e4f564193db05 = function(arg0) {\n        const ret = getObject(arg0).value;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_fetch_8eaf01857a5bb21f = function(arg0, arg1) {\n        const ret = getObject(arg0).fetch(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_signal_4bd18fb489af2d4c = function(arg0) {\n        const ret = getObject(arg0).signal;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_55c9955722952374 = function() { return handleError(function () {\n        const ret = new AbortController();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_abort_654b796176d117aa = function(arg0) {\n        getObject(arg0).abort();\n    };\n    imports.wbg.__wbg_status_114ef6fe27fb8b00 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).status;\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_response_f2acf2ecbe021710 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).response;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_responseText_da275667251fd153 = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg1).responseText;\n        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    }, arguments) };\n    imports.wbg.__wbg_new_daafff584c71593b = function() { return handleError(function () {\n        const ret = new XMLHttpRequest();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_open_56fa1eb95989f6a5 = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4, arg5) {\n        getObject(arg0).open(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4), arg5 !== 0);\n    }, arguments) };\n    imports.wbg.__wbg_overrideMimeType_1a661d17da5f8baf = function() { return handleError(function (arg0, arg1, arg2) {\n        getObject(arg0).overrideMimeType(getStringFromWasm0(arg1, arg2));\n    }, arguments) };\n    imports.wbg.__wbg_send_9f5007eae908c72e = function() { return handleError(function (arg0) {\n        getObject(arg0).send();\n    }, arguments) };\n    imports.wbg.__wbg_new_1eead62f64ca15ce = function() { return handleError(function () {\n        const ret = new Headers();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_append_fda9e3432e3e88da = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n        getObject(arg0).append(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));\n    }, arguments) };\n    imports.wbg.__wbg_instanceof_Response_fc4327dbfcdf5ced = function(arg0) {\n        let result;\n        try {\n            result = getObject(arg0) instanceof Response;\n        } catch {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbg_url_8503de97f69da463 = function(arg0, arg1) {\n        const ret = getObject(arg1).url;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_status_ac85a3142a84caa2 = function(arg0) {\n        const ret = getObject(arg0).status;\n        return ret;\n    };\n    imports.wbg.__wbg_headers_b70de86b8e989bc0 = function(arg0) {\n        const ret = getObject(arg0).headers;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_arrayBuffer_288fb3538806e85c = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).arrayBuffer();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_data_ab99ae4a2e1e8bc9 = function(arg0) {\n        const ret = getObject(arg0).data;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithstrandinit_cad5cd6038c7ff5d = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = new Request(getStringFromWasm0(arg0, arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_setonmessage_f0bd0280573b7084 = function(arg0, arg1) {\n        getObject(arg0).onmessage = getObject(arg1);\n    };\n    imports.wbg.__wbg_new_8e7322f46d5d019c = function() { return handleError(function (arg0, arg1) {\n        const ret = new Worker(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_postMessage_8c609e2bde333d9c = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).postMessage(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_crypto_c48a774b022d20ac = function(arg0) {\n        const ret = getObject(arg0).crypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_object = function(arg0) {\n        const val = getObject(arg0);\n        const ret = typeof(val) === 'object' && val !== null;\n        return ret;\n    };\n    imports.wbg.__wbg_process_298734cf255a885d = function(arg0) {\n        const ret = getObject(arg0).process;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_versions_e2e78e134e3e5d01 = function(arg0) {\n        const ret = getObject(arg0).versions;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_node_1cd7a5d853dbea79 = function(arg0) {\n        const ret = getObject(arg0).node;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_string = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'string';\n        return ret;\n    };\n    imports.wbg.__wbg_msCrypto_bcb970640f50a1e8 = function(arg0) {\n        const ret = getObject(arg0).msCrypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_require_8f08ceecec0f4fee = function() { return handleError(function () {\n        const ret = module.require;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_function = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'function';\n        return ret;\n    };\n    imports.wbg.__wbg_randomFillSync_dc1e9a60c158336d = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).randomFillSync(takeObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_getRandomValues_37fa2ca9e4e07fab = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).getRandomValues(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_get_44be0491f933a435 = function(arg0, arg1) {\n        const ret = getObject(arg0)[arg1 >>> 0];\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_length_fff51ee6522a1a18 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_newnoargs_581967eacc0e2604 = function(arg0, arg1) {\n        const ret = new Function(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_next_526fc47e980da008 = function(arg0) {\n        const ret = getObject(arg0).next;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_next_ddb3312ca1c4e32a = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).next();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_done_5c1f01fb660d73b5 = function(arg0) {\n        const ret = getObject(arg0).done;\n        return ret;\n    };\n    imports.wbg.__wbg_value_1695675138684bd5 = function(arg0) {\n        const ret = getObject(arg0).value;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_iterator_97f0c81209c6c35a = function() {\n        const ret = Symbol.iterator;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_get_97b561fb56f034b5 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.get(getObject(arg0), getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_call_cb65541d95d71282 = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg0).call(getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_new_b51585de1b234aff = function() {\n        const ret = new Object();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_self_1ff1d729e9aae938 = function() { return handleError(function () {\n        const ret = self.self;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_window_5f4faef6c12b79ec = function() { return handleError(function () {\n        const ret = window.window;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_globalThis_1d39714405582d3c = function() { return handleError(function () {\n        const ret = globalThis.globalThis;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_global_651f05c6a0944d1c = function() { return handleError(function () {\n        const ret = global.global;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_newwithlength_3ec098a360da1909 = function(arg0) {\n        const ret = new Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_502d29070ea18557 = function(arg0, arg1, arg2) {\n        getObject(arg0)[arg1 >>> 0] = takeObject(arg2);\n    };\n    imports.wbg.__wbg_of_3f69007bb4eeae65 = function(arg0, arg1, arg2) {\n        const ret = Array.of(getObject(arg0), getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_call_01734de55d61e11d = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_new_43f1b47c28813cbd = function(arg0, arg1) {\n        try {\n            var state0 = {a: arg0, b: arg1};\n            var cb0 = (arg0, arg1) => {\n                const a = state0.a;\n                state0.a = 0;\n                try {\n                    return __wbg_adapter_216(a, state0.b, arg0, arg1);\n                } finally {\n                    state0.a = a;\n                }\n            };\n            const ret = new Promise(cb0);\n            return addHeapObject(ret);\n        } finally {\n            state0.a = state0.b = 0;\n        }\n    };\n    imports.wbg.__wbg_resolve_53698b95aaf7fcf8 = function(arg0) {\n        const ret = Promise.resolve(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_then_f7e06ee3c11698eb = function(arg0, arg1) {\n        const ret = getObject(arg0).then(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_then_b2267541e2a73865 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).then(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_buffer_085ec1f694018c4f = function(arg0) {\n        const ret = getObject(arg0).buffer;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_a0af68041688e8fd = function(arg0) {\n        const ret = new Int32Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithbyteoffsetandlength_6da8e527659b86aa = function(arg0, arg1, arg2) {\n        const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_8125e318e6245eed = function(arg0) {\n        const ret = new Uint8Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_5cf90238115182c3 = function(arg0, arg1, arg2) {\n        getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n    };\n    imports.wbg.__wbg_length_72e2208bbc0efc61 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_newwithlength_e5d69174d6984cd7 = function(arg0) {\n        const ret = new Uint8Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_subarray_13db269f57aa838d = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_has_c5fcd020291e56b8 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.has(getObject(arg0), getObject(arg1));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_set_092e06b0f9d71865 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_stringify_e25465938f3f611f = function() { return handleError(function (arg0) {\n        const ret = JSON.stringify(getObject(arg0));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {\n        const ret = debugString(getObject(arg1));\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_rethrow = function(arg0) {\n        throw takeObject(arg0);\n    };\n    imports.wbg.__wbindgen_module = function() {\n        const ret = __wbg_init.__wbindgen_wasm_module;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_startWorkers_6fd3af285ea11136 = function(arg0, arg1, arg2) {\n        const ret = startWorkers(takeObject(arg0), takeObject(arg1), wbg_rayon_PoolBuilder.__wrap(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper6970 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 1157, __wbg_adapter_32);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper6971 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 1157, __wbg_adapter_32);\n        return addHeapObject(ret);\n    };\n\n    return imports;\n}\n\nfunction __wbg_init_memory(imports, maybe_memory) {\n    imports.wbg.memory = maybe_memory || new WebAssembly.Memory({initial:122,maximum:65536,shared:true});\n}\n\nfunction __wbg_finalize_init(instance, module) {\n    wasm = instance.exports;\n    __wbg_init.__wbindgen_wasm_module = module;\n    cachedInt32Memory0 = null;\n    cachedUint8Memory0 = null;\n\n    wasm.__wbindgen_start();\n    return wasm;\n}\n\nfunction initSync(module, maybe_memory) {\n    if (wasm !== undefined) return wasm;\n\n    const imports = __wbg_get_imports();\n\n    __wbg_init_memory(imports, maybe_memory);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nasync function __wbg_init(input, maybe_memory) {\n    if (wasm !== undefined) return wasm;\n\n    if (typeof input === 'undefined') {\n        input = new URL('aleo_wasm_bg.wasm', import.meta.url);\n    }\n    const imports = __wbg_get_imports();\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    __wbg_init_memory(imports, maybe_memory);\n\n    const { instance, module } = await __wbg_load(await input, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nexport { initSync }\nexport default __wbg_init;\n","/**\n * Copyright 2021 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Note: we use `wasm_bindgen_worker_`-prefixed message types to make sure\n// we can handle bundling into other files, which might happen to have their\n// own `postMessage`/`onmessage` communication channels.\n//\n// If we didn't take that into the account, we could send much simpler signals\n// like just `0` or whatever, but the code would be less resilient.\n\nfunction waitForMsgType(target, type) {\n  return new Promise(resolve => {\n    target.addEventListener('message', function onMsg({ data }) {\n      if (data == null || data.type !== type) return;\n      target.removeEventListener('message', onMsg);\n      resolve(data);\n    });\n  });\n}\n\nwaitForMsgType(self, 'wasm_bindgen_worker_init').then(async data => {\n  // # Note 1\n  // Our JS should have been generated in\n  // `[out-dir]/snippets/wasm-bindgen-rayon-[hash]/workerHelpers.js`,\n  // resolve the main module via `../../..`.\n  //\n  // This might need updating if the generated structure changes on wasm-bindgen\n  // side ever in the future, but works well with bundlers today. The whole\n  // point of this crate, after all, is to abstract away unstable features\n  // and temporary bugs so that you don't need to deal with them in your code.\n  //\n  // # Note 2\n  // This could be a regular import, but then some bundlers complain about\n  // circular deps.\n  //\n  // Dynamic import could be cheap if this file was inlined into the parent,\n  // which would require us just using `../../..` in `new Worker` below,\n  // but that doesn't work because wasm-pack unconditionally adds\n  // \"sideEffects\":false (see below).\n  //\n  // OTOH, even though it can't be inlined, it should be still reasonably\n  // cheap since the requested file is already in cache (it was loaded by\n  // the main thread).\n  const pkg = await import('../../..');\n  await pkg.default(data.module, data.memory);\n  postMessage({ type: 'wasm_bindgen_worker_ready' });\n  pkg.wbg_rayon_start_worker(data.receiver);\n});\n\n// Note: this is never used, but necessary to prevent a bug in Firefox\n// (https://bugzilla.mozilla.org/show_bug.cgi?id=1702191) where it collects\n// Web Workers that have a shared WebAssembly memory with the main thread,\n// but are not explicitly rooted via a `Worker` instance.\n//\n// By storing them in a variable, we can keep `Worker` objects around and\n// prevent them from getting GC-d.\nlet _workers;\n\nexport async function startWorkers(module, memory, builder) {\n  const workerInit = {\n    type: 'wasm_bindgen_worker_init',\n    module,\n    memory,\n    receiver: builder.receiver()\n  };\n\n  _workers = await Promise.all(\n    Array.from({ length: builder.numThreads() }, async () => {\n      // Self-spawn into a new Worker.\n      //\n      // TODO: while `new URL('...', import.meta.url) becomes a semi-standard\n      // way to get asset URLs relative to the module across various bundlers\n      // and browser, ideally we should switch to `import.meta.resolve`\n      // once it becomes a standard.\n      //\n      // Note: we could use `../../..` as the URL here to inline workerHelpers.js\n      // into the parent entry instead of creating another split point -\n      // this would be preferable from optimization perspective -\n      // however, Webpack then eliminates all message handler code\n      // because wasm-pack produces \"sideEffects\":false in package.json\n      // unconditionally.\n      //\n      // The only way to work around that is to have side effect code\n      // in an entry point such as Worker file itself.\n      const worker = new Worker(new URL('./workerHelpers.js', import.meta.url), {\n        type: 'module'\n      });\n      worker.postMessage(workerInit);\n      await waitForMsgType(worker, 'wasm_bindgen_worker_ready');\n      return worker;\n    })\n  );\n  builder.build();\n}\n","const FEE_PROVER_URL = \"https://testnet3.parameters.aleo.org/fee.prover.0bfc24f\";\nconst FEE_VERIFIER_URL = \"https://testnet3.parameters.aleo.org/fee.verifier.44783e8\";\nconst JOIN_PROVER_URL = \"https://testnet3.parameters.aleo.org/join.prover.6856be2\";\nconst JOIN_VERIFIER_URL = \"https://testnet3.parameters.aleo.org/join.verifier.9c946a3\";\nconst SPLIT_PROVER_URL = \"https://testnet3.parameters.aleo.org/split.prover.8469bca\";\nconst SPLIT_VERIFIER_URL = \"https://testnet3.parameters.aleo.org/split.verifier.ba3bdd9\";\nconst TRANSFER_PRIVATE_PROVER_URL = \"https://testnet3.parameters.aleo.org/transfer.prover.2a9a6f2\";\nconst TRANSFER_PRIVATE_VERIFIER_URL = \"https://testnet3.parameters.aleo.org/transfer.verifier.3a59762\";\nconst TRANSFER_PRIVATE_TO_PUBLIC_PROVER_URL = \"https://testnet3.parameters.aleo.org/transfer_private_to_public.prover.cf3b952\";\nconst TRANSFER_PRIVATE_TO_PUBLIC_VERIFIER_URL = \"https://testnet3.parameters.aleo.org/transfer_private_to_public.verifier.5bd459b\";\nconst TRANSFER_PUBLIC_PROVER_URL = \"https://testnet3.parameters.aleo.org/transfer_public.prover.1117f0a\";\nconst TRANSFER_PUBLIC_VERIFIER_URL = \"https://testnet3.parameters.aleo.org/transfer_public.verifier.d63af11\";\nconst TRANSFER_PUBLIC_TO_PRIVATE_PROVER_URL = \"https://testnet3.parameters.aleo.org/transfer_public_to_private.prover.7b763af\";\nconst TRANSFER_PUBLIC_TO_PRIVATE_VERIFIER_URL = \"https://testnet3.parameters.aleo.org/transfer_public_to_private.verifier.25f6542\";\n\nexport {FEE_PROVER_URL, FEE_VERIFIER_URL, JOIN_PROVER_URL, JOIN_VERIFIER_URL, SPLIT_PROVER_URL, SPLIT_VERIFIER_URL,\n    TRANSFER_PRIVATE_PROVER_URL, TRANSFER_PRIVATE_VERIFIER_URL, TRANSFER_PUBLIC_PROVER_URL, TRANSFER_PUBLIC_VERIFIER_URL,\n    TRANSFER_PRIVATE_TO_PUBLIC_PROVER_URL, TRANSFER_PRIVATE_TO_PUBLIC_VERIFIER_URL, TRANSFER_PUBLIC_TO_PRIVATE_PROVER_URL, TRANSFER_PUBLIC_TO_PRIVATE_VERIFIER_URL};","import init, * as aleo from '@aleohq/wasm';\nimport { FEE_PROVER_URL, FEE_VERIFIER_URL, JOIN_PROVER_URL, JOIN_VERIFIER_URL, SPLIT_PROVER_URL, SPLIT_VERIFIER_URL,\n    TRANSFER_PRIVATE_PROVER_URL, TRANSFER_PRIVATE_VERIFIER_URL, TRANSFER_PRIVATE_TO_PUBLIC_PROVER_URL,\nTRANSFER_PRIVATE_TO_PUBLIC_VERIFIER_URL, TRANSFER_PUBLIC_PROVER_URL, TRANSFER_PUBLIC_VERIFIER_URL,\n    TRANSFER_PUBLIC_TO_PRIVATE_PROVER_URL, TRANSFER_PUBLIC_TO_PRIVATE_VERIFIER_URL} from './keys';\n\nlet feeProvingKey = null;\nlet feeVerifyingKey = null;\nlet joinProvingKey = null;\nlet joinVerifyingKey = null;\nlet splitProvingKey = null;\nlet splitVerifyingKey = null;\nlet transferPrivateProvingKey = null;\nlet transferPrivateVerifyingKey = null;\nlet transferPrivateToPublicProvingKey = null;\nlet transferPrivateToPublicVerifyingKey = null;\nlet transferPublicProvingKey = null;\nlet transferPublicVerifyingKey = null;\nlet transferPublicToPrivateProvingKey = null;\nlet transferPublicToPrivateVerifyingKey = null;\n\nawait init();\nawait aleo.initThreadPool(10);\nconst aleoProgramManager = new aleo.ProgramManager();\n\nconst getFunctionKeys = async (proverUrl, verifierUrl) => {\n    console.log(\"Downloading proving and verifying keys from: \", proverUrl, verifierUrl);\n    let proofResponse = await fetch(proverUrl);\n    let proofBuffer = await proofResponse.arrayBuffer();\n    let verificationResponse = await fetch(verifierUrl);\n    let verificationBuffer = await verificationResponse.arrayBuffer();\n    let provingKey = aleo.ProvingKey.fromBytes(new Uint8Array(proofBuffer));\n    let verifyingKey = aleo.VerifyingKey.fromBytes(new Uint8Array(verificationBuffer));\n    return [provingKey, verifyingKey];\n}\n\nconst validateProgram = (programString) => {\n    try {\n        return aleo.Program.fromString(programString);\n    } catch (error) {\n        console.log(error);\n        throw (`Program input is not a valid Aleo program`);\n    }\n}\n\nconst programMatchesOnChain = async (programString) => {\n    const program = validateProgram(programString);\n    let onlineProgramText;\n    try {\n        const program_id = program.id();\n        const program_url = `https://vm.aleo.org/api/testnet3/program/${program_id}`;\n        const programResponse = await fetch(program_url);\n        onlineProgramText = await programResponse.json();\n    } catch (error) {\n        console.log(error);\n        throw (`Program does not exist on chain`);\n    }\n\n    try {\n        const onlineProgram = aleo.Program.fromString(onlineProgramText);\n        return program.isEqual(onlineProgram);\n    } catch (error) {\n        console.log(error);\n        throw (`Could not parse program from chain`);\n    }\n}\nlet lastLocalProgram = null;\n\nself.addEventListener(\"message\", ev => {\n    if (ev.data.type === 'ALEO_EXECUTE_PROGRAM_LOCAL') {\n        const {\n            localProgram,\n            aleoFunction,\n            inputs,\n            privateKey,\n        } = ev.data;\n\n        console.log('Web worker: Executing function locally...');\n        let startTime = performance.now();\n\n        try {\n            validateProgram(localProgram);\n\n            if (lastLocalProgram === null) {\n                lastLocalProgram = localProgram;\n            } else if (lastLocalProgram !== localProgram) {\n                aleoProgramManager.clearKeyCache();\n                lastLocalProgram = localProgram;\n            }\n\n            let response = aleoProgramManager.execute_local(\n                aleo.PrivateKey.from_string(privateKey),\n                localProgram,\n                aleoFunction,\n                inputs,\n                true\n            );\n\n            console.log(`Web worker: Local execution completed in ${performance.now() - startTime} ms`);\n            let outputs = response.getOutputs();\n            console.log(`Function execution response: ${outputs}`);\n            self.postMessage({type: 'OFFLINE_EXECUTION_COMPLETED', outputs});\n        } catch (error) {\n            console.log(error);\n            self.postMessage({ type: 'ERROR', errorMessage: error.toString() });\n        }\n    }\n    else if (ev.data.type === 'ALEO_EXECUTE_PROGRAM_ON_CHAIN') {\n        const {\n            remoteProgram,\n            aleoFunction,\n            inputs,\n            privateKey,\n            fee,\n            feeRecord,\n            url\n        } = ev.data;\n\n        console.log('Web worker: Creating execution...');\n        let startTime = performance.now();\n\n        (async function() {\n            try {\n                const programMatches = await programMatchesOnChain(remoteProgram);\n                if (!programMatches) {\n                    throw (`Program does not match the program deployed on the Aleo Network, cannot execute`);\n                }\n\n                if (feeProvingKey === null || feeVerifyingKey === null) {\n                    [feeProvingKey, feeVerifyingKey] = await getFunctionKeys(FEE_PROVER_URL, FEE_VERIFIER_URL);\n                }\n\n                if (!aleoProgramManager.keyExists(\"credits.aleo\", \"fee\")) {\n                    aleoProgramManager.cacheKeypairInWasmMemory(aleo.Program.getCreditsProgram().toString(), \"fee\", feeProvingKey, feeVerifyingKey);\n                }\n\n                let executeTransaction = await aleoProgramManager.execute(\n                    aleo.PrivateKey.from_string(privateKey),\n                    remoteProgram,\n                    aleoFunction,\n                    inputs,\n                    fee,\n                    aleo.RecordPlaintext.fromString(feeRecord),\n                    url,\n                    true\n                );\n\n                console.log(`Web worker: On-chain execution transaction created in ${performance.now() - startTime} ms`);\n                let transaction = executeTransaction.toString();\n                console.log(transaction);\n                self.postMessage({type: 'EXECUTION_TRANSACTION_COMPLETED', executeTransaction: transaction});\n            } catch (error) {\n                console.log(error);\n                self.postMessage({ type: 'ERROR', errorMessage: error.toString() });\n            }\n        })();\n    }\n    else if (ev.data.type === 'ALEO_TRANSFER') {\n        const {\n            privateKey,\n            amountCredits,\n            recipient,\n            transfer_type,\n            amountRecord,\n            fee,\n            feeRecord,\n            url\n        } = ev.data;\n\n        console.log('Web worker: Creating transfer...');\n        let startTime = performance.now();\n\n        (async function() {\n            try {\n                if (transfer_type === \"public\") {\n                    if (transferPublicProvingKey === null || transferPublicVerifyingKey === null) {\n                        [transferPublicProvingKey, transferPublicVerifyingKey] = await getFunctionKeys(TRANSFER_PUBLIC_PROVER_URL, TRANSFER_PUBLIC_VERIFIER_URL);\n                    }\n                } else if (transfer_type === \"private\") {\n                    if (transferPrivateProvingKey === null || transferPrivateVerifyingKey === null) {\n                        [transferPrivateProvingKey, transferPrivateVerifyingKey] = await getFunctionKeys(TRANSFER_PRIVATE_PROVER_URL, TRANSFER_PRIVATE_VERIFIER_URL);\n                    }\n                } else if (transfer_type === \"publicToPrivate\") {\n                    if (transferPublicToPrivateProvingKey === null || transferPublicToPrivateVerifyingKey === null) {\n                        [transferPublicToPrivateProvingKey, transferPublicToPrivateVerifyingKey] = await getFunctionKeys(TRANSFER_PUBLIC_TO_PRIVATE_PROVER_URL, TRANSFER_PUBLIC_TO_PRIVATE_VERIFIER_URL);\n                    }\n                } else if (transfer_type === \"privateToPublic\") {\n                    if (transferPrivateToPublicProvingKey === null || transferPrivateToPublicVerifyingKey === null) {\n                        [transferPrivateToPublicProvingKey, transferPrivateToPublicVerifyingKey] = await getFunctionKeys(TRANSFER_PRIVATE_TO_PUBLIC_PROVER_URL, TRANSFER_PRIVATE_TO_PUBLIC_VERIFIER_URL);\n                    }\n                } else {\n                    throw (`Invalid transfer type`);\n                }\n                if (!aleoProgramManager.keyExists(\"credits.aleo\", \"transfer\")) {\n                    aleoProgramManager.cacheKeypairInWasmMemory(aleo.Program.getCreditsProgram().toString(), \"transfer\", transferPrivateProvingKey, transferPrivateVerifyingKey);\n                }\n                if (feeProvingKey === null || feeVerifyingKey === null) {\n                    [feeProvingKey, feeVerifyingKey] = await getFunctionKeys(FEE_PROVER_URL, FEE_VERIFIER_URL);\n                }\n                if (!aleoProgramManager.keyExists(\"credits.aleo\", \"fee\")) {\n                    aleoProgramManager.cacheKeypairInWasmMemory(aleo.Program.getCreditsProgram().toString(), \"fee\", feeProvingKey, feeVerifyingKey);\n                }\n\n                let transferTransaction = await aleoProgramManager.transfer(\n                    aleo.PrivateKey.from_string(privateKey),\n                    amountCredits,\n                    recipient,\n                    \"transfer_private\",\n                    aleo.RecordPlaintext.fromString(amountRecord),\n                    fee,\n                    aleo.RecordPlaintext.fromString(feeRecord),\n                    url,\n                    true\n                );\n\n                console.log(`Web worker: Transfer transaction created in ${performance.now() - startTime} ms`);\n                let transaction = transferTransaction.toString();\n                console.log(transaction);\n                self.postMessage({type: 'TRANSFER_TRANSACTION_COMPLETED', transferTransaction: transaction});\n            } catch (error) {\n                console.log(error);\n                self.postMessage({ type: 'ERROR', errorMessage: error.toString() });\n            }\n        })();\n    }\n    else if (ev.data.type === 'ALEO_DEPLOY') {\n        const {\n            program,\n            privateKey,\n            fee,\n            feeRecord,\n            url\n        } = ev.data;\n\n        console.log('Web worker: Creating deployment...');\n\n        let startTime = performance.now();\n        (async function() {\n            try {\n                try {\n                    await programMatchesOnChain(program);\n                    throw (`A program with the same name already exists on the Aleo Network, cannot deploy`);\n                } catch (e) {\n                    if (e !== `Program does not exist on chain`) {\n                        throw e;\n                    }\n                    console.log(`Program not found on the Aleo Network - proceeding with deployment...`);\n                }\n\n                if (feeProvingKey === null || feeVerifyingKey === null) {\n                    [feeProvingKey, feeVerifyingKey] = await getFunctionKeys(FEE_PROVER_URL, FEE_VERIFIER_URL);\n                }\n                if (!aleoProgramManager.keyExists(\"credits.aleo\", \"fee\")) {\n                    aleoProgramManager.cacheKeypairInWasmMemory(aleo.Program.getCreditsProgram().toString(), \"fee\", feeProvingKey, feeVerifyingKey);\n                }\n\n                let deployTransaction = await aleoProgramManager.deploy(\n                    aleo.PrivateKey.from_string(privateKey),\n                    program,\n                    undefined,\n                    fee,\n                    aleo.RecordPlaintext.fromString(feeRecord),\n                    url,\n                    true\n                );\n\n                console.log(`Web worker: Deployment transaction created in ${performance.now() - startTime} ms`);\n                let transaction = deployTransaction.toString();\n                console.log(transaction);\n                self.postMessage({type: 'DEPLOY_TRANSACTION_COMPLETED', deployTransaction: transaction});\n            } catch (error) {\n                console.log(error);\n                self.postMessage({ type: 'ERROR', errorMessage: error.toString() });\n            }\n        })();\n    }\n    else if (ev.data.type === 'ALEO_SPLIT') {\n        const {\n            splitAmount,\n            record,\n            privateKey,\n            url\n        } = ev.data;\n\n        console.log('Web worker: Creating split...');\n\n        let startTime = performance.now();\n        (async function() {\n            try {\n                if (splitProvingKey === null || splitVerifyingKey === null) {\n                    [splitProvingKey, splitVerifyingKey] = await getFunctionKeys(SPLIT_PROVER_URL, SPLIT_VERIFIER_URL);\n                }\n                if (!aleoProgramManager.keyExists(\"credits.aleo\", \"split\")) {\n                    aleoProgramManager.cacheKeypairInWasmMemory(aleo.Program.getCreditsProgram().toString(), \"split\", splitProvingKey, splitVerifyingKey);\n                }\n                let splitTransaction = await aleoProgramManager.split(\n                    aleo.PrivateKey.from_string(privateKey),\n                    splitAmount,\n                    aleo.RecordPlaintext.fromString(record),\n                    url,\n                    true\n                );\n\n                console.log(`Web worker: Split transaction created in ${performance.now() - startTime} ms`);\n                let transaction = splitTransaction.toString();\n                console.log(transaction);\n                self.postMessage({type: 'SPLIT_TRANSACTION_COMPLETED', splitTransaction: transaction});\n            } catch (error) {\n                console.log(error);\n                self.postMessage({ type: 'ERROR', errorMessage: error.toString() });\n            }\n        })();\n    }\n    else if (ev.data.type === 'ALEO_JOIN') {\n        const {\n            recordOne,\n            recordTwo,\n            fee,\n            feeRecord,\n            privateKey,\n            url\n        } = ev.data;\n\n        console.log('Web worker: Creating join...');\n\n        let startTime = performance.now();\n        (async function() {\n            if (joinProvingKey === null || joinVerifyingKey === null) {\n                [joinProvingKey, joinVerifyingKey] = await getFunctionKeys(JOIN_PROVER_URL, JOIN_VERIFIER_URL);\n            }\n            if (!aleoProgramManager.keyExists(\"credits.aleo\", \"join\")) {\n                aleoProgramManager.cacheKeypairInWasmMemory(aleo.Program.getCreditsProgram().toString(), \"join\", joinProvingKey, joinVerifyingKey);\n            }\n            if (feeProvingKey === null || feeVerifyingKey === null) {\n                [feeProvingKey, feeVerifyingKey] = await getFunctionKeys(FEE_PROVER_URL, FEE_VERIFIER_URL);\n            }\n            if (!aleoProgramManager.keyExists(\"credits.aleo\", \"fee\")) {\n                aleoProgramManager.cacheKeypairInWasmMemory(aleo.Program.getCreditsProgram().toString(), \"fee\", feeProvingKey, feeVerifyingKey);\n            }\n\n            try {\n                let joinTransaction = await aleoProgramManager.join(\n                    aleo.PrivateKey.from_string(privateKey),\n                    aleo.RecordPlaintext.fromString(recordOne),\n                    aleo.RecordPlaintext.fromString(recordTwo),\n                    fee,\n                    aleo.RecordPlaintext.fromString(feeRecord),\n                    url,\n                    true\n                );\n\n                console.log(`Web worker: Join transaction created in ${performance.now() - startTime} ms`);\n                let transaction = joinTransaction.toString();\n                console.log(transaction);\n                self.postMessage({ type: 'JOIN_TRANSACTION_COMPLETED', joinTransaction: transaction });\n            } catch (error) {\n                console.log(error);\n                self.postMessage({ type: 'ERROR', errorMessage: error.toString() });\n            }\n        })();\n    }\n});","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".worker.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.hmd = (module) => {\n\tmodule = Object.create(module);\n\tif (!module.children) module.children = [];\n\tObject.defineProperty(module, 'exports', {\n\t\tenumerable: true,\n\t\tset: () => {\n\t\t\tthrow new Error('ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: ' + module.id);\n\t\t}\n\t});\n\treturn module;\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = self.location + \"\";\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t179: 1,\n\t317: 1,\n\t654: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkaleo_website\"] = self[\"webpackChunkaleo_website\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(731);\n"],"names":["webpackQueues","webpackExports","webpackError","resolveQueue","wasm","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","Error","cachedUint8Memory0","getUint8Memory0","buffer","memory","Uint8Array","getStringFromWasm0","ptr","len","slice","heap","Array","fill","undefined","push","heap_next","length","addHeapObject","obj","idx","getObject","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encode","encodeString","arg","view","buf","set","read","written","passStringToWasm0","malloc","realloc","subarray","mem","offset","code","charCodeAt","isLikeNone","x","cachedInt32Memory0","getInt32Memory0","Int32Array","takeObject","ret","dropObject","debugString","val","type","description","name","isArray","debug","i","builtInMatches","exec","toString","call","className","JSON","stringify","_","message","stack","makeMutClosure","arg0","arg1","dtor","f","state","a","b","cnt","real","args","__wbindgen_export_3","get","original","__wbg_adapter_32","arg2","wasm_bindgen__convert__closures__invoke1_mut__h1fddb499e1f697ee","_assertClass","instance","klass","passArray8ToWasm0","getArrayU8FromWasm0","handleError","apply","this","e","__wbindgen_exn_store","initThreadPool","num_threads","wbg_rayon_start_worker","receiver","Address","static","Object","create","prototype","__wbg_ptr","__destroy_into_raw","free","__wbg_address_free","private_key","PrivateKey","address_from_private_key","__wrap","view_key","ViewKey","address_from_view_key","address","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","address_from_string","to_string","deferred1_0","deferred1_1","retptr","__wbindgen_add_to_stack_pointer","address_to_string","r0","r1","__wbindgen_free","verify","signature","Signature","address_verify","ExecutionResponse","__wbg_executionresponse_free","getOutputs","executionresponse_getOutputs","KeyPair","__wbg_keypair_free","constructor","proving_key","verifying_key","ProvingKey","VerifyingKey","ptr1","keypair_new","provingKey","keypair_provingKey","verifyingKey","keypair_verifyingKey","__wbg_privatekey_free","privatekey_new","seed","privatekey_from_seed_unchecked","privatekey_from_string","privatekey_to_string","to_view_key","privatekey_to_view_key","to_address","privatekey_to_address","sign","privatekey_sign","secret","privatekey_newEncrypted","PrivateKeyCiphertext","toCiphertext","privatekey_toCiphertext","ciphertext","privatekey_fromPrivateKeyCiphertext","__wbg_privatekeyciphertext_free","privatekeyciphertext_encryptPrivateKey","decryptToPrivateKey","privatekeyciphertext_decryptToPrivateKey","privatekeyciphertext_toString","privatekeyciphertext_fromString","Program","__wbg_program_free","program","program_fromString","program_toString","getFunctions","program_getFunctions","getFunctionInputs","function_name","program_getFunctionInputs","getRecordMembers","record_name","program_getRecordMembers","getStructMembers","struct_name","program_getStructMembers","program_getCreditsProgram","id","program_id","isEqual","other","program_isEqual","ProgramManager","__wbg_programmanager_free","transfer","amount_credits","recipient","transfer_type","amount_record","fee_credits","fee_record","url","cache","transfer_proving_key","transfer_verifying_key","fee_proving_key","fee_verifying_key","len1","ptr2","len2","ptr3","RecordPlaintext","ptr4","ptr5","len5","ptr6","ptr7","ptr8","ptr9","programmanager_transfer","split","split_amount","split_proving_key","split_verifying_key","programmanager_split","programmanager_new","cacheKeypairInWasmMemory","_function","programmanager_cacheKeypairInWasmMemory","getCachedKeypair","programmanager_getCachedKeypair","synthesizeKeypair","programmanager_synthesizeKeypair","clearKeyCache","programmanager_clearKeyCache","keyExists","function_id","programmanager_keyExists","join","record_1","record_2","join_proving_key","join_verifying_key","len4","programmanager_join","deploy","imports","_url","len3","programmanager_deploy","execute_local","inputs","programmanager_execute_local","execute","programmanager_execute","__wbg_provingkey_free","bytes","provingkey_fromBytes","toBytes","provingkey_toBytes","r2","v1","RecordCiphertext","__wbg_recordciphertext_free","record","recordciphertext_fromString","recordciphertext_toString","decrypt","recordciphertext_decrypt","isOwner","recordciphertext_isOwner","__wbg_recordplaintext_free","recordplaintext_fromString","recordplaintext_toString","microcredits","recordplaintext_microcredits","BigInt","asUintN","serialNumberString","deferred4_0","deferred4_1","recordplaintext_serialNumberString","r3","__wbg_signature_free","signature_sign","signature_verify","signature_from_string","signature_to_string","Transaction","__wbg_transaction_free","transaction","transaction_fromString","transaction_toString","transactionId","transaction_transactionId","transactionType","transaction_transactionType","__wbg_verifyingkey_free","verifyingkey_fromBytes","verifyingkey_toBytes","__wbg_viewkey_free","viewkey_from_private_key","viewkey_from_string","viewkey_to_string","viewkey_to_address","deferred3_0","deferred3_1","viewkey_decrypt","wbg_rayon_PoolBuilder","__wbg_wbg_rayon_poolbuilder_free","numThreads","wbg_rayon_poolbuilder_numThreads","wbg_rayon_poolbuilder_receiver","build","wbg_rayon_poolbuilder_build","__wbg_get_imports","wbg","__wbg_transaction_new","__wbindgen_string_new","__wbg_log_bcdbad8373c39b16","console","log","__wbindgen_object_clone_ref","__wbindgen_string_get","__wbindgen_object_drop_ref","__wbindgen_cb_drop","__wbg_new_abda76e883ba8a5f","__wbg_stack_658279fe44541cf6","__wbg_error_f851667af71bcfc6","deferred0_0","deferred0_1","error","__wbg_fetch_57429b87be3dcc33","fetch","__wbindgen_link_22046963fe0b707a","encodeURIComponent","__wbindgen_number_new","__wbg_waitAsync_60fb5e2e86467e31","Atomics","waitAsync","__wbindgen_is_undefined","__wbg_waitAsync_73fd6eb3bace0a8d","__wbg_async_e1a2a669aacf35ff","async","__wbg_value_555e4f564193db05","value","__wbg_fetch_8eaf01857a5bb21f","__wbg_signal_4bd18fb489af2d4c","signal","__wbg_new_55c9955722952374","AbortController","arguments","__wbg_abort_654b796176d117aa","abort","__wbg_status_114ef6fe27fb8b00","status","__wbg_response_f2acf2ecbe021710","response","__wbg_responseText_da275667251fd153","responseText","__wbg_new_daafff584c71593b","XMLHttpRequest","__wbg_open_56fa1eb95989f6a5","arg3","arg4","arg5","open","__wbg_overrideMimeType_1a661d17da5f8baf","overrideMimeType","__wbg_send_9f5007eae908c72e","send","__wbg_new_1eead62f64ca15ce","Headers","__wbg_append_fda9e3432e3e88da","append","__wbg_instanceof_Response_fc4327dbfcdf5ced","result","Response","__wbg_url_8503de97f69da463","__wbg_status_ac85a3142a84caa2","__wbg_headers_b70de86b8e989bc0","headers","__wbg_arrayBuffer_288fb3538806e85c","arrayBuffer","__wbg_data_ab99ae4a2e1e8bc9","data","__wbg_newwithstrandinit_cad5cd6038c7ff5d","Request","__wbg_setonmessage_f0bd0280573b7084","onmessage","__wbg_new_8e7322f46d5d019c","Worker","__wbg_postMessage_8c609e2bde333d9c","postMessage","__wbg_crypto_c48a774b022d20ac","crypto","__wbindgen_is_object","__wbg_process_298734cf255a885d","process","__wbg_versions_e2e78e134e3e5d01","versions","__wbg_node_1cd7a5d853dbea79","node","__wbindgen_is_string","__wbg_msCrypto_bcb970640f50a1e8","msCrypto","__wbg_require_8f08ceecec0f4fee","module","require","__wbindgen_is_function","__wbg_randomFillSync_dc1e9a60c158336d","randomFillSync","__wbg_getRandomValues_37fa2ca9e4e07fab","getRandomValues","__wbg_get_44be0491f933a435","__wbg_length_fff51ee6522a1a18","__wbg_newnoargs_581967eacc0e2604","Function","__wbg_next_526fc47e980da008","next","__wbg_next_ddb3312ca1c4e32a","__wbg_done_5c1f01fb660d73b5","done","__wbg_value_1695675138684bd5","__wbg_iterator_97f0c81209c6c35a","Symbol","iterator","__wbg_get_97b561fb56f034b5","Reflect","__wbg_call_cb65541d95d71282","__wbg_new_b51585de1b234aff","__wbg_self_1ff1d729e9aae938","self","__wbg_window_5f4faef6c12b79ec","window","__wbg_globalThis_1d39714405582d3c","globalThis","__wbg_global_651f05c6a0944d1c","g","global","__wbg_newwithlength_3ec098a360da1909","__wbg_set_502d29070ea18557","__wbg_of_3f69007bb4eeae65","of","__wbg_call_01734de55d61e11d","__wbg_new_43f1b47c28813cbd","state0","Promise","wasm_bindgen__convert__closures__invoke2_mut__hf1fd991b79c948a9","__wbg_adapter_216","__wbg_resolve_53698b95aaf7fcf8","resolve","__wbg_then_f7e06ee3c11698eb","then","__wbg_then_b2267541e2a73865","__wbg_buffer_085ec1f694018c4f","__wbg_new_a0af68041688e8fd","__wbg_newwithbyteoffsetandlength_6da8e527659b86aa","__wbg_new_8125e318e6245eed","__wbg_set_5cf90238115182c3","__wbg_length_72e2208bbc0efc61","__wbg_newwithlength_e5d69174d6984cd7","__wbg_subarray_13db269f57aa838d","__wbg_has_c5fcd020291e56b8","has","__wbg_set_092e06b0f9d71865","__wbg_stringify_e25465938f3f611f","__wbindgen_debug_string","__wbindgen_throw","__wbindgen_rethrow","__wbindgen_module","__wbg_init","__wbindgen_wasm_module","__wbindgen_memory","__wbg_startWorkers_6fd3af285ea11136","__wbindgen_closure_wrapper6970","__wbindgen_closure_wrapper6971","__wbg_init_memory","maybe_memory","WebAssembly","Memory","initial","maximum","shared","__wbg_finalize_init","exports","__wbindgen_start","initSync","Module","Instance","input","URL","instantiateStreaming","warn","instantiate","__wbg_load","waitForMsgType","target","addEventListener","onMsg","removeEventListener","_workers","startWorkers","builder","workerInit","all","from","worker","pkg","default","FEE_PROVER_URL","FEE_VERIFIER_URL","JOIN_PROVER_URL","JOIN_VERIFIER_URL","SPLIT_PROVER_URL","SPLIT_VERIFIER_URL","TRANSFER_PRIVATE_PROVER_URL","TRANSFER_PRIVATE_VERIFIER_URL","TRANSFER_PRIVATE_TO_PUBLIC_PROVER_URL","TRANSFER_PRIVATE_TO_PUBLIC_VERIFIER_URL","TRANSFER_PUBLIC_PROVER_URL","TRANSFER_PUBLIC_VERIFIER_URL","TRANSFER_PUBLIC_TO_PRIVATE_PROVER_URL","TRANSFER_PUBLIC_TO_PRIVATE_VERIFIER_URL","feeProvingKey","feeVerifyingKey","joinProvingKey","joinVerifyingKey","splitProvingKey","splitVerifyingKey","transferPrivateProvingKey","transferPrivateVerifyingKey","transferPrivateToPublicProvingKey","transferPrivateToPublicVerifyingKey","transferPublicProvingKey","transferPublicVerifyingKey","transferPublicToPrivateProvingKey","transferPublicToPrivateVerifyingKey","aleoProgramManager","getFunctionKeys","proverUrl","verifierUrl","proofResponse","proofBuffer","verificationResponse","verificationBuffer","fromBytes","validateProgram","programString","fromString","programMatchesOnChain","onlineProgramText","program_url","programResponse","json","onlineProgram","lastLocalProgram","ev","localProgram","aleoFunction","privateKey","startTime","performance","now","from_string","outputs","errorMessage","remoteProgram","fee","feeRecord","getCreditsProgram","executeTransaction","amountCredits","amountRecord","transferTransaction","deployTransaction","splitAmount","splitTransaction","recordOne","recordTwo","joinTransaction","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","loaded","__webpack_modules__","m","queue","d","forEach","fn","r","body","hasAwait","currentDeps","outerResolve","reject","depQueues","Set","promise","rej","deps","map","dep","wrapDeps","getResult","fnQueue","q","add","err","definition","key","o","defineProperty","enumerable","chunkId","keys","reduce","promises","u","hmd","children","prop","hasOwnProperty","toStringTag","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","replace","p","installedChunks","chunkLoadingGlobal","parentChunkLoadingFunction","bind","chunkIds","moreModules","runtime","pop"],"sourceRoot":""}