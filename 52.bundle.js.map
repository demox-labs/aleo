{"version":3,"file":"52.bundle.js","mappings":"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","sources":["webpack://aleo-website/../src/account.ts","webpack://aleo-website/../src/utils.ts","webpack://aleo-website/../src/network-client.ts","webpack://aleo-website/../src/function-key-provider.ts","webpack://aleo-website/../src/record-provider.ts","webpack://aleo-website/../src/managed-worker.ts","webpack://aleo-website/../src/program-manager.ts","webpack://aleo-website/../src/index.ts","webpack://aleo-website/wasm.js","webpack://aleo-website/../js/index.js","webpack://aleo-website/../node_modules/comlink/dist/esm/comlink.mjs"],"sourcesContent":["import {\n  Address,\n  PrivateKey,\n  Signature,\n  ViewKey,\n  PrivateKeyCiphertext,\n  RecordCiphertext,\n} from \"./index\";\n\ninterface AccountParam {\n  privateKey?: string;\n  seed?: Uint8Array;\n}\n\n/**\n * Key Management class. Enables the creation of a new Aleo Account, importation of an existing account from\n * an existing private key or seed, and message signing and verification functionality.\n *\n * An Aleo Account is generated from a randomly generated seed (number) from which an account private key, view key,\n * and a public account address are derived. The private key lies at the root of an Aleo account. It is a highly\n * sensitive secret and should be protected as it allows for creation of Aleo Program executions and arbitrary value\n * transfers. The View Key allows for decryption of a user's activity on the blockchain. The Address is the public\n * address to which other users of Aleo can send Aleo credits and other records to. This class should only be used\n * environments where the safety of the underlying key material can be assured.\n *\n * @example\n * // Create a new account\n * const myRandomAccount = new Account();\n *\n * // Create an account from a randomly generated seed\n * const seed = new Uint8Array([94, 91, 52, 251, 240, 230, 226, 35, 117, 253, 224, 210, 175, 13, 205, 120, 155, 214, 7, 169, 66, 62, 206, 50, 188, 40, 29, 122, 40, 250, 54, 18]);\n * const mySeededAccount = new Account({seed: seed});\n *\n * // Create an account from an existing private key\n * const myExistingAccount = new Account({privateKey: 'myExistingPrivateKey'})\n *\n * // Sign a message\n * const hello_world = Uint8Array.from([104, 101, 108, 108, 111 119, 111, 114, 108, 100])\n * const signature = myRandomAccount.sign(hello_world)\n *\n * // Verify a signature\n * myRandomAccount.verify(hello_world, signature)\n */\nexport class Account {\n  _privateKey: PrivateKey;\n  _viewKey: ViewKey;\n  _address: Address;\n\n  constructor(params: AccountParam = {}) {\n    try {\n      this._privateKey = this.privateKeyFromParams(params);\n    } catch (e) {\n      console.error(\"Wrong parameter\", e);\n      throw new Error(\"Wrong Parameter\");\n    }\n    this._viewKey = ViewKey.from_private_key(this._privateKey);\n    this._address = Address.from_private_key(this._privateKey);\n  }\n\n  /**\n   * Attempts to create an account from a private key ciphertext\n   * @param {PrivateKeyCiphertext | string} ciphertext\n   * @param {string} password\n   * @returns {PrivateKey | Error}\n   *\n   * @example\n   * const ciphertext = PrivateKey.newEncrypted(\"password\");\n   * const account = Account.fromCiphertext(ciphertext, \"password\");\n   */\n  public static fromCiphertext(ciphertext: PrivateKeyCiphertext | string, password: string) {\n    try {\n      ciphertext = (typeof ciphertext === \"string\") ? PrivateKeyCiphertext.fromString(ciphertext) : ciphertext;\n      const _privateKey = PrivateKey.fromPrivateKeyCiphertext(ciphertext, password);\n      return new Account({ privateKey: _privateKey.to_string() });\n    } catch(e) {\n      throw new Error(\"Wrong password or invalid ciphertext\");\n    }\n  }\n\n  private privateKeyFromParams(params: AccountParam) {\n    if (params.seed) {\n      return PrivateKey.from_seed_unchecked(params.seed);\n    }\n    if (params.privateKey) {\n      return PrivateKey.from_string(params.privateKey);\n    }\n    return new PrivateKey();\n  }\n\n  privateKey() {\n    return this._privateKey;\n  }\n\n  viewKey() {\n    return this._viewKey;\n  }\n\n  address() {\n    return this._address;\n  }\n\n  toString() {\n    return this.address().to_string()\n  }\n\n  /**\n   * Encrypt the account's private key with a password\n   * @param {string} ciphertext\n   * @returns {PrivateKeyCiphertext}\n   *\n   * @example\n   * const account = new Account();\n   * const ciphertext = account.encryptAccount(\"password\");\n   */\n  encryptAccount(password: string) {\n    return this._privateKey.toCiphertext(password);\n  }\n\n  /**\n   * Decrypts a Record in ciphertext form into plaintext\n   * @param {string} ciphertext\n   * @returns {Record}\n   *\n   * @example\n   * const account = new Account();\n   * const record = account.decryptRecord(\"record1ciphertext\");\n   */\n  decryptRecord(ciphertext: string) {\n    return this._viewKey.decrypt(ciphertext);\n  }\n\n  /**\n   * Decrypts an array of Records in ciphertext form into plaintext\n   * @param {string[]} ciphertexts\n   * @returns {Record[]}\n   *\n   * @example\n   * const account = new Account();\n   * const record = account.decryptRecords([\"record1ciphertext\", \"record2ciphertext\"]);\n   */\n  decryptRecords(ciphertexts: string[]) {\n    return ciphertexts.map((ciphertext) => this._viewKey.decrypt(ciphertext));\n  }\n\n  /**\n   * Determines whether the account owns a ciphertext record\n   * @param {RecordCipherText | string} ciphertext\n   * @returns {boolean}\n   *\n   * @example\n   * // Create a connection to the Aleo network and an account\n   * const connection = new NodeConnection(\"vm.aleo.org/api\");\n   * const account = Account.fromCiphertext(\"ciphertext\", \"password\");\n   *\n   * // Get a record from the network\n   * const record = connection.getBlock(1234);\n   * const recordCipherText = record.transactions[0].execution.transitions[0].id;\n   *\n   * // Check if the account owns the record\n   * if account.ownsRecord(recordCipherText) {\n   *     // Then one can do something like:\n   *     // Decrypt the record and check if it's spent\n   *     // Store the record in a local database\n   *     // Etc.\n   * }\n   */\n  ownsRecordCiphertext(ciphertext: RecordCiphertext | string) {\n    if (typeof ciphertext === 'string') {\n      try {\n        const ciphertextObject = RecordCiphertext.fromString(ciphertext);\n        return ciphertextObject.isOwner(this._viewKey);\n      }\n      catch (e) {\n        return false;\n      }\n    }\n    else {\n      return ciphertext.isOwner(this._viewKey);\n    }\n  }\n\n  /**\n   * Signs a message with the account's private key.\n   * Returns a Signature.\n   *\n   * @param {Uint8Array} message\n   * @returns {Signature}\n   *\n   * @example\n   * const account = new Account();\n   * const message = Uint8Array.from([104, 101, 108, 108, 111 119, 111, 114, 108, 100])\n   * account.sign(message);\n   */\n  sign(message: Uint8Array) {\n    return this._privateKey.sign(message);\n  }\n\n  /**\n   * Verifies the Signature on a message.\n   *\n   * @param {Uint8Array} message\n   * @param {Signature} signature\n   * @returns {boolean}\n   *\n   * @example\n   * const account = new Account();\n   * const message = Uint8Array.from([104, 101, 108, 108, 111 119, 111, 114, 108, 100])\n   * const signature = account.sign(message);\n   * account.verify(message, signature);\n   */\n  verify(message: Uint8Array, signature: Signature) {\n    return this._address.verify(message, signature);\n  }\n\n}\n","export async function get(url: URL | string) {\n    const response = await fetch(url);\n\n    if (!response.ok) {\n        throw new Error(response.status + \" could not get URL \" + url);\n    }\n\n    return response;\n}\n\n\nexport async function post(url: URL | string, options: RequestInit) {\n    options.method = \"POST\";\n\n    const response = await fetch(url, options);\n\n    if (!response.ok) {\n        throw new Error(response.status + \" could not post URL \" + url);\n    }\n\n    return response;\n}\n","import { get, post } from \"./utils\";\nimport {\n  Account,\n  Block,\n  RecordCiphertext,\n  Program,\n  RecordPlaintext,\n  PrivateKey,\n  WasmTransaction,\n  Transaction,\n  logAndThrow\n} from \"./index\";\n\ntype ProgramImports = { [key: string]: string | Program };\n\n/**\n * Client library that encapsulates REST calls to publicly exposed endpoints of Aleo nodes. The methods provided in this\n * allow users to query public information from the Aleo blockchain and submit transactions to the network.\n *\n * @param {string} host\n * @example\n * // Connection to a local node\n * const localNetworkClient = new AleoNetworkClient(\"http://localhost:3030\");\n *\n * // Connection to a public beacon node\n * const publicnetworkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n */\nclass AleoNetworkClient {\n  host: string;\n  account: Account | undefined;\n\n  constructor(host: string) {\n    this.host = host + \"/testnet3\";\n  }\n\n  /**\n   * Set an account to use in networkClient calls\n   *\n   * @param {Account} account\n   * @example\n   * const account = new Account();\n   * networkClient.setAccount(account);\n   */\n  setAccount(account: Account) {\n    this.account = account;\n  }\n\n  /**\n   * Return the Aleo account used in the networkClient\n   *\n   * @example\n   * const account = networkClient.getAccount();\n   */\n  getAccount(): Account | undefined {\n    return this.account;\n  }\n\n  /**\n   * Set a new host for the networkClient\n   *\n   * @param {string} host The address of a node hosting the Aleo API\n   * @param host\n   */\n  setHost(host: string) {\n    this.host = host + \"/testnet3\";\n  }\n\n  async fetchData<Type>(\n      url = \"/\",\n  ): Promise<Type> {\n    try {\n      const response = await get(this.host + url);\n      return await response.json();\n    } catch (error) {\n      throw new Error(\"Error fetching data.\");\n    }\n  }\n\n  /**\n   * Attempts to find unspent records in the Aleo blockchain for a specified private key\n   * @param {number} startHeight - The height at which to start searching for unspent records\n   * @param {number} endHeight - The height at which to stop searching for unspent records\n   * @param {string | PrivateKey} privateKey - The private key to use to find unspent records\n   * @param {number[]} amounts - The amounts (in microcredits) to search for (eg. [100, 200, 3000])\n   * @param {number} maxMicrocredits - The maximum number of microcredits to search for\n   * @param {string[]} nonces - The nonces of already found records to exclude from the search\n   *\n   * @example\n   * // Find all unspent records\n   * const privateKey = \"[PRIVATE_KEY]\";\n   * const records = networkClient.findUnspentRecords(0, undefined, privateKey);\n   *\n   * // Find specific amounts\n   * const startHeight = 500000;\n   * const amounts = [600000, 1000000];\n   * const records = networkClient.findUnspentRecords(startHeight, undefined, privateKey, amounts);\n   *\n   * // Find specific amounts with a maximum number of cumulative microcredits\n   * const maxMicrocredits = 100000;\n   * const records = networkClient.findUnspentRecords(startHeight, undefined, privateKey, undefined, maxMicrocredits);\n   */\n  async findUnspentRecords(\n      startHeight: number,\n      endHeight: number | undefined,\n      privateKey: string | PrivateKey | undefined,\n      amounts: number[] | undefined,\n      maxMicrocredits?: number | undefined,\n      nonces?: string[] | undefined,\n  ): Promise<Array<RecordPlaintext> | Error> {\n    nonces = nonces || [];\n    // Ensure start height is not negative\n    if (startHeight < 0) {\n      throw new Error(\"Start height must be greater than or equal to 0\");\n    }\n\n    // Initialize search parameters\n    const records = new Array<RecordPlaintext>();\n    let start;\n    let end;\n    let resolvedPrivateKey: PrivateKey;\n    let failures = 0;\n    let totalRecordValue = BigInt(0);\n    let latestHeight: number;\n\n    // Ensure a private key is present to find owned records\n    if (typeof privateKey === \"undefined\") {\n      if (typeof this.account === \"undefined\") {\n        throw new Error(\"Private key must be specified in an argument to findOwnedRecords or set in the AleoNetworkClient\");\n      } else {\n        resolvedPrivateKey = this.account._privateKey;\n      }\n    } else {\n      try {\n        resolvedPrivateKey = privateKey instanceof PrivateKey ? privateKey : PrivateKey.from_string(privateKey);\n      } catch (error) {\n        throw new Error(\"Error parsing private key provided.\");\n      }\n    }\n    const viewKey = resolvedPrivateKey.to_view_key();\n\n    // Get the latest height to ensure the range being searched is valid\n    try {\n      const blockHeight = await this.getLatestHeight();\n      if (typeof blockHeight === \"number\") {\n        latestHeight = blockHeight;\n      } else {\n        throw new Error(\"Error fetching latest block height.\");\n      }\n    } catch (error) {\n      throw new Error(\"Error fetching latest block height.\");\n    }\n\n    // If no end height is specified or is greater than the latest height, set the end height to the latest height\n    if (typeof endHeight === \"number\" && endHeight <= latestHeight) {\n      end = endHeight\n    } else {\n      end = latestHeight;\n    }\n\n    // If the starting is greater than the ending height, return an error\n    if (startHeight > end) {\n      throw new Error(\"Start height must be less than or equal to end height.\");\n    }\n\n    // Iterate through blocks in reverse order in chunks of 50\n    while (end > startHeight) {\n      start = end - 50;\n      if (start < startHeight) {\n        start = startHeight;\n      }\n      try {\n        // Get 50 blocks (or the difference between the start and end if less than 50)\n        const blocks = await this.getBlockRange(start, end);\n        end = start;\n        if (!(blocks instanceof Error)) {\n          // Iterate through blocks to find unspent records\n          for (let i = 0; i < blocks.length; i++) {\n            const block = blocks[i];\n            const transactions = block.transactions;\n            if (!(typeof transactions === \"undefined\")) {\n              for (let j = 0; j < transactions.length; j++) {\n                const confirmedTransaction = transactions[j];\n                // Search for unspent records in execute transactions of credits.aleo\n                if (confirmedTransaction.type == \"execute\") {\n                  const transaction = confirmedTransaction.transaction;\n                  if (transaction.execution && !(typeof transaction.execution.transitions == \"undefined\")) {\n                    for (let k = 0; k < transaction.execution.transitions.length; k++) {\n                      const transition = transaction.execution.transitions[k];\n                      // Only search for unspent records in credits.aleo (for now)\n                      if (transition.program !== \"credits.aleo\") {\n                        continue;\n                      }\n                      if (!(typeof transition.outputs == \"undefined\")) {\n                        for (let l = 0; l < transition.outputs.length; l++) {\n                          const output = transition.outputs[l];\n                          if (output.type === \"record\") {\n                            try {\n                              // Create a wasm record ciphertext object from the found output\n                              const record = RecordCiphertext.fromString(output.value);\n                              // Determine if the record is owned by the specified view key\n                              if (record.isOwner(viewKey)) {\n                                // Decrypt the record and get the serial number\n                                const recordPlaintext = record.decrypt(viewKey);\n\n                                // If the record has already been found, skip it\n                                const nonce = recordPlaintext.nonce();\n                                if (nonces.includes(nonce)) {\n                                  continue;\n                                }\n\n                                // Otherwise record the nonce that has been found\n                                const serialNumber = recordPlaintext.serialNumberString(resolvedPrivateKey, \"credits.aleo\", \"credits\");\n                                // Attempt to see if the serial number is spent\n                                try {\n                                  await this.getTransitionId(serialNumber);\n                                } catch (error) {\n                                  // If it's not found, add it to the list of unspent records\n                                  if (!amounts) {\n                                    records.push(recordPlaintext);\n                                    // If the user specified a maximum number of microcredits, check if the search has found enough\n                                    if (typeof maxMicrocredits === \"number\") {\n                                      totalRecordValue += recordPlaintext.microcredits();\n                                      // Exit if the search has found the amount specified\n                                      if (totalRecordValue >= BigInt(maxMicrocredits)) {\n                                        return records;\n                                      }\n                                    }\n                                  }\n                                  // If the user specified a list of amounts, check if the search has found them\n                                  if (!(typeof amounts === \"undefined\") && amounts.length > 0) {\n                                    let amounts_found = 0;\n                                    if (recordPlaintext.microcredits() > amounts[amounts_found]) {\n                                        amounts_found += 1;\n                                        records.push(recordPlaintext);\n                                        // If the user specified a maximum number of microcredits, check if the search has found enough\n                                        if (typeof maxMicrocredits === \"number\") {\n                                          totalRecordValue += recordPlaintext.microcredits();\n                                          // Exit if the search has found the amount specified\n                                          if (totalRecordValue >= BigInt(maxMicrocredits)) {\n                                            return records;\n                                          }\n                                        }\n                                        if (records.length >= amounts.length) {\n                                          return records;\n                                        }\n                                    }\n                                  }\n                                }\n                              }\n                            } catch (error) {\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      } catch (error) {\n        // If there is an error fetching blocks, log it and keep searching\n        console.warn(\"Error fetching blocks in range: \" + start.toString() + \"-\" + end.toString());\n        console.warn(\"Error: \", error);\n        failures += 1;\n        if (failures > 10) {\n          console.warn(\"10 failures fetching records reached. Returning records fetched so far\");\n          return records;\n        }\n      }\n    }\n    return records;\n  }\n\n  /**\n   * Returns the contents of the block at the specified block height\n   *\n   * @param {number} height\n   * @example\n   * const block = networkClient.getBlock(1234);\n   */\n  async getBlock(height: number): Promise<Block | Error> {\n    try {\n      const block = await this.fetchData<Block>(\"/block/\" + height);\n      return block;\n    } catch (error) {\n      throw new Error(\"Error fetching block.\");\n    }\n  }\n\n  /**\n   * Returns a range of blocks between the specified block heights\n   *\n   * @param {number} start\n   * @param {number} end\n   * @example\n   * const blockRange = networkClient.getBlockRange(2050, 2100);\n   */\n  async getBlockRange(start: number, end: number): Promise<Array<Block> | Error> {\n    try {\n      return await this.fetchData<Array<Block>>(\"/blocks?start=\" + start + \"&end=\" + end);\n    } catch (error) {\n      const errorMessage = \"Error fetching blocks between \" + start + \" and \" + end + \".\"\n      throw new Error(errorMessage);\n    }\n  }\n\n  /**\n   * Returns the deployment transaction id associated with the specified program\n   *\n   * @param {Program | string} program\n   * @returns {Transaction | Error}\n   */\n  async getDeploymentTransactionIDForProgram(program: Program | string): Promise<string | Error> {\n    if (program instanceof Program) {\n      program = program.toString();\n    }\n    try {\n      const id = await this.fetchData<string>(\"/find/transactionID/deployment/\" + program);\n      return id.replace(\"\\\"\", \"\")\n    } catch (error) {\n      throw new Error(\"Error fetching deployment transaction for program.\");\n    }\n  }\n\n  /**\n   * Returns the deployment transaction associated with a specified program\n   *\n   * @param {Program | string} program\n   * @returns {Transaction | Error}\n   */\n  async getDeploymentTransactionForProgram(program: Program | string): Promise<Transaction | Error> {\n    try {\n      const transaction_id = <string>await this.getDeploymentTransactionIDForProgram(program);\n      return <Transaction>await this.getTransaction(transaction_id);\n    } catch (error) {\n      throw new Error(\"Error fetching deployment transaction for program.\");\n    }\n  }\n\n  /**\n   * Returns the contents of the latest block\n   *\n   * @example\n   * const latestHeight = networkClient.getLatestBlock();\n   */\n  async getLatestBlock(): Promise<Block | Error> {\n    try {\n      return await this.fetchData<Block>(\"/latest/block\") as Block;\n    } catch (error) {\n      throw new Error(\"Error fetching latest block.\");\n    }\n  }\n\n  /**\n   * Returns the latest committee\n   *\n   * @returns {Promise<object>} A javascript object containing the latest committee\n   */\n  async getLatestCommittee(): Promise<object | Error> {\n    try {\n      return await this.fetchData<object>(\"/committee/latest\");\n    } catch (error) {\n      throw new Error(\"Error fetching latest block.\");\n    }\n  }\n\n  /**\n   * Returns the latest block height\n   *\n   * @example\n   * const latestHeight = networkClient.getLatestHeight();\n   */\n  async getLatestHeight(): Promise<number | Error> {\n    try {\n      return await this.fetchData<number>(\"/latest/height\");\n    } catch (error) {\n      throw new Error(\"Error fetching latest height.\");\n    }\n  }\n\n  /**\n   * Returns the source code of a program given a program ID\n   *\n   * @param {string} programId The program ID of a program deployed to the Aleo Network\n   * @return {Promise<string>} Source code of the program\n   *\n   * @example\n   * const program = networkClient.getProgram(\"hello_hello.aleo\");\n   * const expectedSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   * assert.equal(program, expectedSource);\n   */\n  async getProgram(programId: string): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/program/\" + programId)\n    } catch (error) {\n      throw new Error(\"Error fetching program\");\n    }\n  }\n\n  /**\n   * Returns a program object from a program ID or program source code\n   *\n   * @param {string} inputProgram The program ID or program source code of a program deployed to the Aleo Network\n   * @return {Promise<Program | Error>} Source code of the program\n   *\n   * @example\n   * const programID = \"hello_hello.aleo\";\n   * const programSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   *\n   * // Get program object from program ID or program source code\n   * const programObjectFromID = await networkClient.getProgramObject(programID);\n   * const programObjectFromSource = await networkClient.getProgramObject(programSource);\n   *\n   * // Both program objects should be equal\n   * assert.equal(programObjectFromID.to_string(), programObjectFromSource.to_string());\n   */\n  async getProgramObject(inputProgram: string): Promise<Program | Error> {\n    try {\n      return Program.fromString(inputProgram);\n    } catch (error) {\n      try {\n        return Program.fromString(<string>(await this.getProgram(inputProgram)));\n      } catch (error) {\n        throw new Error(`${inputProgram} is neither a program name or a valid program`);\n      }\n    }\n  }\n\n  /**\n   *  Returns an object containing the source code of a program and the source code of all programs it imports\n   *\n   * @param {Program | string} inputProgram The program ID or program source code of a program deployed to the Aleo Network\n   * @returns {Promise<ProgramImports>} Object of the form { \"program_id\": \"program_source\", .. } containing program id & source code for all program imports\n   *\n   * @example\n   * const double_test_source = \"import multiply_test.aleo;\\n\\nprogram double_test.aleo;\\n\\nfunction double_it:\\n    input r0 as u32.private;\\n    call multiply_test.aleo/multiply 2u32 r0 into r1;\\n    output r1 as u32.private;\\n\"\n   * const double_test = Program.fromString(double_test_source);\n   * const expectedImports = {\n   *     \"multiply_test.aleo\": \"program multiply_test.aleo;\\n\\nfunction multiply:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    mul r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   * }\n   *\n   * // Imports can be fetched using the program ID, source code, or program object\n   * let programImports = await networkClient.getProgramImports(\"double_test.aleo\");\n   * assert.deepStrictEqual(programImports, expectedImports);\n   *\n   * // Using the program source code\n   * programImports = await networkClient.getProgramImports(double_test_source);\n   * assert.deepStrictEqual(programImports, expectedImports);\n   *\n   * // Using the program object\n   * programImports = await networkClient.getProgramImports(double_test);\n   * assert.deepStrictEqual(programImports, expectedImports);\n   */\n  async getProgramImports(inputProgram: Program | string): Promise<ProgramImports | Error> {\n    try {\n      const imports: ProgramImports = {};\n\n      // Get the program object or fail if the program is not valid or does not exist\n      const program = inputProgram instanceof Program ? inputProgram : <Program>(await this.getProgramObject(inputProgram));\n\n      // Get the list of programs that the program imports\n      const importList = program.getImports();\n\n      // Recursively get any imports that the imported programs have in a depth first search order\n      for (let i = 0; i < importList.length; i++) {\n        const import_id = importList[i];\n        if (!imports.hasOwnProperty(import_id)) {\n          const programSource = <string>await this.getProgram(import_id);\n          const nestedImports = <ProgramImports>await this.getProgramImports(import_id);\n          for (const key in nestedImports) {\n            if (!imports.hasOwnProperty(key)) {\n              imports[key] = nestedImports[key];\n            }\n          }\n          imports[import_id] = programSource;\n        }\n      }\n      return imports;\n    } catch (error) {\n      throw logAndThrow(\"Error fetching program imports: \" + error)\n    }\n  }\n\n  /**\n   * Get a list of the program names that a program imports\n   *\n   * @param {Program | string} inputProgram - The program id or program source code to get the imports of\n   * @returns {string[]} - The list of program names that the program imports\n   *\n   * @example\n   * const programImportsNames = networkClient.getProgramImports(\"double_test.aleo\");\n   * const expectedImportsNames = [\"multiply_test.aleo\"];\n   * assert.deepStrictEqual(programImportsNames, expectedImportsNames);\n   */\n  async getProgramImportNames(inputProgram: Program | string): Promise<string[] | Error> {\n    try {\n      const program = inputProgram instanceof Program ? inputProgram : <Program>(await this.getProgramObject(inputProgram));\n      return program.getImports();\n    } catch (error) {\n      throw new Error(\"Error fetching program imports with error: \" + error);\n    }\n  }\n\n  /**\n   * Returns the names of the mappings of a program\n   *\n   * @param {string} programId - The program ID to get the mappings of (e.g. \"credits.aleo\")\n   * @example\n   * const mappings = networkClient.getProgramMappingNames(\"credits.aleo\");\n   * const expectedMappings = [\"account\"];\n   * assert.deepStrictEqual(mappings, expectedMappings);\n   */\n  async getProgramMappingNames(programId: string): Promise<Array<string> | Error> {\n    try {\n      return await this.fetchData<Array<string>>(\"/program/\" + programId + \"/mappings\")\n    } catch (error) {\n      throw new Error(\"Error fetching program mappings - ensure the program exists on chain before trying again\");\n    }\n  }\n\n  /**\n   * Returns the value of a program's mapping for a specific key\n   *\n   * @param {string} programId - The program ID to get the mapping value of (e.g. \"credits.aleo\")\n   * @param {string} mappingName - The name of the mapping to get the value of (e.g. \"account\")\n   * @param {string} key - The key of the mapping to get the value of (e.g. \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\")\n   * @return {Promise<string>} String representation of the value of the mapping\n   *\n   * @example\n   * // Get public balance of an account\n   * const mappingValue = networkClient.getMappingValue(\"credits.aleo\", \"account\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\");\n   * const expectedValue = \"0u64\";\n   * assert.equal(mappingValue, expectedValue);\n   */\n  async getProgramMappingValue(programId: string, mappingName: string, key: string): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/program/\" + programId + \"/mapping/\" + mappingName + \"/\" + key)\n    } catch (error) {\n      throw new Error(\"Error fetching mapping value - ensure the mapping exists and the key is correct\");\n    }\n  }\n\n  /**\n   * Returns the latest state/merkle root of the Aleo blockchain\n   *\n   * @example\n   * const stateRoot = networkClient.getStateRoot();\n   */\n  async getStateRoot(): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/latest/stateRoot\");\n    } catch (error) {\n      throw new Error(\"Error fetching Aleo state root\");\n    }\n  }\n\n  /**\n   * Returns a transaction by its unique identifier\n   *\n   * @param {string} id\n   * @example\n   * const transaction = networkClient.getTransaction(\"at1handz9xjrqeynjrr0xay4pcsgtnczdksz3e584vfsgaz0dh0lyxq43a4wj\");\n   */\n  async getTransaction(id: string): Promise<Transaction | Error> {\n    try {\n      return await this.fetchData<Transaction>(\"/transaction/\" + id);\n    } catch (error) {\n      throw new Error(\"Error fetching transaction.\");\n    }\n\n  }\n\n  /**\n   * Returns the transactions present at the specified block height\n   *\n   * @param {number} height\n   * @example\n   * const transactions = networkClient.getTransactions(654);\n   */\n  async getTransactions(height: number): Promise<Array<Transaction> | Error> {\n    try {\n      return await this.fetchData<Array<Transaction>>(\"/block/\" + height.toString() + \"/transactions\");\n    } catch (error) {\n      throw new Error(\"Error fetching transactions.\");\n    }\n  }\n\n  /**\n   * Returns the transactions in the memory pool.\n   *\n   * @example\n   * const transactions = networkClient.getTransactionsInMempool();\n   */\n  async getTransactionsInMempool(): Promise<Array<Transaction> | Error> {\n    try {\n      return await this.fetchData<Array<Transaction>>(\"/memoryPool/transactions\");\n    } catch (error) {\n      throw new Error(\"Error fetching transactions from mempool.\");\n    }\n  }\n\n  /**\n   * Returns the transition ID of the transition corresponding to the ID of the input or output.\n   * @param {string} inputOrOutputID - ID of the input or output.\n   *\n   * @example\n   * const transitionId = networkClient.getTransitionId(\"2429232855236830926144356377868449890830704336664550203176918782554219952323field\");\n   */\n  async getTransitionId(inputOrOutputID: string): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/find/transitionID/\" + inputOrOutputID);\n    } catch (error) {\n      throw new Error(\"Error fetching transition ID.\");\n    }\n  }\n\n  /**\n   * Submit an execute or deployment transaction to the Aleo network\n   *\n   * @param {WasmTransaction | string} transaction  - The transaction to submit to the network\n   * @returns {string | Error} - The transaction id of the submitted transaction or the resulting error\n   */\n  async submitTransaction(transaction: WasmTransaction | string): Promise<string | Error> {\n    const transaction_string = transaction instanceof WasmTransaction ? transaction.toString() : transaction;\n    try {\n      const response = await post(this.host + \"/transaction/broadcast\", {\n        body: transaction_string,\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      try {\n        return await response.json();\n\n      } catch (error) {\n        throw new Error(`Error posting transaction. Aleo network response: ${(error as Error).message}`);\n      }\n    } catch (error) {\n      throw new Error(`Error posting transaction: No response received: ${(error as Error).message}`);\n    }\n  }\n}\n\nexport { AleoNetworkClient, ProgramImports }\n","import { ProvingKey, VerifyingKey, CREDITS_PROGRAM_KEYS, KEY_STORE, PRIVATE_TRANSFER, PRIVATE_TO_PUBLIC_TRANSFER, PUBLIC_TRANSFER, PUBLIC_TO_PRIVATE_TRANSFER} from \"./index\";\nimport { get } from \"./utils\";\n\ntype FunctionKeyPair = [ProvingKey, VerifyingKey];\ntype CachedKeyPair = [Uint8Array, Uint8Array];\ntype AleoKeyProviderInitParams = {\n    proverUri?: string;\n    verifierUri?: string;\n    cacheKey?: string;\n};\n\n/**\n * Interface for record search parameters. This allows for arbitrary search parameters to be passed to record provider\n * implementations.\n */\ninterface KeySearchParams {\n    [key: string]: any; // This allows for arbitrary keys with any type values\n}\n\n/**\n * AleoKeyProviderParams search parameter for the AleoKeyProvider. It allows for the specification of a proverUri and\n * verifierUri to fetch keys via HTTP from a remote resource as well as a unique cacheKey to store the keys in memory.\n */\nclass AleoKeyProviderParams implements KeySearchParams {\n    proverUri: string | undefined;\n    verifierUri: string | undefined;\n    cacheKey: string | undefined;\n\n    /**\n     * Create a new AleoKeyProviderParams object which implements the KeySearchParams interface. Users can optionally\n     * specify a url for the proverUri & verifierUri to fetch keys via HTTP from a remote resource as well as a unique\n     * cacheKey to store the keys in memory for future use. If no proverUri or verifierUri is specified, a cachekey must\n     * be provided.\n     *\n     * @param { AleoKeyProviderInitParams } params - Optional search parameters\n     */\n    constructor(params: {proverUri?: string, verifierUri?: string, cacheKey?: string}) {\n        this.proverUri = params.proverUri;\n        this.verifierUri = params.verifierUri;\n        this.cacheKey = params.cacheKey;\n    }\n}\n\n/**\n * KeyProvider interface. Enables the retrieval of public proving and verifying keys for Aleo Programs.\n */\ninterface FunctionKeyProvider {\n    /**\n     * Get arbitrary function keys from a provider\n     *\n     * @param {KeySearchParams | undefined} params - Optional search parameters for the key provider\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a search object which implements the KeySearchParams interface\n     * class IndexDbSearch implements KeySearchParams {\n     *     db: string\n     *     keyId: string\n     *     constructor(params: {db: string, keyId: string}) {\n     *         this.db = params.db;\n     *         this.keyId = params.keyId;\n     *     }\n     * }\n     *\n     * // Create a new object which implements the KeyProvider interface\n     * class IndexDbKeyProvider implements FunctionKeyProvider {\n     *     async functionKeys(params: KeySearchParams): Promise<FunctionKeyPair | Error> {\n     *         return new Promise((resolve, reject) => {\n     *             const request = indexedDB.open(params.db, 1);\n     *\n     *             request.onupgradeneeded = function(e) {\n     *                 const db = e.target.result;\n     *                 if (!db.objectStoreNames.contains('keys')) {\n     *                     db.createObjectStore('keys', { keyPath: 'id' });\n     *                 }\n     *             };\n     *\n     *             request.onsuccess = function(e) {\n     *                 const db = e.target.result;\n     *                 const transaction = db.transaction([\"keys\"], \"readonly\");\n     *                 const store = transaction.objectStore(\"keys\");\n     *                 const request = store.get(params.keyId);\n     *                 request.onsuccess = function(e) {\n     *                     if (request.result) {\n     *                         resolve(request.result as FunctionKeyPair);\n     *                     } else {\n     *                         reject(new Error(\"Key not found\"));\n     *                     }\n     *                 };\n     *                 request.onerror = function(e) { reject(new Error(\"Error fetching key\")); };\n     *             };\n     *\n     *             request.onerror = function(e) { reject(new Error(\"Error opening database\")); };\n     *         });\n     *     }\n     *\n     *     // implement the other methods...\n     * }\n     *\n     *\n     * const keyProvider = new AleoKeyProvider();\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const searchParams = new IndexDbSearch({db: \"keys\", keyId: \"credits.aleo:transferPrivate\"});\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(searchParams);\n     */\n    functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get keys for a variant of the transfer function from the credits.aleo program\n     *\n     * @param {string} visibility Visibility of the transfer function (private, public, privateToPublic, publicToPrivate)\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified transfer function\n     *\n     * @example\n     * // Create a new object which implements the KeyProvider interface\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    transferKeys(visibility: string): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get join function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    joinKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get split function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    splitKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get fee_private function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    feePrivateKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get fee_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    feePublicKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair): void;\n}\n\n/**\n * AleoKeyProvider class. Implements the KeyProvider interface. Enables the retrieval of Aleo program proving and\n * verifying keys for the credits.aleo program over http from official Aleo sources and storing and retrieving function\n * keys from a local memory cache.\n */\nclass AleoKeyProvider implements FunctionKeyProvider {\n    cache: Map<string, CachedKeyPair>;\n    cacheOption: boolean;\n    keyUris: string;\n\n    async fetchBytes(\n        url = \"/\",\n    ): Promise<Uint8Array> {\n        try {\n            const response = await get(url);\n            const data = await response.arrayBuffer();\n            return new Uint8Array(data);\n        } catch (error) {\n            throw new Error(\"Error fetching data.\" + error);\n        }\n    }\n\n    constructor() {\n        this.keyUris = KEY_STORE;\n        this.cache = new Map<string, CachedKeyPair>();\n        this.cacheOption = false;\n    }\n\n    /**\n     * Use local memory to store keys\n     *\n     * @param {boolean} useCache whether to store keys in local memory\n     */\n    useCache(useCache: boolean) {\n        this.cacheOption = useCache;\n    }\n\n    /**\n     * Clear the key cache\n     */\n    clearCache() {\n        this.cache.clear();\n    }\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair) {\n        const [provingKey, verifyingKey] = keys;\n        this.cache.set(keyId, [provingKey.toBytes(), verifyingKey.toBytes()]);\n    }\n\n    /**\n     * Determine if a keyId exists in the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair\n     * @returns {boolean} true if the keyId exists in the cache, false otherwise\n     */\n    containsKeys(keyId: string): boolean {\n        return this.cache.has(keyId)\n    }\n\n    /**\n     * Delete a set of keys from the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair to delete from memory\n     * @returns {boolean} true if the keyId exists in the cache and was deleted, false if the key did not exist\n     */\n    deleteKeys(keyId: string): boolean {\n        return this.cache.delete(keyId)\n    }\n\n    /**\n     * Get a set of keys from the cache\n     * @param keyId keyId of a proving and verifying key pair\n     *\n     * @returns {FunctionKeyPair | Error} Proving and verifying keys for the specified program\n     */\n    getKeys(keyId: string): FunctionKeyPair | Error {\n        console.debug(`Checking if key exists in cache. KeyId: ${keyId}`)\n        if (this.cache.has(keyId)) {\n            const [provingKeyBytes, verifyingKeyBytes] = <CachedKeyPair>this.cache.get(keyId);\n            return [ProvingKey.fromBytes(provingKeyBytes), VerifyingKey.fromBytes(verifyingKeyBytes)];\n        } else {\n            return new Error(\"Key not found in cache.\");\n        }\n    }\n\n    /**\n     * Get arbitrary function keys from a provider\n     *\n     * @param {KeySearchParams} params parameters for the key search in form of: {proverUri: string, verifierUri: string, cacheKey: string}\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new object which implements the KeyProvider interface\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     * const AleoProviderParams = new AleoProviderParams(\"https://testnet3.parameters.aleo.org/transfer_private.\");\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually using the key provider\n     * const keySearchParams = { \"cacheKey\": \"myProgram:myFunction\" };\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(keySearchParams);\n     */\n    async functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair | Error> {\n        if (params) {\n            let proverUrl;\n            let verifierUrl;\n            let cacheKey;\n            if (\"proverUri\" in params && typeof params[\"proverUri\"] == \"string\") {\n                proverUrl = params[\"proverUri\"];\n            }\n\n            if (\"verifierUri\" in params && typeof params[\"verifierUri\"] == \"string\") {\n                verifierUrl = params[\"verifierUri\"];\n            }\n\n            if (\"cacheKey\" in params && typeof params[\"cacheKey\"] == \"string\") {\n                cacheKey = params[\"cacheKey\"];\n            }\n\n            if (proverUrl && verifierUrl) {\n                return await this.fetchKeys(proverUrl, verifierUrl, cacheKey);\n            }\n\n            if (cacheKey) {\n                return this.getKeys(cacheKey);\n            }\n        }\n        throw Error(\"Invalid parameters provided, must provide either a cacheKey and/or a proverUrl and a verifierUrl\");\n    }\n\n    /**\n     * Returns the proving and verifying keys for a specified program from a specified url.\n     *\n     * @param {string} verifierUrl Url of the proving key\n     * @param {string} proverUrl Url the verifying key\n     * @param {string} cacheKey Key to store the keys in the cache\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new AleoKeyProvider object\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.fetchKeys(\"https://testnet3.parameters.aleo.org/transfer_private.prover.2a9a6f2\", \"https://testnet3.parameters.aleo.org/transfer_private.verifier.3a59762\");\n     */\n    async fetchKeys(proverUrl: string, verifierUrl: string, cacheKey?: string): Promise<FunctionKeyPair | Error> {\n        try {\n            // If cache is enabled, check if the keys have already been fetched and return them if they have\n            if (this.cacheOption) {\n                if (!cacheKey) {\n                    cacheKey = proverUrl;\n                }\n                const value = this.cache.get(cacheKey);\n                if (typeof value !== \"undefined\") {\n                    return [ProvingKey.fromBytes(value[0]), VerifyingKey.fromBytes(value[1])];\n                } else {\n                    console.debug(\"Fetching proving keys from url \" + proverUrl);\n                    const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl))\n                    console.debug(\"Fetching verifying keys \" + verifierUrl);\n                    const verifyingKey = <VerifyingKey>(await this.getVerifyingKey(verifierUrl));\n                    this.cache.set(cacheKey, [provingKey.toBytes(), verifyingKey.toBytes()]);\n                    return [provingKey, verifyingKey];\n                }\n            }\n            else {\n                // If cache is disabled, fetch the keys and return them\n                const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl))\n                const verifyingKey = <VerifyingKey>(await this.getVerifyingKey(verifierUrl));\n                return [provingKey, verifyingKey];\n            }\n        } catch (error) {\n            throw new Error(`Error: ${error} fetching fee proving and verifying keys from ${proverUrl} and ${verifierUrl}.`);\n        }\n    }\n\n    /**\n     * Returns the proving and verifying keys for the transfer functions in the credits.aleo program\n     * @param {string} visibility Visibility of the transfer function\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the transfer functions\n     *\n     * @example\n     * // Create a new AleoKeyProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    async transferKeys(visibility: string): Promise<FunctionKeyPair | Error> {\n        if (PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_private.prover, CREDITS_PROGRAM_KEYS.transfer_private.verifier);\n        } else if (PRIVATE_TO_PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_private_to_public.prover, CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifier);\n        } else if (PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_public.prover, CREDITS_PROGRAM_KEYS.transfer_public.verifier);\n        } else if (PUBLIC_TO_PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_public_to_private.prover, CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifier);\n        } else {\n            throw new Error(\"Invalid visibility type\");\n        }\n    }\n\n    /**\n     * Returns the proving and verifying keys for the join function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    async joinKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.join.prover, CREDITS_PROGRAM_KEYS.join.verifier);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the split function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the split function\n     * */\n    async splitKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.split.prover, CREDITS_PROGRAM_KEYS.split.verifier);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the fee_private function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the fee function\n     */\n    async feePrivateKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.fee_private.prover, CREDITS_PROGRAM_KEYS.fee_private.verifier);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the fee_public function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the fee function\n     */\n    async feePublicKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.fee_public.prover, CREDITS_PROGRAM_KEYS.fee_public.verifier);\n    }\n\n    /**\n     * Gets a verifying key. If the verifying key is for a credits.aleo function, get it from the wasm cache otherwise\n     *\n     * @returns {Promise<VerifyingKey | Error>} Verifying key for the function\n     */\n    // attempt to fetch it from the network\n    async getVerifyingKey(verifierUrl: string): Promise<VerifyingKey | Error> {\n        switch (verifierUrl) {\n            case CREDITS_PROGRAM_KEYS.bond_public.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.bond_public.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.claim_unbond_public.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.claim_unbond_public.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.fee_private.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.fee_private.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.fee_public.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.fee_public.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.inclusion.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.inclusion.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.join.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.join.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.split.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.split.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.transfer_private.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.transfer_private.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.transfer_public.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.transfer_public.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.unbond_public.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.unbond_public.verifyingKey);\n            default:\n                return <VerifyingKey>VerifyingKey.fromBytes(await this.fetchBytes(verifierUrl));\n        }\n    }\n}\n\nexport {AleoKeyProvider, AleoKeyProviderParams, AleoKeyProviderInitParams, CachedKeyPair, FunctionKeyPair, FunctionKeyProvider, KeySearchParams}\n","import { logAndThrow, RecordPlaintext } from \"./index\";\nimport { Account } from \"./account\";\nimport { AleoNetworkClient } from \"./network-client\";\n\n/**\n * Interface for record search parameters. This allows for arbitrary search parameters to be passed to record provider\n * implementations.\n */\ninterface RecordSearchParams {\n    [key: string]: any; // This allows for arbitrary keys with any type values\n}\n\n/**\n * Interface for a record provider. A record provider is used to find records for use in deployment and execution\n * transactions on the Aleo Network. A default implementation is provided by the NetworkRecordProvider class. However,\n * a custom implementation can be provided (say if records are synced locally to a database from the network) by\n * implementing this interface.\n */\ninterface RecordProvider {\n    account: Account\n\n    /**\n     * Find a credits.aleo record with a given number of microcredits from the chosen provider\n     *\n     * @param {number} microcredits The number of microcredits to search for\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext | Error>} The record if found, otherwise an error\n     *\n     * @example\n     * // A class implementing record provider can be used to find a record with a given number of microcredits\n     * const record = await recordProvider.findCreditsRecord(5000, true, []);\n     *\n     * // When a record is found but not yet used, its nonce should be added to the nonces array so that it is not\n     * // found again if a subsequent search is performed\n     * const record2 = await recordProvider.findCreditsRecord(5000, true, [record.nonce()]);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     */\n    findCreditsRecord(microcredits: number, unspent: boolean,  nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext | Error>;\n\n    /**\n     * Find a list of credit.aleo records with a given number of microcredits from the chosen provider\n     *\n     * @param {number} microcreditAmounts A list of separate microcredit amounts to search for (e.g. [5000, 100000])\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext[] | Error>} A list of records with a value greater or equal to the amounts specified if such records exist, otherwise an error\n     *\n     * @example\n     * // A class implementing record provider can be used to find a record with a given number of microcredits\n     * const records = await recordProvider.findCreditsRecords([5000, 5000], true, []);\n     *\n     * // When a record is found but not yet used, it's nonce should be added to the nonces array so that it is not\n     * // found again if a subsequent search is performed\n     * const nonces = [];\n     * records.forEach(record => { nonces.push(record.nonce()) });\n     * const records2 = await recordProvider.findCreditsRecord(5000, true, nonces);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     */\n    findCreditsRecords(microcreditAmounts: number[], unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[] | Error>;\n\n    /**\n     * Find an arbitrary record\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext | Error>} The record if found, otherwise an error\n     *\n     * @example\n     * // The RecordSearchParams interface can be used to create parameters for custom record searches which can then\n     * // be passed to the record provider. An example of how this would be done for the credits.aleo program is shown\n     * // below.\n     *\n     * class CustomRecordSearch implements RecordSearchParams {\n     *     startHeight: number;\n     *     endHeight: number;\n     *     amount: number;\n     *     program: string;\n     *     recordName: string;\n     *     constructor(startHeight: number, endHeight: number, credits: number, maxRecords: number, programName: string, recordName: string) {\n     *         this.startHeight = startHeight;\n     *         this.endHeight = endHeight;\n     *         this.amount = amount;\n     *         this.program = programName;\n     *         this.recordName = recordName;\n     *     }\n     * }\n     *\n     * const params = new CustomRecordSearch(0, 100, 5000, \"credits.aleo\", \"credits\");\n     *\n     * const record = await recordProvider.findRecord(true, [], params);\n     */\n    findRecord(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext | Error>;\n\n    /**\n     * Find multiple records from arbitrary programs\n     *\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext | Error>} The record if found, otherwise an error\n     *\n     * // The RecordSearchParams interface can be used to create parameters for custom record searches which can then\n     * // be passed to the record provider. An example of how this would be done for the credits.aleo program is shown\n     * // below.\n     *\n     * class CustomRecordSearch implements RecordSearchParams {\n     *     startHeight: number;\n     *     endHeight: number;\n     *     amount: number;\n     *     maxRecords: number;\n     *     programName: string;\n     *     recordName: string;\n     *     constructor(startHeight: number, endHeight: number, credits: number, maxRecords: number, programName: string, recordName: string) {\n     *         this.startHeight = startHeight;\n     *         this.endHeight = endHeight;\n     *         this.amount = amount;\n     *         this.maxRecords = maxRecords;\n     *         this.programName = programName;\n     *         this.recordName = recordName;\n     *     }\n     * }\n     *\n     * const params = new CustomRecordSearch(0, 100, 5000, 2, \"credits.aleo\", \"credits\");\n     * const records = await recordProvider.findRecord(true, [], params);\n     */\n    findRecords(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[] | Error>;\n}\n\n/**\n * A record provider implementation that uses the official Aleo API to find records for usage in program execution and\n * deployment, wallet functionality, and other use cases.\n */\nclass NetworkRecordProvider implements RecordProvider {\n    account: Account;\n    networkClient: AleoNetworkClient;\n    constructor(account: Account, networkClient: AleoNetworkClient) {\n        this.account = account;\n        this.networkClient = networkClient;\n    }\n\n    /**\n     * Set the account used to search for records\n     *\n     * @param {Account} account The account to use for searching for records\n     */\n    setAccount(account: Account) {\n        this.account = account;\n    }\n\n    /**\n     * Find a list of credit records with a given number of microcredits by via the official Aleo API\n     *\n     * @param {number[]} microcredits The number of microcredits to search for\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext | Error>} The record if found, otherwise an error\n     *\n     * @example\n     * // Create a new NetworkRecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // The record provider can be used to find records with a given number of microcredits\n     * const record = await recordProvider.findCreditsRecord(5000, true, []);\n     *\n     * // When a record is found but not yet used, it's nonce should be added to the nonces parameter so that it is not\n     * // found again if a subsequent search is performed\n     * const records = await recordProvider.findCreditsRecords(5000, true, [record.nonce()]);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * */\n    async findCreditsRecords(microcredits: number[], unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[] | Error> {\n        let startHeight = 0;\n        let endHeight = 0;\n\n        if (searchParameters) {\n            if (\"startHeight\" in searchParameters && typeof searchParameters[\"endHeight\"] == \"number\") {\n                startHeight = searchParameters[\"startHeight\"];\n            }\n\n            if (\"endHeight\" in searchParameters && typeof searchParameters[\"endHeight\"] == \"number\") {\n                endHeight = searchParameters[\"endHeight\"];\n            }\n        }\n\n        // If the end height is not specified, use the current block height\n        if (endHeight == 0) {\n            const end = await this.networkClient.getLatestHeight();\n            if (end instanceof Error) {\n                throw logAndThrow(\"Unable to get current block height from the network\")\n            }\n            endHeight = end;\n        }\n\n        // If the start height is greater than the end height, throw an error\n        if (startHeight >= endHeight) {\n            throw logAndThrow(\"Start height must be less than end height\");\n        }\n\n        return await this.networkClient.findUnspentRecords(startHeight, endHeight, this.account.privateKey(), microcredits, undefined, nonces);\n    }\n\n    /**\n     * Find a credit record with a given number of microcredits by via the official Aleo API\n     *\n     * @param {number} microcredits The number of microcredits to search for\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext | Error>} The record if found, otherwise an error\n     *\n     * @example\n     * // Create a new NetworkRecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // The record provider can be used to find records with a given number of microcredits\n     * const record = await recordProvider.findCreditsRecord(5000, true, []);\n     *\n     * // When a record is found but not yet used, it's nonce should be added to the nonces parameter so that it is not\n     * // found again if a subsequent search is performed\n     * const records = await recordProvider.findCreditsRecords(5000, true, [record.nonce()]);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     */\n    async findCreditsRecord(microcredits: number, unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext | Error> {\n        const records = await this.findCreditsRecords([microcredits], unspent, nonces, searchParameters);\n        if (!(records instanceof Error) && records.length > 0) {\n            return records[0];\n        }\n        console.error(\"Record not found with error:\", records);\n        return new Error(\"Record not found\");\n    }\n\n    /**\n     * Find an arbitrary record. WARNING: This function is not implemented yet and will throw an error.\n     */\n    async findRecord(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext | Error> {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n     * Find multiple arbitrary records. WARNING: This function is not implemented yet and will throw an error.\n     */\n    async findRecords(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[] | Error> {\n        throw new Error(\"Method not implemented.\");\n    }\n\n}\n\n/**\n * BlockHeightSearch is a RecordSearchParams implementation that allows for searching for records within a given\n * block height range.\n *\n * @example\n * // Create a new BlockHeightSearch\n * const params = new BlockHeightSearch(89995, 99995);\n *\n * // Create a new NetworkRecordProvider\n * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n * const keyProvider = new AleoKeyProvider();\n * const recordProvider = new NetworkRecordProvider(account, networkClient);\n *\n * // The record provider can be used to find records with a given number of microcredits and the block height search\n * // can be used to find records within a given block height range\n * const record = await recordProvider.findCreditsRecord(5000, true, [], params);\n *\n */\nclass BlockHeightSearch implements RecordSearchParams {\n    startHeight: number;\n    endHeight: number;\n    constructor(startHeight: number, endHeight: number) {\n        this.startHeight = startHeight;\n        this.endHeight = endHeight;\n    }\n}\n\nexport { BlockHeightSearch, NetworkRecordProvider, RecordProvider, RecordSearchParams};\n","// Experimental example where SDK manages worker\n\nimport { wrap } from \"comlink\";\nimport { WorkerAPI } from './worker';\n\nlet singletonWorker: WorkerAPI | null = null;\n\nconst createAleoWorker = (): WorkerAPI => {\n    if (!singletonWorker) {\n        const worker = new Worker(new URL(\"worker.js\", import.meta.url), {\n            type: \"module\",\n        });\n        singletonWorker = wrap<WorkerAPI>(worker);\n    }\n    return singletonWorker;\n};\n\nexport { createAleoWorker };","import {\n    Account,\n    AleoKeyProvider,\n    AleoNetworkClient,\n    ExecutionResponse,\n    FunctionKeyProvider,\n    FunctionKeyPair,\n    OfflineQuery,\n    KeySearchParams,\n    RecordPlaintext,\n    RecordProvider,\n    RecordSearchParams,\n    PrivateKey,\n    Program,\n    ProgramImports,\n    ProvingKey,\n    VerifyingKey,\n    PRIVATE_TRANSFER_TYPES,\n    VALID_TRANSFER_TYPES,\n    logAndThrow,\n    ProgramManagerBase as WasmProgramManager, verifyFunctionExecution, AleoKeyProviderParams, CREDITS_PROGRAM_KEYS,\n} from \"./index\";\nimport {Execution} from \"@aleohq/wasm/dist/crates/aleo_wasm\";\n\n// TODO put this somewhere where it makes more sense\ninterface ExecutionParams {\n    programName?: string;\n    functionName?: string;\n    fee?: number;\n    privateFee?: boolean;\n    recordSearchParams?: any;\n    keySearchParams?: any;\n    feeRecord?: any;\n    provingKey?: any;\n    verifyingKey?: any;\n    privateKey?: any;\n}\ninterface OfflineParams {\n    offlineQuery?: OfflineQuery\n}\ninterface Options {\n    offlineParams?: OfflineParams;\n    executionParams?: ExecutionParams;\n}\n\n/**\n * The ProgramManager class is used to execute and deploy programs on the Aleo network and create value transfers.\n */\nclass ProgramManager {\n    account: Account | undefined;\n    keyProvider: FunctionKeyProvider;\n    host: string;\n    networkClient: AleoNetworkClient;\n    recordProvider: RecordProvider | undefined;\n\n    /** Create a new instance of the ProgramManager\n     *\n     * @param { string | undefined } host A host uri running the official Aleo API\n     * @param { FunctionKeyProvider | undefined } keyProvider A key provider that implements {@link FunctionKeyProvider} interface\n     * @param { RecordProvider | undefined } recordProvider A record provider that implements {@link RecordProvider} interface\n     */\n    constructor(host?: string | undefined, keyProvider?: FunctionKeyProvider | undefined, recordProvider?: RecordProvider | undefined) {\n        if (!host) {\n            this.host = \"https://api.explorer.aleo.org/v1\";\n            this.networkClient = new AleoNetworkClient(this.host);\n        } else {\n            this.host = host;\n            this.networkClient = new AleoNetworkClient(host);\n        }\n\n        if (!keyProvider) {\n            this.keyProvider = new AleoKeyProvider();\n        } else {\n            this.keyProvider = keyProvider;\n        }\n\n        this.recordProvider = recordProvider;\n    }\n\n    /**\n     * Set the account to use for transaction submission to the Aleo network\n     *\n     * @param {Account} account Account to use for transaction submission\n     */\n    setAccount(account: Account) {\n        this.account = account;\n    }\n\n    /**\n     * Set the key provider that provides the proving and verifying keys for programs\n     *\n     * @param {FunctionKeyProvider} keyProvider\n     */\n    setKeyProvider(keyProvider: FunctionKeyProvider) {\n        this.keyProvider = keyProvider;\n    }\n\n    /**\n     * Set the host peer to use for transaction submission to the Aleo network\n     *\n     * @param host {string} Peer url to use for transaction submission\n     */\n    setHost(host: string) {\n        this.host = host;\n        this.networkClient.setHost(host);\n    }\n\n    /**\n     * Set the record provider that provides records for transactions\n     *\n     * @param {RecordProvider} recordProvider\n     */\n    setRecordProvider(recordProvider: RecordProvider) {\n        this.recordProvider = recordProvider;\n    }\n\n    /**\n     * Deploy an Aleo program to the Aleo network\n     *\n     * @param {string} program Program source code\n     * @param {number} fee Fee to pay for the transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for searching for a record to use\n     * pay the deployment fee\n     * @param {string | RecordPlaintext | undefined} feeRecord Optional Fee record to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @returns {string | Error} The transaction id of the deployed program or a failure message from the network\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for deployments\n     * const program = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     *\n     * // Define a fee in credits\n     * const fee = 1.2;\n     *\n     * // Deploy the program\n     * const tx_id = await programManager.deploy(program, fee);\n     *\n     * // Verify the transaction was successful\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async deploy(\n        program: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        feeRecord?: string | RecordPlaintext,\n        privateKey?: PrivateKey,\n    ): Promise<string | Error> {\n        // Ensure the program is valid and does not exist on the network\n        try {\n            const programObject = Program.fromString(program);\n            let programSource;\n            try {\n                programSource = await this.networkClient.getProgram(programObject.id());\n            } catch (e) {\n                // Program does not exist on the network, deployment can proceed\n                console.log(`Program ${programObject.id()} does not exist on the network, deploying...`);\n            }\n            if (typeof programSource == \"string\") {\n                throw (`Program ${programObject.id()} already exists on the network, please rename your program`);\n            }\n        } catch (e) {\n            throw logAndThrow(`Error validating program: ${e}`);\n        }\n\n        // Get the private key from the account if it is not provided in the parameters\n        let deploymentPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            deploymentPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof deploymentPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n\n        // Resolve the program imports if they exist\n        let imports;\n        try {\n            imports = await this.networkClient.getProgramImports(program);\n        } catch (e) {\n            throw logAndThrow(`Error finding program imports. Network response: '${e}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);\n        }\n\n        // Build a deployment transaction and submit it to the network\n        const tx = await WasmProgramManager.buildDeploymentTransaction(deploymentPrivateKey, program, fee, feeRecord, this.host, imports, feeProvingKey, feeVerifyingKey);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Execute an Aleo program on the Aleo network\n     *\n     * @param {string} programName Program name containing the function to be executed\n     * @param {string} functionName Function name to execute\n     * @param {number} fee Fee to pay for the transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {string[]} inputs Inputs to the function\n     * @param {RecordSearchParams} recordSearchParams Optional parameters for searching for a record to pay the fee for\n     * the execution transaction\n     * @param {KeySearchParams} keySearchParams Optional parameters for finding the matching proving & verifying keys\n     * for the function\n     * @param {string | RecordPlaintext | undefined} feeRecord Optional Fee record to use for the transaction\n     * @param {ProvingKey | undefined} provingKey Optional proving key to use for the transaction\n     * @param {VerifyingKey | undefined} verifyingKey Optional verifying key to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>}\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider using official Aleo record, key, and network providers\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * const keySearchParams = { \"cacheKey\": \"hello_hello:hello\" };\n     * const tx_id = await programManager.execute(programName, \"hello_hello\", 0.020, [\"5u32\", \"5u32\"], undefined, undefined, undefined, keySearchParams);\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async execute(\n        programName: string,\n        functionName: string,\n        fee: number,\n        privateFee: boolean,\n        inputs: string[],\n        recordSearchParams?: RecordSearchParams,\n        keySearchParams?: KeySearchParams,\n        feeRecord?: string | RecordPlaintext,\n        provingKey?: ProvingKey,\n        verifyingKey?: VerifyingKey,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<string | Error> {\n        // Ensure the function exists on the network\n        let program;\n        try {\n            program = <string>(await this.networkClient.getProgram(programName));\n        } catch (e) {\n            throw logAndThrow(`Error finding ${programName}. Network response: '${e}'. Please ensure you're connected to a valid Aleo network the program is deployed to the network.`);\n        }\n\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Get the fee proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = <FunctionKeyPair>await this.keyProvider.functionKeys(keySearchParams);\n            } catch (e) {\n                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)\n            }\n        }\n\n        // Resolve the program imports if they exist\n        let imports;\n        try {\n            imports = await this.networkClient.getProgramImports(programName);\n        } catch (e) {\n            throw logAndThrow(`Error finding program imports. Network response: '${e}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildExecutionTransaction(executionPrivateKey, program, functionName, inputs, fee, feeRecord, this.host, imports, provingKey, verifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Execute an Aleo program in offline mode\n     *\n     * @param {string} program Program source code containing the function to be executed\n     * @param {string} function_name Function name to execute\n     * @param {string[]} inputs Inputs to the function\n     * @param {number} proveExecution Whether to prove the execution of the function and return an execution transcript\n     * that contains the proof.\n     * @param {string[] | undefined} imports Optional imports to the program\n     * @param {KeySearchParams | undefined} keySearchParams Optional parameters for finding the matching proving &\n     * verifying keys for the function\n     * @param {ProvingKey | undefined} provingKey Optional proving key to use for the transaction\n     * @param {VerifyingKey | undefined} verifyingKey Optional verifying key to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>}\n     *\n     * @example\n     * import { Account, Program } from '@aleohq/sdk';\n     *\n     * /// Create the source for the \"helloworld\" program\n     * const program = \"program helloworld.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager();\n     *\n     * /// Create a temporary account for the execution of the program\n     * const account = new Account();\n     * programManager.setAccount(account);\n     *\n     * /// Get the response and ensure that the program executed correctly\n     * const executionResponse = await programManager.executeOffline(program, \"hello\", [\"5u32\", \"5u32\"]);\n     * const result = executionResponse.getOutputs();\n     * assert(result === [\"10u32\"]);\n     */\n    async executeOffline(\n        program: string,\n        function_name: string,\n        inputs: string[],\n        proveExecution: boolean,\n        imports?: ProgramImports,\n        keySearchParams?: KeySearchParams,\n        provingKey?: ProvingKey,\n        verifyingKey?: VerifyingKey,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery,\n    ): Promise<ExecutionResponse> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = <FunctionKeyPair>await this.keyProvider.functionKeys(keySearchParams);\n            } catch (e) {\n                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)\n            }\n        }\n\n        // Run the program offline and return the result\n        console.log(\"Running program offline\")\n        console.log(\"Proving key: \", provingKey);\n        console.log(\"Verifying key: \", verifyingKey);\n        return WasmProgramManager.executeFunctionOffline(executionPrivateKey, program, function_name, inputs, proveExecution, false, imports, provingKey, verifyingKey, this.host, offlineQuery);\n    }\n\n    /**\n     * Join two credits records into a single credits record\n     *\n     * @param {RecordPlaintext | string} recordOne First credits record to join\n     * @param {RecordPlaintext | string} recordTwo Second credits record to join\n     * @param {number} fee Fee in credits pay for the join transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the fee record to use\n     * to pay the fee for the join transaction\n     * @param {RecordPlaintext | string | undefined} feeRecord Fee record to use for the join transaction\n     * @param {PrivateKey | undefined} privateKey Private key to use for the join transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>}\n     */\n    async join(\n        recordOne: RecordPlaintext | string,\n        recordTwo: RecordPlaintext | string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams | undefined,\n        feeRecord?: RecordPlaintext | string | undefined,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery,\n    ): Promise<string | Error> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let joinKeys\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n            joinKeys = <FunctionKeyPair>await this.keyProvider.joinKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [joinProvingKey, joinVerifyingKey] = joinKeys;\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Validate the records provided are valid plaintext records\n        try {\n            recordOne = recordOne instanceof RecordPlaintext ? recordOne : RecordPlaintext.fromString(recordOne);\n            recordTwo = recordTwo instanceof RecordPlaintext ? recordTwo : RecordPlaintext.fromString(recordTwo);\n        } catch (e) {\n            throw logAndThrow('Records provided are not valid. Please ensure they are valid plaintext records.')\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildJoinTransaction(executionPrivateKey, recordOne, recordTwo, fee, feeRecord, this.host, joinProvingKey, joinVerifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Split credits into two new credits records\n     *\n     * @param {number} splitAmount Amount in microcredits to split from the original credits record\n     * @param {RecordPlaintext | string} amountRecord Amount record to use for the split transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the split transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>}\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * const record = \"{  owner: aleo184vuwr5u7u0ha5f5k44067dd2uaqewxx6pe5ltha5pv99wvhfqxqv339h4.private,  microcredits: 45000000u64.private,  _nonce: 4106205762862305308495708971985748592380064201230396559307556388725936304984group.public}\"\n     * const tx_id = await programManager.split(25000000, record);\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async split(splitAmount: number, amountRecord: RecordPlaintext | string, privateKey?: PrivateKey, offlineQuery?: OfflineQuery): Promise<string | Error> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the split keys from the key provider\n        let splitKeys;\n        try {\n            splitKeys = <FunctionKeyPair>await this.keyProvider.splitKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [splitProvingKey, splitVerifyingKey] = splitKeys;\n\n        // Validate the record to be split\n        try {\n            amountRecord = amountRecord instanceof RecordPlaintext ? amountRecord : RecordPlaintext.fromString(amountRecord);\n        } catch (e) {\n            throw logAndThrow(\"Record provided is not valid. Please ensure it is a valid plaintext record.\");\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildSplitTransaction(executionPrivateKey, splitAmount, amountRecord, this.host, splitProvingKey, splitVerifyingKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Pre-synthesize proving and verifying keys for a program\n     *\n     * @param program {string} The program source code to synthesize keys for\n     * @param function_id {string} The function id to synthesize keys for\n     * @param inputs {Array<string>}  Sample inputs to the function\n     * @param privateKey {PrivateKey | undefined} Optional private key to use for the key synthesis\n     *\n     * @returns {Promise<FunctionKeyPair | Error>}\n     */\n    async synthesizeKeys(\n        program: string,\n        function_id: string,\n        inputs: Array<string>,\n        privateKey?: PrivateKey,\n    ): Promise<FunctionKeyPair | Error> {\n        // Resolve the program imports if they exist\n        let imports;\n\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\") {\n            if (typeof this.account !== \"undefined\") {\n                executionPrivateKey = this.account.privateKey();\n            } else {\n                executionPrivateKey = new PrivateKey();\n            }\n        }\n\n        // Attempt to run an offline execution of the program and extract the proving and verifying keys\n        try {\n            imports = await this.networkClient.getProgramImports(program);\n            const keyPair = await WasmProgramManager.synthesizeKeyPair(\n                executionPrivateKey,\n                program,\n                function_id,\n                inputs,\n                imports\n            );\n            return [<VerifyingKey>keyPair.provingKey(), <ProvingKey>keyPair.verifyingKey()];\n        } catch (e) {\n            throw logAndThrow(`Could not synthesize keys - error ${e}. Please ensure the program is valid and the inputs are correct.`);\n        }\n    }\n\n    /**\n     * Transfer credits to another account\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>} The transaction id of the transfer transaction\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * await programManager.initialize();\n     * const tx_id = await programManager.transfer(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"private\", 0.2)\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async transfer(\n        amount: number,\n        recipient: string,\n        transferType: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        amountRecord?: RecordPlaintext | string,\n        feeRecord?: RecordPlaintext | string,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<string | Error> {\n        // Validate the transfer type\n        transferType = <string>validateTransferType(transferType);\n\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let transferKeys\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n            transferKeys = <FunctionKeyPair>await this.keyProvider.transferKeys(transferType);\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [transferProvingKey, transferVerifyingKey] = transferKeys;\n\n        // Get the amount and fee record from the account if it is not provided in the parameters\n        try {\n            // Track the nonces of the records found so no duplicate records are used\n            const nonces: string[] = [];\n            if (requiresAmountRecord(transferType)) {\n                // If the transfer type is private and requires an amount record, get it from the record provider\n                amountRecord = <RecordPlaintext>await this.getCreditsRecord(fee, [], amountRecord, recordSearchParams);\n                nonces.push(amountRecord.nonce());\n            } else {\n                amountRecord = undefined;\n            }\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, nonces, feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildTransferTransaction(executionPrivateKey, amount, recipient, transferType, amountRecord, fee, feeRecord, this.host, transferProvingKey, transferVerifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Bond credits to a staking committee\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.bondPublic(\"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", 2000000);\n     *\n     * @returns string\n     * @param {string} address Address of the validator to bond to, if this address is the same as the signer (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 1,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {number} amount The amount of credits to bond\n     * @param {Options} options Options for the execution\n     */\n    async bondPublic(address: string, amount: number, options: Options = {}) {\n        amount = Math.trunc(amount*1000000);\n\n        const {\n            offlineParams = {},\n            executionParams = {}\n        } = options || {};\n\n        let {\n            programName = \"credits.aleo\",\n            functionName = \"bond_public\",\n            fee = 1,\n            privateFee = false,\n            recordSearchParams,\n            keySearchParams,\n            feeRecord,\n            provingKey,\n            verifyingKey,\n            privateKey\n        } = executionParams;\n\n        if (keySearchParams === undefined) {\n            keySearchParams = new AleoKeyProviderParams(\n                {\n                    proverUri: CREDITS_PROGRAM_KEYS.bond_public.prover,\n                    verifierUri: CREDITS_PROGRAM_KEYS.bond_public.verifier,\n                    cacheKey: \"credits.aleo/bond_public\"\n                });\n        }\n\n        const {\n            offlineQuery,\n        } = offlineParams;\n\n        return await this.execute(programName, functionName, fee, privateFee, [address, `${amount.toString()}u64`], recordSearchParams, keySearchParams, feeRecord, provingKey, verifyingKey, privateKey, offlineQuery);\n    }\n\n    /**\n     * Unbond a specified amount of staked credits\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.unbondPublic(10);\n     *\n     * @returns string\n     * @param {number} amount Amount of credits to unbond. If the address of the executor of this function is an\n     * existing validator, it will subtract this amount of credits from the validator's staked credits. If there are\n     * less than 1,000,000 credits staked pool after the unbond, the validator will be removed from the validator set.\n     * If the address of the executor of this function is not a validator and has credits bonded as a delegator, it will\n     * subtract this amount of credits from the delegator's staked credits. If there are less than 10 credits bonded\n     * after the unbond operation, the delegator will be removed from the validator's staking pool.\n     * @param {Options} options Options for the execution\n     */\n    async unbondPublic(amount: number, options: Options = {}) {\n        amount = Math.trunc(amount*1000000);\n\n        const {\n            offlineParams = {},\n            executionParams = {}\n        } = options || {};\n\n        let {\n            programName = \"credits.aleo\",\n            functionName = \"unbond_public\",\n            fee = 1,\n            privateFee = false,\n            recordSearchParams,\n            keySearchParams,\n            feeRecord,\n            provingKey,\n            verifyingKey,\n            privateKey\n        } = executionParams;\n\n        if (keySearchParams === undefined) {\n            keySearchParams = new AleoKeyProviderParams(\n                {\n                    proverUri: CREDITS_PROGRAM_KEYS.unbond_public.prover,\n                    verifierUri: CREDITS_PROGRAM_KEYS.unbond_public.verifier,\n                    cacheKey: \"credits.aleo/unbond_public\"\n                });\n        }\n\n        const {\n            offlineQuery,\n        } = offlineParams;\n\n        return await this.execute(programName, functionName, fee, privateFee, [`${amount.toString()}u64`], recordSearchParams, keySearchParams, feeRecord, provingKey, verifyingKey, privateKey, offlineQuery);\n    }\n\n    /**\n     * Claim unbonded credits. If credits have been unbonded by the account executing this function, this method will\n     * claim them and add them to the public balance of the account.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.claimUnbondPublic();\n     *\n     * @returns string\n     * @param {Options} options\n     */\n    async claimUnbondPublic(options: Options = {}) {\n        const {\n            offlineParams = {},\n            executionParams = {}\n        } = options || {};\n\n        let {\n            programName = \"credits.aleo\",\n            functionName = \"claim_unbond_public\",\n            fee = 1,\n            privateFee = false,\n            recordSearchParams,\n            keySearchParams,\n            feeRecord,\n            provingKey,\n            verifyingKey,\n            privateKey\n        } = executionParams;\n\n        if (keySearchParams === undefined) {\n            keySearchParams = new AleoKeyProviderParams(\n                {\n                    proverUri: CREDITS_PROGRAM_KEYS.claim_unbond_public.prover,\n                    verifierUri: CREDITS_PROGRAM_KEYS.claim_unbond_public.verifier,\n                    cacheKey: \"credits.aleo/claim_unbond_public\"\n                });\n        }\n\n        const {\n            offlineQuery,\n        } = offlineParams;\n\n        return await this.execute(programName, functionName, fee, privateFee, [], recordSearchParams, keySearchParams, feeRecord, provingKey, verifyingKey, privateKey, offlineQuery);\n    }\n\n\n    /**\n     * Verify a proof of execution from an offline execution\n     *\n     * @param {executionResponse} executionResponse\n     * @returns {boolean} True if the proof is valid, false otherwise\n     */\n    verifyExecution(executionResponse: ExecutionResponse): boolean {\n        try {\n            const execution = <Execution>executionResponse.getExecution();\n            const function_id = executionResponse.getFunctionId();\n            const program = executionResponse.getProgram();\n            const verifyingKey = executionResponse.getVerifyingKey();\n            return verifyFunctionExecution(execution, verifyingKey, program, function_id);\n        } catch(e) {\n            console.warn(\"The execution was not found in the response, cannot verify the execution\");\n            return false;\n        }\n    }\n\n    /**\n     * Create a program object from a program's source code\n     *\n     * @param {string} program Program source code\n     * @returns {Program | Error} The program object\n     */\n    createProgramFromSource(program: string): Program | Error {\n        return Program.fromString(program);\n    }\n\n    /**\n     * Get the credits program object\n     *\n     * @returns {Program} The credits program object\n     */\n    creditsProgram(): Program {\n        return Program.getCreditsProgram();\n    }\n\n    /**\n     * Verify a program is valid\n     *\n     * @param {string} program The program source code\n     */\n    verifyProgram(program: string): boolean {\n        try {\n            <Program>Program.fromString(program);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    // Internal utility function for getting a credits.aleo record\n    async getCreditsRecord(amount: number, nonces: string[], record?: RecordPlaintext | string, params?: RecordSearchParams): Promise<RecordPlaintext | Error> {\n        try {\n            return record instanceof RecordPlaintext ? record : RecordPlaintext.fromString(<string>record);\n        } catch (e) {\n            try {\n                const recordProvider = <RecordProvider>this.recordProvider;\n                return <RecordPlaintext>(await recordProvider.findCreditsRecord(amount, true, nonces, params))\n            } catch (e) {\n                throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n            }\n        }\n    }\n}\n\n// Ensure the transfer type requires an amount record\nfunction requiresAmountRecord(transferType: string): boolean {\n    return PRIVATE_TRANSFER_TYPES.has(transferType);\n}\n\n// Validate the transfer type\nfunction validateTransferType(transferType: string): string | Error {\n    return VALID_TRANSFER_TYPES.has(transferType) ? transferType :\n        logAndThrow(`Invalid transfer type '${transferType}'. Valid transfer types are 'private', 'privateToPublic', 'public', and 'publicToPrivate'.`);\n}\n\nexport { ProgramManager }\n","const KEY_STORE = \"https://testnet3.parameters.aleo.org/\";\n\nconst CREDITS_PROGRAM_KEYS = {\n    bond_public: {\n        prover: KEY_STORE + \"bond_public.prover.ff75d2e\",\n        verifier: \"bond_public.verifier.d3cfe73\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqzl9uqqqqqqqqq9stcqqqqqqqqqxa4sqqqqqqqqqyuwqqqqqqqqqpdyqqqqqqqqqqqvqqqqqqqqqqqx9lfqwmck43wt597p8xn68dh8l9setmmtk0ev35tgzkzm3j0j4tgu2s9kdu5w9m7g4dkglj28wayp2njn9qkuygpmcf9j7qc32aafepe5d9tdqyrq9ju2e8mlhkq8tucdh30rxysfl9h7d9jusmjhjcwgpuh0hhlspvtuv98n453apnqceupv2tc26wwx9mjl7m8j0urgax42xzrc9sltd62pfjgnw7vxh36vqxzajv5tyer6hpld0fr75jah48gaqpnexurtrag0azpcpep4lyxeyt4jytug2u7urfrp8rjh5wlkqqz7htzt8fdnthyngd5eqqfc6q0d6zw8lwlyr3hgqkjmkshmw5trm2tqg7euqav6r2vssqm9ut7ecjqq2fqs3k8mjp769qv5r2q52hcre66ymggtva7ty32lqpnrgrhgsc78g7qc00y5z6m626umkhqmz8sp0s4jz6qrvc6s47sycncq6ryltq2tmfxkz22e0g79cy4dzcnu5rwjkl4x3f27gavm7gug50tqnkwqrrjd430j9n8rrg78lpqfye8drxcnd2lxdry9nza8vfg4v3jmnmcdw55pu4kahfrawe4guvaqx26hqxhesqzxe343fjyz7vajn6prhg0jwzjtjh75v5wtp3h2knnvtshzae2uxel720fxg0vyfvnncsnxdqrqjc8aw8avq9kucsvauju4d0ke989s7v55ha0nh3dvdd9rct56pvg87txnhre3qvwmw6acf6t4x5q2al4gwwpqjhsezx6zmth0qeene0v3prwuh8a56r7qafhnyd98f8lx7xv4v48q7q7fd2373ag4fz5pmslx7v5hmpreqrdyj5h6we0kd24wk80f8sq44exsed3egstrn409cwzs9ph8563nh7vy6pcjnqxqrkzqvsa860spwjjf78hyful7zk2l3e9s4u4l0hqdyt547qxz3xamy5gkmd\",\n    },\n    claim_unbond_public: {\n        prover: KEY_STORE + \"claim_unbond_public.prover.4c492b0\",\n        verifier: \"claim_unbond_public.verifier.3793e4c\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqq8lycqqqqqqqqq02fsqqqqqqqqq849sqqqqqqqqpe26qqqqqqqqqzfnwqqqqqqqqqqvqqqqqqqqqqqgyhv4exh3e2g4f3ek5hymm8ah5h5hdp8v0j52dsksskad9wsryetk3qcr5um8t4nnpnqvhlsk5vcpea7w8uca2pum92jh2has0ag2gq24up0qr7p5z34jzrmtjx2583vkffyywmnatjs5t05x4yyc534cpsutfr4jaxqc9dlmxfw7a5tl4nl9q9qvweaver0q04pfl65w5wuyaadlzjhkkrrjaskg86tmkqy8s8vug7dyjnpe55y5ju8eag63p49ufdyguxdw2fwt46nwer74m3xmv9z6jhgslfwjre4fwctkppytsqrwmlf5szn9ckj2r86sa7azq0ly9atfjeee3f2f3n8s3rkrzezpqmcrt5lv3xlmymgspyj2vn7ytgqj97aula7tuxfrcsk787shhdjyxdvepspp7f4jaxuunzeuw58kdwupfdn8wj89grv5pk5qmxap9xgqxwwf08k98xnkdrp3n4jme0ur5604xp2q9fxlc0aw47vwfcurtsp9nv0rajv4lmune4mx8h39jvkcpv4fnngk3me5d6vds4m5xe6vuqlz55gnzue7fyyt0vzuwsg8f2ztepupry8g32ee48gmj2lldg96qp5xxcjxetgrq8muj4n7w3kv56spy3zhw8xr7ngd4u6l20pk4yvlsamu3y7nr4na246qqnjszlz6jq0922q8dsefkf7cpz8tc0fv4t2uk6y7r8wy5vtmah2y80al3vmc3kma70p4utwf40mc7x33y66zsgq94e09r5mmj5us835tz95w5r8eqz335lz8rac72d4jzxg0c40nmskvl236nz9dysg6uxp80yugx7cqckstk9f79ha0s6k8nftlmqds3za97648k2usw7xnyf9echpy3lsdsaatleyt5w5z2qgqyrxlaxsgq3tytq4qhjrlfz2dz7kuy7dyr0u4q5p78ux8ylh8tcsau46jevm944a798\",\n    },\n    fee_private: {\n        prover: KEY_STORE + \"fee_private.prover.43fab98\",\n        verifier: \"fee_private.verifier.f3dfefc\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqq8rjvqqqqqqqqq00ycqqqqqqqqqusvszqqqqqqqpnf6qyqqqqqqqqcd6qqqqqqqqqqvqqqqqqqqqqq0plfjy36deglp5xr0lk3rccawpqgztrnjusxnlkc8hz6879me8ty8y7rxzc3qqafadrmvz0v2aluqjwezzwkmj3q9vmr0xgk3arehjhppu7scsw6h4nj08z7fswhyq739ypuh67ff0f0sg8787aq4w80gqrn8e5kduw8h002rkjrw907zqxawqu7qmumx5zayg7k55rdzn05eg5sl8swr7fveuhud3gmf9xjsqzd9x9az5ls4s8cwjgc5lmvkhphy67q0g7qwzee7hyavg335j25mllnywrtjcwfejt55qxag7wvggqtmtc3al0gy6q83hql4wagk37e200592az7n525s80c4xwr92jr8dt40t3fyjxzszrc9umk95psswq82kkg25sh25s3mw5z3xt9qy2ftm8ec4a8l8rwfuxfujjrxxnhmrqs4wsunec3ukd4mur4fkj8enqqqv9n37e5fyag7e33rxsyp63u5rfs8hn26slsmdaqzvp2flcz506r0hqncdtt07nhulltlh5wyq4gpxsln5td2v0treu7t8wanhq6yv8hswxla7cf3w8nv4p233gz0ry9n7sj2uduredwtykw2ec3fs8fqrjkz8agg2xj8t9wden6spzdfcl7jlw4rgzv4hjqvh4cw40yhh8udv5g6vd0jhhfmqevezq0zs4x2q2m7u0hq9mkvulj950t9a5tcm6suycdlaky8t568jevkn3tf9uu5laevjumvahk4cxjxam85kq0l5qrycnmdzgvm7hr8cvl8a7qzcmjkwh48krtxtduhcfn7hvt752slm0nvth0yf35jugxg7ah2kw5emcq4mk962eypxyvwahf4k5ql8376l5za4zvv2p7jzgkjjs4lc60nv3czmdmmc0qn5mwnlnaxmwazs3qzfea0z0sn3nflp8v2lwlczljxre975fnvw3vfyrrjze4wuxtkjg7j37fph\",\n    },\n    fee_public: {\n        prover: KEY_STORE + \"fee_public.prover.634f153\",\n        verifier: \"fee_public.verifier.09eeb4f\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqrcxyqqqqqqqqq8yvgqqqqqqqqqndesqqqqqqqqpg56qqqqqqqqqqhyyqqqqqqqqqqvqqqqqqqqqqq9a3p0z8q2qzsgq6lsd3zeh3tvezv0d2wg9tykutk9s7dat8uyamgxv54vv5le5slhta92cs08905qy0mgfdx0r7hzc7ec4qn8wmkx2cvtrwggad5h898kkp20eheukemkhj6g37flhpmxq9hpk9q2kfcsr58ufzupqpgfthzxsrn0554ttqckrgfwjfnvpfqhy4evahxkzahkf85pqt0es3j5jc2kzpkcu4ausrm4k53evjtuy3tzc3jgwl7y5t79j0ddhprs6ls9x0qpvqggvkffjg0psvjrmf2rsw5xrdnmqxlx5qru82dsavaka5kfsvxgyrzdf4tzceghyeqpk55308pkc0sg63sgwt8fywksccjdkkrqkh00kgraeuq97zsydp9z6pagtqmaply94dacmk7qkgg5jt36exjxcjdckjgswc5agg9xd4lqmpxxmtur7d7ecvvpg5rg4mzlf65hlpeynczqwdgrdekx7m3n4ljumgezxyzq7h9wmnrqfawayl5gns8gv2jaucwc9qmcq7pj6kvddw8dgpdf0rh66a6erzj9fmupu8ulc2x64092k5sfdm6rlaktdv8fscn8wlct0p9xahl2qqnxsw3tfzms5xplll4xamrlhtjm2xfsqmx62er2lmmzn6wk8788hcpg7uetlrufwlvmapeh00h9aqql6ggsknvwt45wjmfkky7z5ukly3dpjqvqt3yl839d8flcx6kpf5vqvdm57kqdwjazcmfn4ae87yqg08dlw805prfrfjvlyff3kq09z2yxc0pcaqalj7r4e6lygruk2ezpkfjlslyjtek6rtgvfwavqa5pmp6jgmr8xzu5dk0lcmfgm0plw8jkwt60pz2scpuh78k7f4dlfp7grjpn3xtdphhsn0k8rpfwqq3qr6huef2asc990ragxknla7kdl76xr2g2vl8pnql3f58wgcptked7rgeah8\",\n    },\n    inclusion: {\n        prover: KEY_STORE + \"inclusion.prover.cd85cc5\",\n        verifier: \"inclusion.verifier.e6f3add\",\n        verifyingKey:\n            \"verifier1qyyqqqqqqqqqqqzq7qqsqqqqqqq0huqpqqqqqqqqjvksgqqqqqqqqnypqgqqqqqqqzk8sqcqqqqqqqqvqqqqqqqqqqqxsh33gk03qelqrvy0g5m2km5vfhs6flwsutadvdl3nd82a3xqunx8pgaccs2yh654tpnanywulgvpvfxuma59ufttju8mvnpmuhg720p6fawv4ynhe75vfhn3te00saqpd5kpgxw59gf4r3ng3z0hr49gpwlwgkac7zlqk7cne5xh33m96qep9xeu2nf68dye57yqrnqgtaa2vk3ldcpurjn3s4pavzde8cehsrqn57qm2ewew3t4g6css5qzgfywdkkrx0rmz5u68cxvrwaksjd4s2exerl3u7cae58tc383yzd5tqxk66xqldl3ch8ymq73jhufwfcp4r8vcynmjenzt355a3qnejfndw7v5sn9a63wrd86rczgrp8wsuqsth7346q3qgaddsj6ln92233jjvke2krn809qvt8ev940hfclr5etza54055m8upn5jhg224v27cqamjy5lv3qm5nyc9asy0tqz0xsgmkuyp75t2qgv3h9s4av3u5tpmf8qkf7k7gp8rjlf67uncphscspvlmku59mgn4cqlxqqz3qdsyycs2my3emuyj9vnzt0464rfgnnmxwnw4kkqe50f764fjauj73kqcsxzn5mecv507xnetxvhfkt79r6hfvf6nzl735xtfp4r7uxlns3dazwj9mgl4fayzv0nqprh80ydqtq9tl6ffcmav2mlsky8tdrunewu3z8a2qg5wfhxz4j0xsqzfsr50ts63g0wysvnkt4rd6equa0r6fsqhrsjft0qy4jnstawrmnj28llqfgemj868y6aaw5rjftgp5vezg7r2c4q5zeupt4gghwand0jeyv5qfnxtnzh7wflxh7tdd0q6zh2fy635xhmllux8hk946t3kzenmc0355mz309gfachp2verz2qaepxsrj63nr54uga9eh2xcgp85v90dellhsvyx73m2w2qyed52svs62ysg7e3ag\",\n    },\n    join: {\n        prover: KEY_STORE + \"join.prover.1a76fe8\",\n        verifier: \"join.verifier.4f1701b\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqz2cvqqqqqqqqqx0scqqqqqqqqqc42qzqqqqqqqpvmfqyqqqqqqqquzwqgqqqqqqqqvqqqqqqqqqqqpz6knqjfm77py0mpx68rmc6yavzrjpn3vdn5rmhum6u47fxt3j7auv5mk8epjx0hsa7nfm4llzwqqj84x9cnerm5gach0nzfy0jsvfrylvld5ffe8g63nhw5qng68rs6yrlzrc5229ezc8j4n4y0f2hrqqmdphh3mpglur7evq52n6mx9nls064fpn8wr3vqz75vextjhjmpvcrgs8har5txjnh9tj8lmlusns8nklkw8dh8nc8sv0llh4cgw95l3m7mwugu5nfrrlmyccnmrues4wl0hdfwsq8wvn60y2hl036g3aqzh5cn6n2366fy4hawjn22mj86w2w7twq80pdrea6svl7uq5zyh9nz4qgd72tql95n2xx0zh3wcjyqca5wzv4276exszaunpjduuvjmture49av40ve03akc9qw709wuf9a8hhpwlwwz8acf2z5ngk2d95qzfqhkmllqx4lnupyevkn8zthgu54x55t4cqm7uvmmnu3vtvkmsr4tldemm26shwk8ux27v6lmxkqppuesjj5d3m7x5rsg7yn8cg6hkat6fy8u8zj3n0z26ehqvmq8x2fadtw5jt6pxxfp3cm40ak7x9yqym5qrwjzpr7xwr4t6pjn5ca9g02hnuyvxd9jqpv70a7w05mqatnyzhnfl462xmsehgcwczjkrzz2qxk3wa0elrnvnh9qlz3cc2g8xyag9yrds0jepsvskl55zqtntp6qvkj9nkmlercd95j8g9xdgxv0sq0y6gq32ng5r9zcs4wt3vryhldxtr9epyz5vnnx4mf2lhv4r56mftaugjemxezpjcv9enr259tf7qq66a7ngsc3y0a5jlm8jg2rnd9c38ny2m5egl7ssx62zcscztkmjqpkvta2za4ym5jkatgzd2zspfcrc7gesjxjgcvhsua3jpyzpdan6mestyqsx5eatkmzv9zmpwkur3c34sjzc\",\n    },\n    split: {\n        prover: KEY_STORE + \"split.prover.e6d12b9\",\n        verifier: \"split.verifier.2f9733d\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqpehuqqqqqqqqq930cqqqqqqqqq295qzqqqqqqqqyyyqyqqqqqqqzjjvqgqqqqqqqqvqqqqqqqqqqqyjhdhawnd33kv88ehql385slkd7lyr46jnf7yathmnxnr7at2j6u4nfkkvryujwt8rvhdfpuw94qq8e7sp33sjtyz53q89k85ttcg2cvadvuadeuq5xn4hgkmvm3qj93er0t2pjpd2p4kd3zy2gqmqd5qpfzdk973253ufzafqwd9879c7wpdv500a4xhetxkareamyl2qqzdd5hxl94vnmrkluzx0te32rkusqs20xswldqdgekfh6p25yxjhls20k59lsfn9az8jak9lr6r745ujsq0jq9fvugqyqchuca8xq6stq0svvu7e4xguc84t3s72erg4ve2z3nsr3jqv6jtala9j3xf5msksupprwwxkwwl58pv2hmr4g5h4xqym3nj6ax7ujx70np7egc4nw0w3j02m34eq00gssjq0pf9xfltxtef29crye3sul45kkawnrl6uzvquszlgltwtgx2xjlehgh0xpdm68dyjev9qxsleetpc33mns5jakrmqqryk8qgmnc56dzgcwm99eccq6c93576s946jztmuvgp8522y00jpck54wlcg3me44sk8usehsnjgm85zmypjsf7nlp06na927dtqp7u45jnd3em0n9h0wgtgvwh7lyhq4guwdfxws8mswwzfr5fjdtv0smjeq3r58v03amrhgr2ex4h7q8wapp8h5ug8vh0fxkt6yp3l2mas3l0jmmpedy9vx4lnxmjwn8t4wxyrdnnr54jxmp0wyu3sf6wwkqa6r2g2u9qu5km92fjnckme07mrxghuxh9ktpj9cvaf08sccdtdwjsnkyt9qu2x5ft27tkrskudrqpyr63x640xlk9wqpmy3edx58wxwzesmx22v62y6lshjv3wur83jlmwm74qqpd34ewmrk7eg0jfp7cretx5jwfv5c904v9qazfyluh5fpdczgx9fluayuukfwnqjq8tdwx3shuy5\",\n    },\n    transfer_private: {\n        prover: KEY_STORE + \"transfer_private.prover.2b487c0\",\n        verifier: \"transfer_private.verifier.3a3cbba\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqqvccqqqqqqqqqz43sqqqqqqqqq7jqqzqqqqqqqpj4vqyqqqqqqqq0zuqgqqqqqqqqvqqqqqqqqqqqyvnz4pl9kjr0ks3dtkz67gw8tyqzs3sxskt8xg6keqrrqk9nj3e39kg65lzz5sd5tug2ecrpmfg5peseqmv709nry8up96qwsuvpp8684njpe4qunfhf7ywc0a7lck9rdlfcred8krn60lgztx4wlrlmspnnkwe9gmqk07tt5lj3wxcpucpshz7ec6w5mqvspprmu88lr9tr9e7a9fqdye0jdajq46pt35hdjsruamruf6v73fu68hv5fcsndmfq3c65yjrmljfg3343vj8cca2js2gumrks9eepm3d7g02jw0se9eqpaj86kpscxu4vuvw7jedgt2c0l4fk5zqwdu3vfhrazjwedl5d0n9w75ky0924qjjzg3c04dw7p8uqxqnuph6d3d935zqavxtte336jmnpk0hkjn80cejqfljl7w6jtnl3tedhtdk4cx207c7lud9xagzcp760x47h3hrw68syru4rnr3zgy99wcpnglpjvndzrjpc3z8c53xyqx0jh8cnt6gn92fgqu8a5huespxgnckqgttq8aa7xngxt9f5lpq2zgakfhtfvhlcy66k3depln3x67ck2m9t0fvnetjygj6h2er2fqqwcf2ghjp5fvq4e68635ql0lv5uv4c82575dcv87a0y8745g6gvjenh49zppsekc82dect9ggp3aqxqnc73dmd38pe4x7v9wwv6namfe7337tczyfz47dyxxzy8fslktv47yn8r87n0nap5qlc9gzgd2yq8m6zj0ulzgaqls2dq2atkfzxu5rjguvcjxnmn7hr8uxgxuzrwtmcftz4emn24vpq5pcwxf29a7w5p80e7f2tv7ags5k0pj9fghaklzm5xrakpsk3gv4xzvzqj6u2denjw60q777r5889xqrvchhtac4xspue4mncvgerscq4dslzkt4mg4zuv6t6gahcvnm2p6r02ns62xsdexs8jxt\",\n    },\n    transfer_private_to_public: {\n        prover: KEY_STORE + \"transfer_private_to_public.prover.1ff64cb\",\n        verifier: \"transfer_private_to_public.verifier.d5b60de\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqrwjvqqqqqqqqqgpycqqqqqqqqquvvqzqqqqqqqqceuqyqqqqqqqqyd6qqqqqqqqqqvqqqqqqqqqqqr8z97pzqh2lxcc4tasdu784svuk6lv62sj78flptnzqks3hyu42ymryngdzr2mw6j4nxm4cmx8tgqnfzdkccekds6nhs4c7t2hf84d38jkuufdrf43ls4zm9htqarx9mv3gswcxp74kelgy36yhpsrfkgzdr8vy8580sulvaw36pxjjv0j543rml679z305kt2ju3wzarmsukzkfp56qnc0pjuptzajkes95uspd0uz3fd9fu5vmxwfwq9cj5qh0yjq398h729yygdm0fzkrl9g6faevalks3yc7xl3le38k77t3exqqnn82yyjpunpn763s8hkaguvn67jehqcvt8tvhql8skpesm9tm2hgeryk934h8c8cdcgynjq5cj2qer7kkjc2rrmg5j6agac0ya88up0sl2skxsvkw0rgxlgxjtjqc4g8c3xssq2sk6e2dufvc480rj8vqcrhtqsjqdkzq3nanlvngrjxchnzwfywwjphj5jeza2lyynrk5awz8v6jtwgxu2fs6uqrykz5lz6qpt2dfs670clhjpagxny40nmgeqtf9w8hu4v7yjpgwpv89v05u2ahdryu4538augkjhdx3hvfahwuszd8zyqmcxhrcq039hcrkd5qgadhj257vvrf27dwu64kl0j237efzvt5d360umxw3xk6tej5cxv9zqxqzc7ryqndhttaw5act9kwt8kvxtdjnzy99q8gzmg2429f94h6csrqejzc4n40xjcsdwn98hdekyqzytrh35w6t3r5d86kqt897kv5mldx9w06h4rldk734hvn096gt7e4smleja7canyfpv798cksshgq7hkyt6elvzp3rpj9nd84ykt9lzgjsswn4y8934ay3575u3sx7mkeuca0zsere2q0jmlsl6w6v2qcq424uhnmqn9q5vw22jgy94pry2junps40ug867d79h2zvd0n02nmlz05hd\",\n    },\n    transfer_public: {\n        prover: KEY_STORE + \"transfer_public.prover.a74565e\",\n        verifier: \"transfer_public.verifier.a4c2906\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqq79uqqqqqqqqqp2tcqqqqqqqqqwd4qqqqqqqqqp5ydqqqqqqqqqqvyqqqqqqqqqqqvqqqqqqqqqqqre7drur40rst43dq9at346py7hkmrhexarf59f2tjt4stlsdj5uwrgnrkjjej7jf3djk2w4njtxcq0mezac793craujm8mr7wutcqtu2aday5g03wl0cu2572fsrtpyjhdyqlh0447z7dshlkhksjsusgp4ezrvc0n64fwetfmml3kvfg7n03w2e602sl7et4cpw98hgpzxwzrmzu8r3x77v49njysy2lp55xsqh6t5qjvhyl5a7nzy3e73y7dzvvs9p450u0s8g84prqnrk6jeah89c6882uzqdvxgzcedfmsc43uq99n3ycrjh70ys8n02pyvdvzmu7z608desdd5yw9dc8v3ddrdddmrzz2pupe09yn9esy25cfzmd0wqcgjdxm4dvlt2t6k66lw8e9ccj49qj2ahpht62kh7p56xpvpekenq2arng2t55mwxe59mqpkp6a0yqlwt7tdf98rt3kqlr9tdtq6hua3wrka0mqzhva4nhucxn9u4w92mly69jy2c7cqm5ftnk3m0qxy9spaxwfz0xkqd947yvf2zh8h4y59fltxdpeu4utpv9zw0cr7ad9d462qxyc2f05lezw6dwhcmep942qqv38lp3x9efestt5pk8rplvmrk0zz9zel48l8h9ldfzyd8zyr7knze92cdyanez6k7q5fu6tnw9wqrywjnhevaujz20xn0h3n47g85zs6ejfh7z8jt9qjesqgmdymvcxlceudkdsl49t5r69c4mg7hfwyq88z7zn0efda8fdjmhz8aaq24q34g2ekdzr5w9em3cev2ktxtmupqwltu0nh3fjzm04cy3cgnqlnqq0chzq4rs2dmfjwryxrxxgjtdcsnn9fpwykkxwfuervtznu3lmvhhpdflgwgm0xklu6c0xsxt9dfcp29w2nz6zkjetz7cqremg68eqxq86rn082czp50ldw9qkq6w3p9xxg4hrg\",\n    },\n    transfer_public_to_private: {\n        prover: KEY_STORE + \"transfer_public_to_private.prover.1bcddf9\",\n        verifier: \"transfer_public_to_private.verifier.b094554\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqrhvqqqqqqqqqq8kcqqqqqqqqqqu0xsqqqqqqqqqw0kqqqqqqqqqreg7qqqqqqqqqqvqqqqqqqqqqqta360tn6dhv5z559ejfahwq88lxtd498py5p3vw5u3rwtfvdzpxq7fuqdahsrennq80g8yc6wqjyq8ahdv3jzry0mxceed0jr2cd0wye3e7782pg3phsu8h7hcapfgdghcgg2ykfc2682xefhsp3plqnqp692097k4ja82ecc2descl4d6csug04cz2j9a5pk3djx6xde2ghgq7uqvuhsg47ksueeetvc7mh2qpvqjmph9eekp5waqunkeea9vkvzyl8culmn5t7l9ke3r7uz8v5r8njjdkug6va9vy6axx9aq2kxaqdd9ll2m3j7qg7eyq3k2pnhq7gx2kv8vm3yf5pyqtywt2hvur5uv45y5st53qh970dktd3k709d9sqwv0d6qaksxjcp2cxu282hcewhy66vfs5kp35e6k4shdmjzmglyqqcsnupv8xwdr3596qypzshnuuq8rpm8pyjwtws63wsazqt8tlqhkkxucf0zjc384wvv2jemdnjwd6hn9745h8qc4kqp0rzs9wkx0hcp22xzuyyk7gpsc9ahw7pdenpje3etp37lfrcuntehl8wm2eudrh0j04szjzrv0n3r2gv04mgau5ysqtdcddq44xtt6t6f08c9zuhqukk8zy75jru0exufnh74u97d4xwe005ug7ywmcnyz8u6nvdav2xxqqzpg0luhghl8xu7g0cjgxse0lnqqedc7cc47nc048h2t44gedjq7f49ghajc9gwclp962v4q2855qvgdtkmr29cpwwq8vghlcjv0g6k0a0xa8yrmmnd5l7umnuqcd4x9rcejc3mkjgpw8y6mue2n5tx9cpahnw37yey5k38j98dnr9jss00420jvk7nh59hul7ef69n8ktcltl8f0t93rya5y8d2cspyjp6c7crvg2d4m37z78dualsqr9u7vtge07psdtl4l9785fxl3wgf9u277puvgvuq\",\n    },\n    unbond_public: {\n        prover: KEY_STORE + \"unbond_public.prover.78b2191\",\n        verifier: \"unbond_public.verifier.96c3590\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqp89yqqqqqqqqqp62gqqqqqqqqq892qqqqqqqqqqym2qqqqqqqqqparjqqqqqqqqqqvqqqqqqqqqqqp9uker5608hsejeh46lk307z2ewatecukttkp7elhurugmwqay3ypevdjjt6ly68e9eyt2cnx7dcqrrf24kwmmy5ptlpyy72r5ul2lynras4lluy7ke6spzjx97m2qvjy3jhsdk8tpkwj3vqf37hcncjcqm5mrvp4v8txatw8hhtrklu0pjgx9p39jvvjxsqghf8rxm8edyacw3h8g7mqz8u8acay65tskf42qz5sqfvpfvg9ycnw3mp7jqnv80dnmev9k788aycnx9ufa09qfzjnxwnr6503ckc8465welwq7vxqlqyuezzshvq3gfpvdnqgrsda7kv88sq7nqpttlyqczrmsf6xln80ejcwshagevykxjc09numhdc4r7qlme5zlrjru7lyexcxq75qvtpqhkkz0zmfmm9paddlrk88xcctmhdun6rt0rzkdxx0fdgughvxlmyq32ct8s0k0qlf3rwlggvhvsw4ekl683ls9la7lcga87ereutr34fke6qzdkxz94rqzrl2msyhax9grx2t5jtkfenxsudq6mfjv0uhtxycalyk2k6c4hwdq5z33x4kcgns2tsx5hstvv6pp9phv0cedf4ysqgavdjlnx2g4tvw9wmmz7ghmm03jkutq568pxx7ahp7kjfe9ta2eas7qkj2r4ue0pwa5ft9k88r5qw32mymhz4p3cpg5g5v0z6kkukh9zxjzsdqnvglsdtj64u4dtu2epnnuckz3fgqw4mrn54nvvwv8zquwsz9jqp4zrux2xghqk6fh4y29vm3aq4v6kh4zmnwhuf0y249grf8u7xc6cu3rrz5ugpnzvawpyypmfnl58xgm0gq8m8zsn7uw436hhjwewyhwkva6trxdfxfr7rpn2qdu2yp2ulu7ezpr0meet8ht3zsqjyezyylcgrjttgphl0t2ckte6jwm6la7mlhz7ya8rancl44m9dpy798f9\",\n    }\n};\n\nconst PRIVATE_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n]);\nconst VALID_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n    \"transfer_public\",\n    \"public\",\n    \"transferPublic\",\n    \"transfer_public_to_private\",\n    \"publicToPrivate\",\n    \"transferPublicToPrivate\",\n]);\nconst PRIVATE_TRANSFER = new Set([\n    \"private\",\n    \"transfer_private\",\n    \"transferPrivate\",\n]);\nconst PRIVATE_TO_PUBLIC_TRANSFER = new Set([\n    \"private_to_public\",\n    \"privateToPublic\",\n    \"transfer_private_to_public\",\n    \"transferPrivateToPublic\",\n]);\nconst PUBLIC_TRANSFER = new Set([\n    \"public\",\n    \"transfer_public\",\n    \"transferPublic\",\n]);\nconst PUBLIC_TO_PRIVATE_TRANSFER = new Set([\n    \"public_to_private\",\n    \"publicToPrivate\",\n    \"transfer_public_to_private\",\n    \"transferPublicToPrivate\",\n]);\n\nfunction logAndThrow(message: string): Error {\n    console.error(message);\n    throw message;\n}\n\nimport { Account } from \"./account\";\nimport { AleoNetworkClient, ProgramImports } from \"./network-client\";\nimport { Block } from \"./models/block\";\nimport { Execution } from \"./models/execution\";\nimport { Input } from \"./models/input\";\nimport { Output } from \"./models/output\";\nimport { Transaction } from \"./models/transaction\";\nimport { Transition } from \"./models/transition\";\nimport {\n    AleoKeyProvider,\n    AleoKeyProviderParams,\n    AleoKeyProviderInitParams,\n    CachedKeyPair,\n    FunctionKeyPair,\n    FunctionKeyProvider,\n    KeySearchParams,\n} from \"./function-key-provider\";\nimport {\n    BlockHeightSearch,\n    NetworkRecordProvider,\n    RecordProvider,\n    RecordSearchParams,\n} from \"./record-provider\";\n\n// @TODO: This function is no longer needed, remove it.\nasync function initializeWasm() {\n    console.warn(\"initializeWasm is deprecated, you no longer need to use it\");\n}\n\nexport { createAleoWorker } from \"./managed-worker\";\n\nexport { ProgramManager } from \"./program-manager\";\n\nexport {\n    Address,\n    Execution as FunctionExecution,\n    ExecutionResponse,\n    Field,\n    OfflineQuery,\n    PrivateKey,\n    PrivateKeyCiphertext,\n    Program,\n    ProgramManager as ProgramManagerBase,\n    ProvingKey,\n    RecordCiphertext,\n    RecordPlaintext,\n    Signature,\n    Transaction as WasmTransaction,\n    VerifyingKey,\n    ViewKey,\n    initThreadPool,\n    verifyFunctionExecution,\n} from \"@aleohq/wasm\";\n\nexport { initializeWasm };\n\nexport {\n    Account,\n    AleoKeyProvider,\n    AleoKeyProviderParams,\n    AleoKeyProviderInitParams,\n    AleoNetworkClient,\n    Block,\n    BlockHeightSearch,\n    CachedKeyPair,\n    Execution,\n    FunctionKeyPair,\n    FunctionKeyProvider,\n    Input,\n    KeySearchParams,\n    NetworkRecordProvider,\n    ProgramImports,\n    Output,\n    RecordProvider,\n    RecordSearchParams,\n    Transaction,\n    Transition,\n    CREDITS_PROGRAM_KEYS,\n    KEY_STORE,\n    PRIVATE_TRANSFER,\n    PRIVATE_TO_PUBLIC_TRANSFER,\n    PRIVATE_TRANSFER_TYPES,\n    PUBLIC_TRANSFER,\n    PUBLIC_TO_PRIVATE_TRANSFER,\n    VALID_TRANSFER_TYPES,\n    logAndThrow,\n};\n","function spawnWorker(url, module, memory, address) {\n        return new Promise((resolve) => {\n            const worker = new Worker(url, {\n                type: \"module\",\n            });\n\n            worker.addEventListener(\"message\", (event) => {\n                // When running in Node, this allows the process to exit\n                // even though the Worker is still running.\n                if (worker.unref) {\n                    worker.unref();\n                }\n\n                resolve(worker);\n            }, {\n                capture: true,\n                once: true,\n            });\n\n            worker.postMessage({\n                module,\n                memory,\n                address,\n            });\n        });\n    }\n\nlet wasm;\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nconst cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );\n\nif (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); }\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8Memory0().slice(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst cachedTextEncoder = (typeof TextEncoder !== 'undefined' ? new TextEncoder('utf-8') : { encode: () => { throw Error('TextEncoder not available') } } );\n\nconst encodeString = function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n};\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_3.get(state.dtor)(a, state.b);\n\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n\n    return real;\n}\nfunction __wbg_adapter_34(arg0, arg1, arg2) {\n    wasm.wasm_bindgen__convert__closures__invoke1_mut__h47e001539b710464(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n* Verify an execution with a single function and a single transition. Executions with multiple\n* transitions or functions will fail to verify. Also, this does not verify that the state root of\n* the execution is included in the Aleo Network ledger.\n*\n* @param {Execution} execution The function execution to verify\n* @param {VerifyingKey} verifying_key The verifying key for the function\n* @param {Program} program The program that the function execution belongs to\n* @param {String} function_id The name of the function that was executed\n* @returns {boolean} True if the execution is valid, false otherwise\n* @param {Execution} execution\n* @param {VerifyingKey} verifying_key\n* @param {Program} program\n* @param {string} function_id\n* @returns {boolean}\n*/\nfunction verifyFunctionExecution(execution, verifying_key, program, function_id) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(execution, Execution);\n        _assertClass(verifying_key, VerifyingKey);\n        _assertClass(program, Program);\n        const ptr0 = passStringToWasm0(function_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.verifyFunctionExecution(retptr, execution.__wbg_ptr, verifying_key.__wbg_ptr, program.__wbg_ptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return r0 !== 0;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nlet cachedBigInt64Memory0 = null;\n\nfunction getBigInt64Memory0() {\n    if (cachedBigInt64Memory0 === null || cachedBigInt64Memory0.buffer !== wasm.memory.buffer) {\n        cachedBigInt64Memory0 = new BigInt64Array(wasm.memory.buffer);\n    }\n    return cachedBigInt64Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* @param {number} receiver\n*/\nfunction runRayonThread(receiver) {\n    wasm.runRayonThread(receiver);\n}\n\n/**\n* @param {URL} url\n* @param {number} num_threads\n* @returns {Promise<void>}\n*/\nfunction initThreadPool(url, num_threads) {\n    const ret = wasm.initThreadPool(addHeapObject(url), num_threads);\n    return takeObject(ret);\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\nfunction __wbg_adapter_205(arg0, arg1, arg2, arg3) {\n    wasm.wasm_bindgen__convert__closures__invoke2_mut__h02e038df64ba0b9e(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));\n}\n\n/**\n* Public address of an Aleo account\n*/\nclass Address {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Address.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_address_free(ptr);\n    }\n    /**\n    * Derive an Aleo address from a private key\n    *\n    * @param {PrivateKey} private_key The private key to derive the address from\n    * @returns {Address} Address corresponding to the private key\n    * @param {PrivateKey} private_key\n    * @returns {Address}\n    */\n    static from_private_key(private_key) {\n        _assertClass(private_key, PrivateKey);\n        const ret = wasm.address_from_private_key(private_key.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Derive an Aleo address from a view key\n    *\n    * @param {ViewKey} view_key The view key to derive the address from\n    * @returns {Address} Address corresponding to the view key\n    * @param {ViewKey} view_key\n    * @returns {Address}\n    */\n    static from_view_key(view_key) {\n        _assertClass(view_key, ViewKey);\n        const ret = wasm.address_from_view_key(view_key.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Create an aleo address object from a string representation of an address\n    *\n    * @param {string} address String representation of an addressm\n    * @returns {Address} Address\n    * @param {string} address\n    * @returns {Address}\n    */\n    static from_string(address) {\n        const ptr0 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.address_from_string(ptr0, len0);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Get a string representation of an Aleo address object\n    *\n    * @param {Address} Address\n    * @returns {string} String representation of the address\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.address_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Verify a signature for a message signed by the address\n    *\n    * @param {Uint8Array} Byte array representing a message signed by the address\n    * @returns {boolean} Boolean representing whether or not the signature is valid\n    * @param {Uint8Array} message\n    * @param {Signature} signature\n    * @returns {boolean}\n    */\n    verify(message, signature) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(signature, Signature);\n        const ret = wasm.address_verify(this.__wbg_ptr, ptr0, len0, signature.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n/**\n* A program that can be executed on the Aleo blockchain.\n*/\nclass Execution {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Execution.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_execution_free(ptr);\n    }\n    /**\n    * Returns the string representation of the execution.\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.execution_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Creates an execution object from a string representation of an execution.\n    * @param {string} execution\n    * @returns {Execution}\n    */\n    static fromString(execution) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(execution, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.execution_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Execution.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Webassembly Representation of an Aleo function execution response\n*\n* This object is returned by the execution of an Aleo function off-chain. It provides methods for\n* retrieving the outputs of the function execution.\n*/\nclass ExecutionResponse {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ExecutionResponse.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_executionresponse_free(ptr);\n    }\n    /**\n    * Get the outputs of the executed function\n    *\n    * @returns {Array} Array of strings representing the outputs of the function\n    * @returns {Array<any>}\n    */\n    getOutputs() {\n        const ret = wasm.executionresponse_getOutputs(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Returns the execution object if present, null if otherwise.\n    *\n    * @returns {Execution | undefined} The execution object if present, null if otherwise\n    * @returns {Execution | undefined}\n    */\n    getExecution() {\n        const ret = wasm.executionresponse_getExecution(this.__wbg_ptr);\n        return ret === 0 ? undefined : Execution.__wrap(ret);\n    }\n    /**\n    * Returns the program keys if present\n    * @returns {KeyPair}\n    */\n    getKeys() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.executionresponse_getKeys(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KeyPair.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the proving_key if the proving key was cached in the Execution response.\n    * Note the proving key is removed from the response object after the first call to this\n    * function. Subsequent calls will return null.\n    *\n    * @returns {ProvingKey | undefined} The proving key\n    * @returns {ProvingKey | undefined}\n    */\n    getProvingKey() {\n        const ret = wasm.executionresponse_getProvingKey(this.__wbg_ptr);\n        return ret === 0 ? undefined : ProvingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying_key associated with the program\n    *\n    * @returns {VerifyingKey} The verifying key\n    * @returns {VerifyingKey}\n    */\n    getVerifyingKey() {\n        const ret = wasm.executionresponse_getVerifyingKey(this.__wbg_ptr);\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the function identifier\n    * @returns {string}\n    */\n    getFunctionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.executionresponse_getFunctionId(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Returns the program\n    * @returns {Program}\n    */\n    getProgram() {\n        const ret = wasm.executionresponse_getProgram(this.__wbg_ptr);\n        return Program.__wrap(ret);\n    }\n}\n/**\n*/\nclass Field {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Field.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_field_free(ptr);\n    }\n    /**\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.field_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {string} field\n    * @returns {Field}\n    */\n    static fromString(field) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(field, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.field_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Field.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass KeyPair {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeyPair.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keypair_free(ptr);\n    }\n    /**\n    * Create new key pair from proving and verifying keys\n    *\n    * @param {ProvingKey} proving_key Proving key corresponding to a function in an Aleo program\n    * @param {VerifyingKey} verifying_key Verifying key corresponding to a function in an Aleo program\n    * @returns {KeyPair} Key pair object containing both the function proving and verifying keys\n    * @param {ProvingKey} proving_key\n    * @param {VerifyingKey} verifying_key\n    */\n    constructor(proving_key, verifying_key) {\n        _assertClass(proving_key, ProvingKey);\n        var ptr0 = proving_key.__destroy_into_raw();\n        _assertClass(verifying_key, VerifyingKey);\n        var ptr1 = verifying_key.__destroy_into_raw();\n        const ret = wasm.keypair_new(ptr0, ptr1);\n        return KeyPair.__wrap(ret);\n    }\n    /**\n    * Get the proving key. This method will remove the proving key from the key pair\n    *\n    * @returns {ProvingKey | Error}\n    * @returns {ProvingKey}\n    */\n    provingKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keypair_provingKey(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the verifying key. This method will remove the verifying key from the key pair\n    *\n    * @returns {VerifyingKey | Error}\n    * @returns {VerifyingKey}\n    */\n    verifyingKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keypair_verifyingKey(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* An offline query object that allows users to externally insert a valid state path and state root\n* for external records\n*/\nclass OfflineQuery {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OfflineQuery.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_offlinequery_free(ptr);\n    }\n    /**\n    * Creates a new offline query object. The state root is required to be passed in as a string\n    * @param {string} state_root\n    */\n    constructor(state_root) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(state_root, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.offlinequery_new(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return OfflineQuery.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Add a new state path to the offline query object.\n    *\n    * @param {string} commitment: The commitment corresponding to a record inpout\n    * @param {string} state_path: The state path corresponding to the commitment\n    * @param {string} commitment\n    * @param {string} state_path\n    */\n    addStatePath(commitment, state_path) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(commitment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(state_path, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.offlinequery_addStatePath(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a json string representation of the offline query object\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.offlinequery_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Create an offline query object from a json string representation\n    * @param {string} s\n    * @returns {OfflineQuery}\n    */\n    static fromString(s) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.offlinequery_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return OfflineQuery.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Private key of an Aleo account\n*/\nclass PrivateKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PrivateKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekey_free(ptr);\n    }\n    /**\n    * Generate a new private key using a cryptographically secure random number generator\n    *\n    * @returns {PrivateKey}\n    */\n    constructor() {\n        const ret = wasm.privatekey_new();\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * Get a private key from a series of unchecked bytes\n    *\n    * @param {Uint8Array} seed Unchecked 32 byte long Uint8Array acting as the seed for the private key\n    * @returns {PrivateKey}\n    * @param {Uint8Array} seed\n    * @returns {PrivateKey}\n    */\n    static from_seed_unchecked(seed) {\n        const ptr0 = passArray8ToWasm0(seed, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_from_seed_unchecked(ptr0, len0);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * Get a private key from a string representation of a private key\n    *\n    * @param {string} seed String representation of a private key\n    * @returns {PrivateKey}\n    * @param {string} private_key\n    * @returns {PrivateKey}\n    */\n    static from_string(private_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(private_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_from_string(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the private key. This function should be used very carefully\n    * as it exposes the private key plaintext\n    *\n    * @returns {string} String representation of a private key\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekey_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the view key corresponding to the private key\n    *\n    * @returns {ViewKey}\n    * @returns {ViewKey}\n    */\n    to_view_key() {\n        const ret = wasm.privatekey_to_view_key(this.__wbg_ptr);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Get the address corresponding to the private key\n    *\n    * @returns {Address}\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = wasm.address_from_private_key(this.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Sign a message with the private key\n    *\n    * @param {Uint8Array} Byte array representing a message signed by the address\n    * @returns {Signature} Signature generated by signing the message with the address\n    * @param {Uint8Array} message\n    * @returns {Signature}\n    */\n    sign(message) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_sign(this.__wbg_ptr, ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Get a new randomly generated private key ciphertext using a secret. The secret is sensitive\n    * and will be needed to decrypt the private key later, so it should be stored securely\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKeyCiphertext | Error} Ciphertext representation of the private key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    static newEncrypted(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_newEncrypted(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Encrypt an existing private key with a secret. The secret is sensitive and will be needed to\n    * decrypt the private key later, so it should be stored securely\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKeyCiphertext | Error} Ciphertext representation of the private key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    toCiphertext(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_toCiphertext(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get private key from a private key ciphertext and secret originally used to encrypt it\n    *\n    * @param {PrivateKeyCiphertext} ciphertext Ciphertext representation of the private key\n    * @param {string} secret Secret originally used to encrypt the private key\n    * @returns {PrivateKey | Error} Private key\n    * @param {PrivateKeyCiphertext} ciphertext\n    * @param {string} secret\n    * @returns {PrivateKey}\n    */\n    static fromPrivateKeyCiphertext(ciphertext, secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(ciphertext, PrivateKeyCiphertext);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_fromPrivateKeyCiphertext(retptr, ciphertext.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Private Key in ciphertext form\n*/\nclass PrivateKeyCiphertext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PrivateKeyCiphertext.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekeyciphertext_free(ptr);\n    }\n    /**\n    * Encrypt a private key using a secret string. The secret is sensitive and will be needed to\n    * decrypt the private key later, so it should be stored securely\n    *\n    * @param {PrivateKey} private_key Private key to encrypt\n    * @param {string} secret Secret to encrypt the private key with\n    * @returns {PrivateKeyCiphertext | Error} Private key ciphertext\n    * @param {PrivateKey} private_key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    static encryptPrivateKey(private_key, secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_toCiphertext(retptr, private_key.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Decrypts a private ciphertext using a secret string. This must be the same secret used to\n    * encrypt the private key\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKey | Error} Private key\n    * @param {string} secret\n    * @returns {PrivateKey}\n    */\n    decryptToPrivateKey(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_decryptToPrivateKey(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the ciphertext string\n    *\n    * @returns {string} Ciphertext string\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekeyciphertext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Creates a PrivateKeyCiphertext from a string\n    *\n    * @param {string} ciphertext Ciphertext string\n    * @returns {PrivateKeyCiphertext | Error} Private key ciphertext\n    * @param {string} ciphertext\n    * @returns {PrivateKeyCiphertext}\n    */\n    static fromString(ciphertext) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Webassembly Representation of an Aleo program\n*\n* This object is required to create an Execution or Deployment transaction. It includes several\n* convenience methods for enumerating available functions and each functions' inputs in a\n* javascript object for usage in creation of web forms for input capture.\n*/\nclass Program {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Program.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_program_free(ptr);\n    }\n    /**\n    * Create a program from a program string\n    *\n    * @param {string} program Aleo program source code\n    * @returns {Program | Error} Program object\n    * @param {string} program\n    * @returns {Program}\n    */\n    static fromString(program) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the program\n    *\n    * @returns {string} String containing the program source code\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Determine if a function is present in the program\n    *\n    * @param {string} functionName Name of the function to check for\n    * @returns {boolean} True if the program is valid, false otherwise\n    * @param {string} function_name\n    * @returns {boolean}\n    */\n    hasFunction(function_name) {\n        const ptr0 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.program_hasFunction(this.__wbg_ptr, ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * Get javascript array of functions names in the program\n    *\n    * @returns {Array} Array of all function names present in the program\n    *\n    * @example\n    * const expected_functions = [\n    *   \"mint\",\n    *   \"transfer_private\",\n    *   \"transfer_private_to_public\",\n    *   \"transfer_public\",\n    *   \"transfer_public_to_private\",\n    *   \"join\",\n    *   \"split\",\n    *   \"fee\"\n    * ]\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_functions = credits_program.getFunctions();\n    * console.log(credits_functions === expected_functions); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getFunctions() {\n        const ret = wasm.program_getFunctions(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get a javascript object representation of the function inputs and types. This can be used\n    * to generate a web form to capture user inputs for an execution of a function.\n    *\n    * @param {string} function_name Name of the function to get inputs for\n    * @returns {Array | Error} Array of function inputs\n    *\n    * @example\n    * const expected_inputs = [\n    *     {\n    *       type:\"record\",\n    *       visibility:\"private\",\n    *       record:\"credits\",\n    *       members:[\n    *         {\n    *           name:\"microcredits\",\n    *           type:\"u64\",\n    *           visibility:\"private\"\n    *         }\n    *       ],\n    *       register:\"r0\"\n    *     },\n    *     {\n    *       type:\"address\",\n    *       visibility:\"private\",\n    *       register:\"r1\"\n    *     },\n    *     {\n    *       type:\"u64\",\n    *       visibility:\"private\",\n    *       register:\"r2\"\n    *     }\n    * ];\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const transfer_function_inputs = credits_program.getFunctionInputs(\"transfer_private\");\n    * console.log(transfer_function_inputs === expected_inputs); // Output should be \"true\"\n    * @param {string} function_name\n    * @returns {Array<any>}\n    */\n    getFunctionInputs(function_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getFunctionInputs(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a the list of a program's mappings and the names/types of their keys and values.\n    *\n    * @returns {Array | Error} - An array of objects representing the mappings in the program\n    * @example\n    * const expected_mappings = [\n    *    {\n    *       name: \"account\",\n    *       key_name: \"owner\",\n    *       key_type: \"address\",\n    *       value_name: \"microcredits\",\n    *       value_type: \"u64\"\n    *    }\n    * ]\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_mappings = credits_program.getMappings();\n    * console.log(credits_mappings === expected_mappings); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getMappings() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_getMappings(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a javascript object representation of a program record and its types\n    *\n    * @param {string} record_name Name of the record to get members for\n    * @returns {Object | Error} Object containing the record name, type, and members\n    *\n    * @example\n    *\n    * const expected_record = {\n    *     type: \"record\",\n    *     record: \"Credits\",\n    *     members: [\n    *       {\n    *         name: \"owner\",\n    *         type: \"address\",\n    *         visibility: \"private\"\n    *       },\n    *       {\n    *         name: \"microcredits\",\n    *         type: \"u64\",\n    *         visibility: \"private\"\n    *       }\n    *     ];\n    *  };\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_record = credits_program.getRecordMembers(\"Credits\");\n    * console.log(credits_record === expected_record); // Output should be \"true\"\n    * @param {string} record_name\n    * @returns {object}\n    */\n    getRecordMembers(record_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getRecordMembers(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a javascript object representation of a program struct and its types\n    *\n    * @param {string} struct_name Name of the struct to get members for\n    * @returns {Array | Error} Array containing the struct members\n    *\n    * @example\n    *\n    * const STRUCT_PROGRAM = \"program token_issue.aleo;\n    *\n    * struct token_metadata:\n    *     network as u32;\n    *     version as u32;\n    *\n    * struct token:\n    *     token_id as u32;\n    *     metadata as token_metadata;\n    *\n    * function no_op:\n    *    input r0 as u64;\n    *    output r0 as u64;\"\n    *\n    * const expected_struct_members = [\n    *    {\n    *      name: \"token_id\",\n    *      type: \"u32\",\n    *    },\n    *    {\n    *      name: \"metadata\",\n    *      type: \"struct\",\n    *      struct_id: \"token_metadata\",\n    *      members: [\n    *       {\n    *         name: \"network\",\n    *         type: \"u32\",\n    *       }\n    *       {\n    *         name: \"version\",\n    *         type: \"u32\",\n    *       }\n    *     ]\n    *   }\n    * ];\n    *\n    * const program = aleo_wasm.Program.fromString(STRUCT_PROGRAM);\n    * const struct_members = program.getStructMembers(\"token\");\n    * console.log(struct_members === expected_struct_members); // Output should be \"true\"\n    * @param {string} struct_name\n    * @returns {Array<any>}\n    */\n    getStructMembers(struct_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(struct_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getStructMembers(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the credits.aleo program\n    *\n    * @returns {Program} The credits.aleo program\n    * @returns {Program}\n    */\n    static getCreditsProgram() {\n        const ret = wasm.program_getCreditsProgram();\n        return Program.__wrap(ret);\n    }\n    /**\n    * Get the id of the program\n    *\n    * @returns {string} The id of the program\n    * @returns {string}\n    */\n    id() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_id(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Determine equality with another program\n    *\n    * @param {Program} other The other program to compare\n    * @returns {boolean} True if the programs are equal, false otherwise\n    * @param {Program} other\n    * @returns {boolean}\n    */\n    isEqual(other) {\n        _assertClass(other, Program);\n        const ret = wasm.program_isEqual(this.__wbg_ptr, other.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Get program_imports\n    *\n    * @returns {Array} The program imports\n    *\n    * @example\n    *\n    * const DOUBLE_TEST = \"import multiply_test.aleo;\n    *\n    * program double_test.aleo;\n    *\n    * function double_it:\n    *     input r0 as u32.private;\n    *     call multiply_test.aleo/multiply 2u32 r0 into r1;\n    *     output r1 as u32.private;\";\n    *\n    * const expected_imports = [\n    *    \"multiply_test.aleo\"\n    * ];\n    *\n    * const program = aleo_wasm.Program.fromString(DOUBLE_TEST_PROGRAM);\n    * const imports = program.getImports();\n    * console.log(imports === expected_imports); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getImports() {\n        const ret = wasm.program_getImports(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n/**\n*/\nclass ProgramManager {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_programmanager_free(ptr);\n    }\n    /**\n    * Deploy an Aleo program\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program being deployed\n    * @param imports A javascript object holding the source code of any imported programs in the\n    * form \\{\"program_name1\": \"program_source_code\", \"program_name2\": \"program_source_code\", ..\\}.\n    * Note that all imported programs must be deployed on chain before the main program in order\n    * for the deployment to succeed\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param imports (optional) Provide a list of imports to use for the program deployment in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error}\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} fee_record\n    * @param {string | undefined} url\n    * @param {object | undefined} imports\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @param {OfflineQuery | undefined} offline_query\n    * @returns {Promise<Transaction>}\n    */\n    static buildDeploymentTransaction(private_key, program, fee_credits, fee_record, url, imports, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        let ptr1 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr1 = fee_record.__destroy_into_raw();\n        }\n        var ptr2 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        let ptr3 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr3 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr4 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr5 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildDeploymentTransaction(private_key.__wbg_ptr, ptr0, len0, fee_credits, ptr1, ptr2, len2, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr3, ptr4, ptr5);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the fee for a program deployment\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param program The source code of the program being deployed\n    * @param imports (optional) Provide a list of imports to use for the deployment fee estimation\n    * in the form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @returns {u64 | Error}\n    * @param {string} program\n    * @param {object | undefined} imports\n    * @returns {Promise<bigint>}\n    */\n    static estimateDeploymentFee(program, imports) {\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.programmanager_estimateDeploymentFee(ptr0, len0, isLikeNone(imports) ? 0 : addHeapObject(imports));\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the component of the deployment cost which comes from the fee for the program name.\n    * Note that this cost does not represent the entire cost of deployment. It is additional to\n    * the cost of the size (in bytes) of the deployment.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param name The name of the program to be deployed\n    * @returns {u64 | Error}\n    * @param {string} name\n    * @returns {bigint}\n    */\n    static estimateProgramNameCost(name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.programmanager_estimateProgramNameCost(retptr, ptr0, len0);\n            var r0 = getBigInt64Memory0()[retptr / 8 + 0];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            return BigInt.asUintN(64, r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Execute an arbitrary function locally\n    *\n    * @param {PrivateKey} private_key The private key of the sender\n    * @param {string} program The source code of the program being executed\n    * @param {string} function The name of the function to execute\n    * @param {Array} inputs A javascript array of inputs to the function\n    * @param {boolean} prove_execution If true, the execution will be proven and an execution object\n    * containing the proof and the encrypted inputs and outputs needed to verify the proof offline\n    * will be returned.\n    * @param {boolean} cache Cache the proving and verifying keys in the Execution response.\n    * If this is set to 'true' the keys synthesized will be stored in the Execution Response\n    * and the `ProvingKey` and `VerifyingKey` can be retrieved from the response via the `.getKeys()`\n    * method.\n    * @param {Object | undefined} imports (optional) Provide a list of imports to use for the function execution in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param {ProvingKey | undefined} proving_key (optional) Provide a verifying key to use for the function execution\n    * @param {VerifyingKey | undefined} verifying_key (optional) Provide a verifying key to use for the function execution\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {boolean} prove_execution\n    * @param {boolean} cache\n    * @param {object | undefined} imports\n    * @param {ProvingKey | undefined} proving_key\n    * @param {VerifyingKey | undefined} verifying_key\n    * @param {string | undefined} url\n    * @param {OfflineQuery | undefined} offline_query\n    * @returns {Promise<ExecutionResponse>}\n    */\n    static executeFunctionOffline(private_key, program, _function, inputs, prove_execution, cache, imports, proving_key, verifying_key, url, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr2 = proving_key.__destroy_into_raw();\n        }\n        let ptr3 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr3 = verifying_key.__destroy_into_raw();\n        }\n        var ptr4 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len4 = WASM_VECTOR_LEN;\n        let ptr5 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr5 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_executeFunctionOffline(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), prove_execution, cache, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr2, ptr3, ptr4, len4, ptr5);\n        return takeObject(ret);\n    }\n    /**\n    * Execute Aleo function and create an Aleo execution transaction\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program being executed\n    * @param function The name of the function to execute\n    * @param inputs A javascript array of inputs to the function\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * If this is set to 'true' the keys synthesized (or passed in as optional parameters via the\n    * `proving_key` and `verifying_key` arguments) will be stored in the ProgramManager's memory\n    * and used for subsequent transactions. If this is set to 'false' the proving and verifying\n    * keys will be deallocated from memory after the transaction is executed.\n    * @param imports (optional) Provide a list of imports to use for the function execution in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param proving_key (optional) Provide a verifying key to use for the function execution\n    * @param verifying_key (optional) Provide a verifying key to use for the function execution\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error}\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} fee_record\n    * @param {string | undefined} url\n    * @param {object | undefined} imports\n    * @param {ProvingKey | undefined} proving_key\n    * @param {VerifyingKey | undefined} verifying_key\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @param {OfflineQuery | undefined} offline_query\n    * @returns {Promise<Transaction>}\n    */\n    static buildExecutionTransaction(private_key, program, _function, inputs, fee_credits, fee_record, url, imports, proving_key, verifying_key, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr2 = fee_record.__destroy_into_raw();\n        }\n        var ptr3 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        let ptr4 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr4 = proving_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr5 = verifying_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr6 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr7 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr8 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildExecutionTransaction(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), fee_credits, ptr2, ptr3, len3, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr4, ptr5, ptr6, ptr7, ptr8);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate Fee for Aleo function execution. Note if \"cache\" is set to true, the proving and\n    * verifying keys will be stored in the ProgramManager's memory and used for subsequent\n    * program executions.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program to estimate the execution fee for\n    * @param function The name of the function to execute\n    * @param inputs A javascript array of inputs to the function\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param imports (optional) Provide a list of imports to use for the fee estimation in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param proving_key (optional) Provide a verifying key to use for the fee estimation\n    * @param verifying_key (optional) Provide a verifying key to use for the fee estimation\n    * @returns {u64 | Error} Fee in microcredits\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {string | undefined} url\n    * @param {object | undefined} imports\n    * @param {ProvingKey | undefined} proving_key\n    * @param {VerifyingKey | undefined} verifying_key\n    * @param {OfflineQuery | undefined} offline_query\n    * @returns {Promise<bigint>}\n    */\n    static estimateExecutionFee(private_key, program, _function, inputs, url, imports, proving_key, verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        let ptr3 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr3 = proving_key.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr4 = verifying_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr5 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_estimateExecutionFee(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), ptr2, len2, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr3, ptr4, ptr5);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the finalize fee component for executing a function. This fee is additional to the\n    * size of the execution of the program in bytes. If the function does not have a finalize\n    * step, then the finalize fee is 0.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param program The program containing the function to estimate the finalize fee for\n    * @param function The function to estimate the finalize fee for\n    * @returns {u64 | Error} Fee in microcredits\n    * @param {string} program\n    * @param {string} _function\n    * @returns {bigint}\n    */\n    static estimateFinalizeFee(program, _function) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.programmanager_estimateFinalizeFee(retptr, ptr0, len0, ptr1, len1);\n            var r0 = getBigInt64Memory0()[retptr / 8 + 0];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            return BigInt.asUintN(64, r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Join two records together to create a new record with an amount of credits equal to the sum\n    * of the credits of the two original records\n    *\n    * @param private_key The private key of the sender\n    * @param record_1 The first record to combine\n    * @param record_2 The second record to combine\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param join_proving_key (optional) Provide a proving key to use for the join function\n    * @param join_verifying_key (optional) Provide a verifying key to use for the join function\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error} Transaction object\n    * @param {PrivateKey} private_key\n    * @param {RecordPlaintext} record_1\n    * @param {RecordPlaintext} record_2\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} fee_record\n    * @param {string | undefined} url\n    * @param {ProvingKey | undefined} join_proving_key\n    * @param {VerifyingKey | undefined} join_verifying_key\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @param {OfflineQuery | undefined} offline_query\n    * @returns {Promise<Transaction>}\n    */\n    static buildJoinTransaction(private_key, record_1, record_2, fee_credits, fee_record, url, join_proving_key, join_verifying_key, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        _assertClass(record_1, RecordPlaintext);\n        var ptr0 = record_1.__destroy_into_raw();\n        _assertClass(record_2, RecordPlaintext);\n        var ptr1 = record_2.__destroy_into_raw();\n        let ptr2 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr2 = fee_record.__destroy_into_raw();\n        }\n        var ptr3 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        let ptr4 = 0;\n        if (!isLikeNone(join_proving_key)) {\n            _assertClass(join_proving_key, ProvingKey);\n            ptr4 = join_proving_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(join_verifying_key)) {\n            _assertClass(join_verifying_key, VerifyingKey);\n            ptr5 = join_verifying_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr6 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr7 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr8 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildJoinTransaction(private_key.__wbg_ptr, ptr0, ptr1, fee_credits, ptr2, ptr3, len3, ptr4, ptr5, ptr6, ptr7, ptr8);\n        return takeObject(ret);\n    }\n    /**\n    * Split an Aleo credits record into two separate records. This function does not require a fee.\n    *\n    * @param private_key The private key of the sender\n    * @param split_amount The amount of the credit split. This amount will be subtracted from the\n    * value of the record and two new records will be created with the split amount and the remainder\n    * @param amount_record The record to split\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param split_proving_key (optional) Provide a proving key to use for the split function\n    * @param split_verifying_key (optional) Provide a verifying key to use for the split function\n    * @returns {Transaction | Error} Transaction object\n    * @param {PrivateKey} private_key\n    * @param {number} split_amount\n    * @param {RecordPlaintext} amount_record\n    * @param {string | undefined} url\n    * @param {ProvingKey | undefined} split_proving_key\n    * @param {VerifyingKey | undefined} split_verifying_key\n    * @param {OfflineQuery | undefined} offline_query\n    * @returns {Promise<Transaction>}\n    */\n    static buildSplitTransaction(private_key, split_amount, amount_record, url, split_proving_key, split_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        _assertClass(amount_record, RecordPlaintext);\n        var ptr0 = amount_record.__destroy_into_raw();\n        var ptr1 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(split_proving_key)) {\n            _assertClass(split_proving_key, ProvingKey);\n            ptr2 = split_proving_key.__destroy_into_raw();\n        }\n        let ptr3 = 0;\n        if (!isLikeNone(split_verifying_key)) {\n            _assertClass(split_verifying_key, VerifyingKey);\n            ptr3 = split_verifying_key.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr4 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildSplitTransaction(private_key.__wbg_ptr, split_amount, ptr0, ptr1, len1, ptr2, ptr3, ptr4);\n        return takeObject(ret);\n    }\n    /**\n    * Send credits from one Aleo account to another\n    *\n    * @param private_key The private key of the sender\n    * @param amount_credits The amount of credits to send\n    * @param recipient The recipient of the transaction\n    * @param transfer_type The type of the transfer (options: \"private\", \"public\", \"private_to_public\", \"public_to_private\")\n    * @param amount_record The record to fund the amount from\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param transfer_verifying_key (optional) Provide a verifying key to use for the transfer\n    * function\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error}\n    * @param {PrivateKey} private_key\n    * @param {number} amount_credits\n    * @param {string} recipient\n    * @param {string} transfer_type\n    * @param {RecordPlaintext | undefined} amount_record\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} fee_record\n    * @param {string | undefined} url\n    * @param {ProvingKey | undefined} transfer_proving_key\n    * @param {VerifyingKey | undefined} transfer_verifying_key\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @param {OfflineQuery | undefined} offline_query\n    * @returns {Promise<Transaction>}\n    */\n    static buildTransferTransaction(private_key, amount_credits, recipient, transfer_type, amount_record, fee_credits, fee_record, url, transfer_proving_key, transfer_verifying_key, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(recipient, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(transfer_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(amount_record)) {\n            _assertClass(amount_record, RecordPlaintext);\n            ptr2 = amount_record.__destroy_into_raw();\n        }\n        let ptr3 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr3 = fee_record.__destroy_into_raw();\n        }\n        var ptr4 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len4 = WASM_VECTOR_LEN;\n        let ptr5 = 0;\n        if (!isLikeNone(transfer_proving_key)) {\n            _assertClass(transfer_proving_key, ProvingKey);\n            ptr5 = transfer_proving_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(transfer_verifying_key)) {\n            _assertClass(transfer_verifying_key, VerifyingKey);\n            ptr6 = transfer_verifying_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr7 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr8 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr9 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr9 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildTransferTransaction(private_key.__wbg_ptr, amount_credits, ptr0, len0, ptr1, len1, ptr2, fee_credits, ptr3, ptr4, len4, ptr5, ptr6, ptr7, ptr8, ptr9);\n        return takeObject(ret);\n    }\n    /**\n    * Synthesize proving and verifying keys for a program\n    *\n    * @param program {string} The program source code of the program to synthesize keys for\n    * @param function_id {string} The function to synthesize keys for\n    * @param inputs {Array} The inputs to the function\n    * @param imports {Object | undefined} The imports for the program\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} function_id\n    * @param {Array<any>} inputs\n    * @param {object | undefined} imports\n    * @returns {Promise<KeyPair>}\n    */\n    static synthesizeKeyPair(private_key, program, function_id, inputs, imports) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(function_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.programmanager_synthesizeKeyPair(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), isLikeNone(imports) ? 0 : addHeapObject(imports));\n        return takeObject(ret);\n    }\n}\n/**\n* Proving key for a function within an Aleo program\n*/\nclass ProvingKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ProvingKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_provingkey_free(ptr);\n    }\n    /**\n    * Construct a new proving key from a byte array\n    *\n    * @param {Uint8Array} bytes Byte array representation of a proving key\n    * @returns {ProvingKey | Error}\n    * @param {Uint8Array} bytes\n    * @returns {ProvingKey}\n    */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.provingkey_fromBytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return the byte representation of a proving key\n    *\n    * @returns {Uint8Array | Error} Byte array representation of a proving key\n    * @returns {Uint8Array}\n    */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.provingkey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a copy of the proving key\n    *\n    * @returns {ProvingKey} A copy of the proving key\n    * @returns {ProvingKey}\n    */\n    copy() {\n        const ret = wasm.provingkey_copy(this.__wbg_ptr);\n        return ProvingKey.__wrap(ret);\n    }\n}\n/**\n* Encrypted Aleo record\n*/\nclass RecordCiphertext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RecordCiphertext.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_recordciphertext_free(ptr);\n    }\n    /**\n    * Create a record ciphertext from a string\n    *\n    * @param {string} record String representation of a record ciphertext\n    * @returns {RecordCiphertext | Error} Record ciphertext\n    * @param {string} record\n    * @returns {RecordCiphertext}\n    */\n    static fromString(record) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.recordciphertext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return the string reprensentation of the record ciphertext\n    *\n    * @returns {string} String representation of the record ciphertext\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordciphertext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Decrypt the record ciphertext into plaintext using the view key. The record will only\n    * decrypt if the record was encrypted by the account corresponding to the view key\n    *\n    * @param {ViewKey} view_key View key used to decrypt the ciphertext\n    * @returns {RecordPlaintext | Error} Record plaintext object\n    * @param {ViewKey} view_key\n    * @returns {RecordPlaintext}\n    */\n    decrypt(view_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(view_key, ViewKey);\n            wasm.recordciphertext_decrypt(retptr, this.__wbg_ptr, view_key.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordPlaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Determines if the account corresponding to the view key is the owner of the record\n    *\n    * @param {ViewKey} view_key View key used to decrypt the ciphertext\n    * @returns {boolean}\n    * @param {ViewKey} view_key\n    * @returns {boolean}\n    */\n    isOwner(view_key) {\n        _assertClass(view_key, ViewKey);\n        const ret = wasm.recordciphertext_isOwner(this.__wbg_ptr, view_key.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n/**\n* Plaintext representation of an Aleo record\n*/\nclass RecordPlaintext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RecordPlaintext.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_recordplaintext_free(ptr);\n    }\n    /**\n    * @param {string} program_id\n    * @param {string} record_name\n    * @returns {Field}\n    */\n    commitment(program_id, record_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_commitment(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Field.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return a record plaintext from a string.\n    *\n    * @param {string} record String representation of a plaintext representation of an Aleo record\n    * @returns {RecordPlaintext | Error} Record plaintext\n    * @param {string} record\n    * @returns {RecordPlaintext}\n    */\n    static fromString(record) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordPlaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the record plaintext string\n    *\n    * @returns {string} String representation of the record plaintext\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordplaintext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Returns the amount of microcredits in the record\n    *\n    * @returns {u64} Amount of microcredits in the record\n    * @returns {bigint}\n    */\n    microcredits() {\n        const ret = wasm.recordplaintext_microcredits(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n    * Returns the nonce of the record. This can be used to uniquely identify a record.\n    *\n    * @returns {string} Nonce of the record\n    * @returns {string}\n    */\n    nonce() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordplaintext_nonce(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Attempt to get the serial number of a record to determine whether or not is has been spent\n    *\n    * @param {PrivateKey} private_key Private key of the account that owns the record\n    * @param {string} program_id Program ID of the program that the record is associated with\n    * @param {string} record_name Name of the record\n    * @returns {string | Error} Serial number of the record\n    * @param {PrivateKey} private_key\n    * @param {string} program_id\n    * @param {string} record_name\n    * @returns {string}\n    */\n    serialNumberString(private_key, program_id, record_name) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            const ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_serialNumberString(retptr, this.__wbg_ptr, private_key.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr3 = r0;\n            var len3 = r1;\n            if (r3) {\n                ptr3 = 0; len3 = 0;\n                throw takeObject(r2);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n}\n/**\n* Cryptographic signature of a message signed by an Aleo account\n*/\nclass Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signature.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signature_free(ptr);\n    }\n    /**\n    * Sign a message with a private key\n    *\n    * @param {PrivateKey} private_key The private key to sign the message with\n    * @param {Uint8Array} message Byte representation of the message to sign\n    * @returns {Signature} Signature of the message\n    * @param {PrivateKey} private_key\n    * @param {Uint8Array} message\n    * @returns {Signature}\n    */\n    static sign(private_key, message) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_sign(private_key.__wbg_ptr, ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Verify a signature of a message with an address\n    *\n    * @param {Address} address The address to verify the signature with\n    * @param {Uint8Array} message Byte representation of the message to verify\n    * @returns {boolean} True if the signature is valid, false otherwise\n    * @param {Address} address\n    * @param {Uint8Array} message\n    * @returns {boolean}\n    */\n    verify(address, message) {\n        _assertClass(address, Address);\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_verify(this.__wbg_ptr, address.__wbg_ptr, ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * Get a signature from a string representation of a signature\n    *\n    * @param {string} signature String representation of a signature\n    * @returns {Signature} Signature\n    * @param {string} signature\n    * @returns {Signature}\n    */\n    static from_string(signature) {\n        const ptr0 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_from_string(ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Get a string representation of a signature\n    *\n    * @returns {string} String representation of a signature\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signature_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n/**\n* Webassembly Representation of an Aleo transaction\n*\n* This object is created when generating an on-chain function deployment or execution and is the\n* object that should be submitted to the Aleo Network in order to deploy or execute a function.\n*/\nclass Transaction {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Transaction.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transaction_free(ptr);\n    }\n    /**\n    * Create a transaction from a string\n    *\n    * @param {string} transaction String representation of a transaction\n    * @returns {Transaction | Error}\n    * @param {string} transaction\n    * @returns {Transaction}\n    */\n    static fromString(transaction) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(transaction, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transaction_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Transaction.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the transaction as a string. If you want to submit this transaction to the Aleo Network\n    * this function will create the string that should be submitted in the `POST` data.\n    *\n    * @returns {string} String representation of the transaction\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the id of the transaction. This is the merkle root of the transaction's inclusion proof.\n    *\n    * This value can be used to query the status of the transaction on the Aleo Network to see\n    * if it was successful. If successful, the transaction will be included in a block and this\n    * value can be used to lookup the transaction data on-chain.\n    *\n    * @returns {string} Transaction id\n    * @returns {string}\n    */\n    transactionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_transactionId(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the type of the transaction (will return \"deploy\" or \"execute\")\n    *\n    * @returns {string} Transaction type\n    * @returns {string}\n    */\n    transactionType() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_transactionType(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n/**\n* Verifying key for a function within an Aleo program\n*/\nclass VerifyingKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(VerifyingKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_verifyingkey_free(ptr);\n    }\n    /**\n    * Construct a new verifying key from a byte array\n    *\n    * @param {Uint8Array} bytes Byte representation of a verifying key\n    * @returns {VerifyingKey | Error}\n    * @param {Uint8Array} bytes\n    * @returns {VerifyingKey}\n    */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.verifyingkey_fromBytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a byte array from a verifying key\n    *\n    * @returns {Uint8Array | Error} Byte representation of a verifying key\n    * @returns {Uint8Array}\n    */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifyingkey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a verifying key from string\n    *\n    * @param {String} string String representation of a verifying key\n    * @returns {VerifyingKey | Error}\n    * @param {string} string\n    * @returns {VerifyingKey}\n    */\n    static fromString(string) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.verifyingkey_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the verifying key\n    *\n    * @returns {String} String representation of the verifying key\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifyingkey_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Create a copy of the verifying key\n    *\n    * @returns {VerifyingKey} A copy of the verifying key\n    * @returns {VerifyingKey}\n    */\n    copy() {\n        const ret = wasm.provingkey_copy(this.__wbg_ptr);\n        return VerifyingKey.__wrap(ret);\n    }\n}\n/**\n*/\nclass ViewKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ViewKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_viewkey_free(ptr);\n    }\n    /**\n    * Create a new view key from a private key\n    *\n    * @param {PrivateKey} private_key Private key\n    * @returns {ViewKey} View key\n    * @param {PrivateKey} private_key\n    * @returns {ViewKey}\n    */\n    static from_private_key(private_key) {\n        _assertClass(private_key, PrivateKey);\n        const ret = wasm.privatekey_to_view_key(private_key.__wbg_ptr);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Create a new view key from a string representation of a view key\n    *\n    * @param {string} view_key String representation of a view key\n    * @returns {ViewKey} View key\n    * @param {string} view_key\n    * @returns {ViewKey}\n    */\n    static from_string(view_key) {\n        const ptr0 = passStringToWasm0(view_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.viewkey_from_string(ptr0, len0);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Get a string representation of a view key\n    *\n    * @returns {string} String representation of a view key\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.viewkey_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the address corresponding to a view key\n    *\n    * @returns {Address} Address\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = wasm.address_from_view_key(this.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Decrypt a record ciphertext with a view key\n    *\n    * @param {string} ciphertext String representation of a record ciphertext\n    * @returns {string} String representation of a record plaintext\n    * @param {string} ciphertext\n    * @returns {string}\n    */\n    decrypt(ciphertext) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.viewkey_decrypt(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr2 = r0;\n            var len2 = r1;\n            if (r3) {\n                ptr2 = 0; len2 = 0;\n                throw takeObject(r2);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n}\n\nasync function __wbg_load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction __wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbg_new_daafff584c71593b = function() { return handleError(function () {\n        const ret = new XMLHttpRequest();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_overrideMimeType_1a661d17da5f8baf = function() { return handleError(function (arg0, arg1, arg2) {\n        getObject(arg0).overrideMimeType(getStringFromWasm0(arg1, arg2));\n    }, arguments) };\n    imports.wbg.__wbg_open_56fa1eb95989f6a5 = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4, arg5) {\n        getObject(arg0).open(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4), arg5 !== 0);\n    }, arguments) };\n    imports.wbg.__wbg_send_9f5007eae908c72e = function() { return handleError(function (arg0) {\n        getObject(arg0).send();\n    }, arguments) };\n    imports.wbg.__wbg_response_f2acf2ecbe021710 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).response;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_new_b51585de1b234aff = function() {\n        const ret = new Object();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        const ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_092e06b0f9d71865 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_new_1eead62f64ca15ce = function() { return handleError(function () {\n        const ret = new Headers();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_object_clone_ref = function(arg0) {\n        const ret = getObject(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_append_fda9e3432e3e88da = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n        getObject(arg0).append(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));\n    }, arguments) };\n    imports.wbg.__wbg_new_55c9955722952374 = function() { return handleError(function () {\n        const ret = new AbortController();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_signal_4bd18fb489af2d4c = function(arg0) {\n        const ret = getObject(arg0).signal;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_instanceof_Response_fc4327dbfcdf5ced = function(arg0) {\n        let result;\n        try {\n            result = getObject(arg0) instanceof Response;\n        } catch {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbg_status_ac85a3142a84caa2 = function(arg0) {\n        const ret = getObject(arg0).status;\n        return ret;\n    };\n    imports.wbg.__wbg_url_8503de97f69da463 = function(arg0, arg1) {\n        const ret = getObject(arg1).url;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_headers_b70de86b8e989bc0 = function(arg0) {\n        const ret = getObject(arg0).headers;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_iterator_97f0c81209c6c35a = function() {\n        const ret = Symbol.iterator;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_get_97b561fb56f034b5 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.get(getObject(arg0), getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_function = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'function';\n        return ret;\n    };\n    imports.wbg.__wbg_call_cb65541d95d71282 = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg0).call(getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_object = function(arg0) {\n        const val = getObject(arg0);\n        const ret = typeof(val) === 'object' && val !== null;\n        return ret;\n    };\n    imports.wbg.__wbg_next_526fc47e980da008 = function(arg0) {\n        const ret = getObject(arg0).next;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_next_ddb3312ca1c4e32a = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).next();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_done_5c1f01fb660d73b5 = function(arg0) {\n        const ret = getObject(arg0).done;\n        return ret;\n    };\n    imports.wbg.__wbg_value_1695675138684bd5 = function(arg0) {\n        const ret = getObject(arg0).value;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_abort_654b796176d117aa = function(arg0) {\n        getObject(arg0).abort();\n    };\n    imports.wbg.__wbg_stringify_e25465938f3f611f = function() { return handleError(function (arg0) {\n        const ret = JSON.stringify(getObject(arg0));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {\n        const obj = getObject(arg1);\n        const ret = typeof(obj) === 'string' ? obj : undefined;\n        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_call_01734de55d61e11d = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_log_10faa3de4533ea5d = function(arg0, arg1) {\n        console.log(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbg_transaction_new = function(arg0) {\n        const ret = Transaction.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_keypair_new = function(arg0) {\n        const ret = KeyPair.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_module = function() {\n        const ret = __wbg_init.__wbindgen_wasm_module;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_spawnWorker_5ccde1f7f9b580dd = function(arg0, arg1, arg2, arg3) {\n        const ret = spawnWorker(getObject(arg0), getObject(arg1), getObject(arg2), arg3);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_bigint_from_u64 = function(arg0) {\n        const ret = BigInt.asUintN(64, arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithlength_3ec098a360da1909 = function(arg0) {\n        const ret = new Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_502d29070ea18557 = function(arg0, arg1, arg2) {\n        getObject(arg0)[arg1 >>> 0] = takeObject(arg2);\n    };\n    imports.wbg.__wbg_executionresponse_new = function(arg0) {\n        const ret = ExecutionResponse.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_cb_drop = function(arg0) {\n        const obj = takeObject(arg0).original;\n        if (obj.cnt-- == 1) {\n            obj.a = 0;\n            return true;\n        }\n        const ret = false;\n        return ret;\n    };\n    imports.wbg.__wbg_arrayBuffer_288fb3538806e85c = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).arrayBuffer();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_new_8125e318e6245eed = function(arg0) {\n        const ret = new Uint8Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_length_72e2208bbc0efc61 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_new_43f1b47c28813cbd = function(arg0, arg1) {\n        try {\n            var state0 = {a: arg0, b: arg1};\n            var cb0 = (arg0, arg1) => {\n                const a = state0.a;\n                state0.a = 0;\n                try {\n                    return __wbg_adapter_205(a, state0.b, arg0, arg1);\n                } finally {\n                    state0.a = a;\n                }\n            };\n            const ret = new Promise(cb0);\n            return addHeapObject(ret);\n        } finally {\n            state0.a = state0.b = 0;\n        }\n    };\n    imports.wbg.__wbg_new_898a68150f225f2e = function() {\n        const ret = new Array();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_push_ca1c26067ef907ac = function(arg0, arg1) {\n        const ret = getObject(arg0).push(getObject(arg1));\n        return ret;\n    };\n    imports.wbg.__wbindgen_number_new = function(arg0) {\n        const ret = arg0;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_abda76e883ba8a5f = function() {\n        const ret = new Error();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_stack_658279fe44541cf6 = function(arg0, arg1) {\n        const ret = getObject(arg1).stack;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_error_f851667af71bcfc6 = function(arg0, arg1) {\n        let deferred0_0;\n        let deferred0_1;\n        try {\n            deferred0_0 = arg0;\n            deferred0_1 = arg1;\n            console.error(getStringFromWasm0(arg0, arg1));\n        } finally {\n            wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n        }\n    };\n    imports.wbg.__wbg_subarray_13db269f57aa838d = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_getRandomValues_37fa2ca9e4e07fab = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).getRandomValues(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_buffer_085ec1f694018c4f = function(arg0) {\n        const ret = getObject(arg0).buffer;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_5cf90238115182c3 = function(arg0, arg1, arg2) {\n        getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n    };\n    imports.wbg.__wbg_newwithbyteoffsetandlength_6da8e527659b86aa = function(arg0, arg1, arg2) {\n        const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_randomFillSync_dc1e9a60c158336d = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).randomFillSync(takeObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_crypto_c48a774b022d20ac = function(arg0) {\n        const ret = getObject(arg0).crypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_process_298734cf255a885d = function(arg0) {\n        const ret = getObject(arg0).process;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_versions_e2e78e134e3e5d01 = function(arg0) {\n        const ret = getObject(arg0).versions;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_node_1cd7a5d853dbea79 = function(arg0) {\n        const ret = getObject(arg0).node;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_string = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'string';\n        return ret;\n    };\n    imports.wbg.__wbg_msCrypto_bcb970640f50a1e8 = function(arg0) {\n        const ret = getObject(arg0).msCrypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithlength_e5d69174d6984cd7 = function(arg0) {\n        const ret = new Uint8Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_require_8f08ceecec0f4fee = function() { return handleError(function () {\n        const ret = module.require;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_length_fff51ee6522a1a18 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_get_44be0491f933a435 = function(arg0, arg1) {\n        const ret = getObject(arg0)[arg1 >>> 0];\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_self_1ff1d729e9aae938 = function() { return handleError(function () {\n        const ret = self.self;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_window_5f4faef6c12b79ec = function() { return handleError(function () {\n        const ret = window.window;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_globalThis_1d39714405582d3c = function() { return handleError(function () {\n        const ret = globalThis.globalThis;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_global_651f05c6a0944d1c = function() { return handleError(function () {\n        const ret = global.global;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_undefined = function(arg0) {\n        const ret = getObject(arg0) === undefined;\n        return ret;\n    };\n    imports.wbg.__wbg_newnoargs_581967eacc0e2604 = function(arg0, arg1) {\n        const ret = new Function(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_has_c5fcd020291e56b8 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.has(getObject(arg0), getObject(arg1));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_fetch_8eaf01857a5bb21f = function(arg0, arg1) {\n        const ret = getObject(arg0).fetch(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_fetch_b5d6bebed1e6c2d2 = function(arg0) {\n        const ret = fetch(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {\n        const ret = debugString(getObject(arg1));\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_rethrow = function(arg0) {\n        throw takeObject(arg0);\n    };\n    imports.wbg.__wbg_then_b2267541e2a73865 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).then(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_then_f7e06ee3c11698eb = function(arg0, arg1) {\n        const ret = getObject(arg0).then(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_resolve_53698b95aaf7fcf8 = function(arg0) {\n        const ret = Promise.resolve(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_waitAsync_60fb5e2e86467e31 = function() {\n        const ret = Atomics.waitAsync;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_a0af68041688e8fd = function(arg0) {\n        const ret = new Int32Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_waitAsync_73fd6eb3bace0a8d = function(arg0, arg1, arg2) {\n        const ret = Atomics.waitAsync(getObject(arg0), arg1, arg2);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_async_e1a2a669aacf35ff = function(arg0) {\n        const ret = getObject(arg0).async;\n        return ret;\n    };\n    imports.wbg.__wbg_value_555e4f564193db05 = function(arg0) {\n        const ret = getObject(arg0).value;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_link_22046963fe0b707a = function(arg0) {\n        const ret = \"data:application/javascript,\" + encodeURIComponent(`onmessage = function (ev) {\n            let [ia, index, value] = ev.data;\n            ia = new Int32Array(ia.buffer);\n            let result = Atomics.wait(ia, index, value);\n            postMessage(result);\n        };\n        `);\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_new_8e7322f46d5d019c = function() { return handleError(function (arg0, arg1) {\n        const ret = new Worker(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_setonmessage_f0bd0280573b7084 = function(arg0, arg1) {\n        getObject(arg0).onmessage = getObject(arg1);\n    };\n    imports.wbg.__wbg_of_3f69007bb4eeae65 = function(arg0, arg1, arg2) {\n        const ret = Array.of(getObject(arg0), getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_postMessage_8c609e2bde333d9c = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).postMessage(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_data_ab99ae4a2e1e8bc9 = function(arg0) {\n        const ret = getObject(arg0).data;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithstrandinit_cad5cd6038c7ff5d = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = new Request(getStringFromWasm0(arg0, arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_status_114ef6fe27fb8b00 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).status;\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_responseText_da275667251fd153 = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg1).responseText;\n        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    }, arguments) };\n    imports.wbg.__wbindgen_closure_wrapper5592 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 543, __wbg_adapter_34);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper5615 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 543, __wbg_adapter_34);\n        return addHeapObject(ret);\n    };\n\n    return imports;\n}\n\nfunction __wbg_init_memory(imports, maybe_memory) {\n    imports.wbg.memory = maybe_memory || new WebAssembly.Memory({initial:168,maximum:65536,shared:true});\n}\n\nfunction __wbg_finalize_init(instance, module) {\n    wasm = instance.exports;\n    __wbg_init.__wbindgen_wasm_module = module;\n    cachedBigInt64Memory0 = null;\n    cachedInt32Memory0 = null;\n    cachedUint8Memory0 = null;\n\n    wasm.__wbindgen_start();\n    return wasm;\n}\n\nfunction initSync(module, maybe_memory) {\n    if (wasm !== undefined) return wasm;\n\n    const imports = __wbg_get_imports();\n\n    __wbg_init_memory(imports, maybe_memory);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nasync function __wbg_init(input, maybe_memory) {\n    if (wasm !== undefined) return wasm;\n\n\n    const imports = __wbg_get_imports();\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    __wbg_init_memory(imports, maybe_memory);\n\n    const { instance, module } = await __wbg_load(await input, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nvar exports = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    Address: Address,\n    Execution: Execution,\n    ExecutionResponse: ExecutionResponse,\n    Field: Field,\n    KeyPair: KeyPair,\n    OfflineQuery: OfflineQuery,\n    PrivateKey: PrivateKey,\n    PrivateKeyCiphertext: PrivateKeyCiphertext,\n    Program: Program,\n    ProgramManager: ProgramManager,\n    ProvingKey: ProvingKey,\n    RecordCiphertext: RecordCiphertext,\n    RecordPlaintext: RecordPlaintext,\n    Signature: Signature,\n    Transaction: Transaction,\n    VerifyingKey: VerifyingKey,\n    ViewKey: ViewKey,\n    default: __wbg_init,\n    initSync: initSync,\n    initThreadPool: initThreadPool,\n    runRayonThread: runRayonThread,\n    verifyFunctionExecution: verifyFunctionExecution\n});\n\nconst wasm_path = \"assets/aleo_wasm.wasm\";\n\n            \n            var Cargo = async (opt = {}) => {\n                let {importHook, serverPath, initializeHook} = opt;\n\n                let final_path = wasm_path;\n\n                if (serverPath != null) {\n                    final_path = serverPath + /[^\\/\\\\]*$/.exec(final_path)[0];\n                }\n\n                if (importHook != null) {\n                    final_path = importHook(final_path);\n                }\n\n                if (initializeHook != null) {\n                    await initializeHook(__wbg_init, final_path);\n\n                } else {\n                    await __wbg_init(final_path);\n                }\n\n                return exports;\n            };\n\nexport { Cargo as default };\n//# sourceMappingURL=wasm.js.map\n","import wasm from \"../dist/wasm.js\";\n\nconst {\n    initThreadPool: wasmInitThreadPool,\n    Address,\n    Execution,\n    ExecutionResponse,\n    Field,\n    OfflineQuery,\n    Private,\n    PrivateKey,\n    PrivateKeyCiphertext,\n    Program,\n    ProvingKey,\n    RecordCiphertext,\n    RecordPlaintext,\n    ProgramManager,\n    Signature,\n    Transaction,\n    ViewKey,\n    VerifyingKey,\n    verifyFunctionExecution,\n} = await wasm({\n    importHook: () => {\n        return new URL(\"assets/aleo_wasm.wasm\", import.meta.url);\n    },\n});\n\nasync function initThreadPool(threads) {\n    if (threads == null) {\n        threads = navigator.hardwareConcurrency;\n    }\n\n    console.info(`Spawning ${threads} threads`);\n\n    await wasmInitThreadPool(new URL(\"worker.js\", import.meta.url), threads);\n}\n\nexport {\n    initThreadPool,\n    Address,\n    Execution,\n    ExecutionResponse,\n    Field,\n    OfflineQuery,\n    PrivateKey,\n    PrivateKeyCiphertext,\n    Program,\n    ProvingKey,\n    RecordCiphertext,\n    RecordPlaintext,\n    ProgramManager,\n    Signature,\n    Transaction,\n    ViewKey,\n    VerifyingKey,\n    verifyFunctionExecution,\n};\n","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst proxyMarker = Symbol(\"Comlink.proxy\");\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\nconst finalizer = Symbol(\"Comlink.finalizer\");\nconst throwMarker = Symbol(\"Comlink.thrown\");\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler = {\n    canHandle: (val) => isObject(val) && val[proxyMarker],\n    serialize(obj) {\n        const { port1, port2 } = new MessageChannel();\n        expose(obj, port1);\n        return [port2, [port2]];\n    },\n    deserialize(port) {\n        port.start();\n        return wrap(port);\n    },\n};\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler = {\n    canHandle: (value) => isObject(value) && throwMarker in value,\n    serialize({ value }) {\n        let serialized;\n        if (value instanceof Error) {\n            serialized = {\n                isError: true,\n                value: {\n                    message: value.message,\n                    name: value.name,\n                    stack: value.stack,\n                },\n            };\n        }\n        else {\n            serialized = { isError: false, value };\n        }\n        return [serialized, []];\n    },\n    deserialize(serialized) {\n        if (serialized.isError) {\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\n        }\n        throw serialized.value;\n    },\n};\n/**\n * Allows customizing the serialization of certain values.\n */\nconst transferHandlers = new Map([\n    [\"proxy\", proxyTransferHandler],\n    [\"throw\", throwTransferHandler],\n]);\nfunction isAllowedOrigin(allowedOrigins, origin) {\n    for (const allowedOrigin of allowedOrigins) {\n        if (origin === allowedOrigin || allowedOrigin === \"*\") {\n            return true;\n        }\n        if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction expose(obj, ep = globalThis, allowedOrigins = [\"*\"]) {\n    ep.addEventListener(\"message\", function callback(ev) {\n        if (!ev || !ev.data) {\n            return;\n        }\n        if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n            console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n            return;\n        }\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n        let returnValue;\n        try {\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n            switch (type) {\n                case \"GET\" /* MessageType.GET */:\n                    {\n                        returnValue = rawValue;\n                    }\n                    break;\n                case \"SET\" /* MessageType.SET */:\n                    {\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n                        returnValue = true;\n                    }\n                    break;\n                case \"APPLY\" /* MessageType.APPLY */:\n                    {\n                        returnValue = rawValue.apply(parent, argumentList);\n                    }\n                    break;\n                case \"CONSTRUCT\" /* MessageType.CONSTRUCT */:\n                    {\n                        const value = new rawValue(...argumentList);\n                        returnValue = proxy(value);\n                    }\n                    break;\n                case \"ENDPOINT\" /* MessageType.ENDPOINT */:\n                    {\n                        const { port1, port2 } = new MessageChannel();\n                        expose(obj, port2);\n                        returnValue = transfer(port1, [port1]);\n                    }\n                    break;\n                case \"RELEASE\" /* MessageType.RELEASE */:\n                    {\n                        returnValue = undefined;\n                    }\n                    break;\n                default:\n                    return;\n            }\n        }\n        catch (value) {\n            returnValue = { value, [throwMarker]: 0 };\n        }\n        Promise.resolve(returnValue)\n            .catch((value) => {\n            return { value, [throwMarker]: 0 };\n        })\n            .then((returnValue) => {\n            const [wireValue, transferables] = toWireValue(returnValue);\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n            if (type === \"RELEASE\" /* MessageType.RELEASE */) {\n                // detach and deactive after sending release response above.\n                ep.removeEventListener(\"message\", callback);\n                closeEndPoint(ep);\n                if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n                    obj[finalizer]();\n                }\n            }\n        })\n            .catch((error) => {\n            // Send Serialization Error To Caller\n            const [wireValue, transferables] = toWireValue({\n                value: new TypeError(\"Unserializable return value\"),\n                [throwMarker]: 0,\n            });\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n        });\n    });\n    if (ep.start) {\n        ep.start();\n    }\n}\nfunction isMessagePort(endpoint) {\n    return endpoint.constructor.name === \"MessagePort\";\n}\nfunction closeEndPoint(endpoint) {\n    if (isMessagePort(endpoint))\n        endpoint.close();\n}\nfunction wrap(ep, target) {\n    return createProxy(ep, [], target);\n}\nfunction throwIfProxyReleased(isReleased) {\n    if (isReleased) {\n        throw new Error(\"Proxy has been released and is not useable\");\n    }\n}\nfunction releaseEndpoint(ep) {\n    return requestResponseMessage(ep, {\n        type: \"RELEASE\" /* MessageType.RELEASE */,\n    }).then(() => {\n        closeEndPoint(ep);\n    });\n}\nconst proxyCounter = new WeakMap();\nconst proxyFinalizers = \"FinalizationRegistry\" in globalThis &&\n    new FinalizationRegistry((ep) => {\n        const newCount = (proxyCounter.get(ep) || 0) - 1;\n        proxyCounter.set(ep, newCount);\n        if (newCount === 0) {\n            releaseEndpoint(ep);\n        }\n    });\nfunction registerProxy(proxy, ep) {\n    const newCount = (proxyCounter.get(ep) || 0) + 1;\n    proxyCounter.set(ep, newCount);\n    if (proxyFinalizers) {\n        proxyFinalizers.register(proxy, ep, proxy);\n    }\n}\nfunction unregisterProxy(proxy) {\n    if (proxyFinalizers) {\n        proxyFinalizers.unregister(proxy);\n    }\n}\nfunction createProxy(ep, path = [], target = function () { }) {\n    let isProxyReleased = false;\n    const proxy = new Proxy(target, {\n        get(_target, prop) {\n            throwIfProxyReleased(isProxyReleased);\n            if (prop === releaseProxy) {\n                return () => {\n                    unregisterProxy(proxy);\n                    releaseEndpoint(ep);\n                    isProxyReleased = true;\n                };\n            }\n            if (prop === \"then\") {\n                if (path.length === 0) {\n                    return { then: () => proxy };\n                }\n                const r = requestResponseMessage(ep, {\n                    type: \"GET\" /* MessageType.GET */,\n                    path: path.map((p) => p.toString()),\n                }).then(fromWireValue);\n                return r.then.bind(r);\n            }\n            return createProxy(ep, [...path, prop]);\n        },\n        set(_target, prop, rawValue) {\n            throwIfProxyReleased(isProxyReleased);\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n            const [value, transferables] = toWireValue(rawValue);\n            return requestResponseMessage(ep, {\n                type: \"SET\" /* MessageType.SET */,\n                path: [...path, prop].map((p) => p.toString()),\n                value,\n            }, transferables).then(fromWireValue);\n        },\n        apply(_target, _thisArg, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const last = path[path.length - 1];\n            if (last === createEndpoint) {\n                return requestResponseMessage(ep, {\n                    type: \"ENDPOINT\" /* MessageType.ENDPOINT */,\n                }).then(fromWireValue);\n            }\n            // We just pretend that `bind()` didn’t happen.\n            if (last === \"bind\") {\n                return createProxy(ep, path.slice(0, -1));\n            }\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, {\n                type: \"APPLY\" /* MessageType.APPLY */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n        construct(_target, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, {\n                type: \"CONSTRUCT\" /* MessageType.CONSTRUCT */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n    });\n    registerProxy(proxy, ep);\n    return proxy;\n}\nfunction myFlat(arr) {\n    return Array.prototype.concat.apply([], arr);\n}\nfunction processArguments(argumentList) {\n    const processed = argumentList.map(toWireValue);\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\nconst transferCache = new WeakMap();\nfunction transfer(obj, transfers) {\n    transferCache.set(obj, transfers);\n    return obj;\n}\nfunction proxy(obj) {\n    return Object.assign(obj, { [proxyMarker]: true });\n}\nfunction windowEndpoint(w, context = globalThis, targetOrigin = \"*\") {\n    return {\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\n        addEventListener: context.addEventListener.bind(context),\n        removeEventListener: context.removeEventListener.bind(context),\n    };\n}\nfunction toWireValue(value) {\n    for (const [name, handler] of transferHandlers) {\n        if (handler.canHandle(value)) {\n            const [serializedValue, transferables] = handler.serialize(value);\n            return [\n                {\n                    type: \"HANDLER\" /* WireValueType.HANDLER */,\n                    name,\n                    value: serializedValue,\n                },\n                transferables,\n            ];\n        }\n    }\n    return [\n        {\n            type: \"RAW\" /* WireValueType.RAW */,\n            value,\n        },\n        transferCache.get(value) || [],\n    ];\n}\nfunction fromWireValue(value) {\n    switch (value.type) {\n        case \"HANDLER\" /* WireValueType.HANDLER */:\n            return transferHandlers.get(value.name).deserialize(value.value);\n        case \"RAW\" /* WireValueType.RAW */:\n            return value.value;\n    }\n}\nfunction requestResponseMessage(ep, msg, transfers) {\n    return new Promise((resolve) => {\n        const id = generateUUID();\n        ep.addEventListener(\"message\", function l(ev) {\n            if (!ev.data || !ev.data.id || ev.data.id !== id) {\n                return;\n            }\n            ep.removeEventListener(\"message\", l);\n            resolve(ev.data);\n        });\n        if (ep.start) {\n            ep.start();\n        }\n        ep.postMessage(Object.assign({ id }, msg), transfers);\n    });\n}\nfunction generateUUID() {\n    return new Array(4)\n        .fill(0)\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n        .join(\"-\");\n}\n\nexport { createEndpoint, expose, finalizer, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };\n//# sourceMappingURL=comlink.mjs.map\n"],"names":["Account","_privateKey","_viewKey","_address","constructor","params","this","privateKeyFromParams","e","console","error","Error","ViewKey","from_private_key","Address","fromCiphertext","ciphertext","password","PrivateKeyCiphertext","fromString","PrivateKey","fromPrivateKeyCiphertext","privateKey","to_string","seed","from_seed_unchecked","from_string","viewKey","address","toString","encryptAccount","toCiphertext","decryptRecord","decrypt","decryptRecords","ciphertexts","map","ownsRecordCiphertext","isOwner","RecordCiphertext","sign","message","verify","signature","async","get","url","response","fetch","ok","status","post","options","method","AleoNetworkClient","host","account","setAccount","getAccount","setHost","fetchData","json","findUnspentRecords","startHeight","endHeight","amounts","maxMicrocredits","nonces","records","Array","start","end","resolvedPrivateKey","latestHeight","failures","totalRecordValue","BigInt","to_view_key","blockHeight","getLatestHeight","blocks","getBlockRange","i","length","transactions","j","confirmedTransaction","type","transaction","execution","transitions","k","transition","program","outputs","l","output","record","value","recordPlaintext","nonce","includes","serialNumber","serialNumberString","getTransitionId","push","microcredits","amounts_found","warn","getBlock","height","getDeploymentTransactionIDForProgram","Program","replace","getDeploymentTransactionForProgram","transaction_id","getTransaction","getLatestBlock","getLatestCommittee","getProgram","programId","getProgramObject","inputProgram","getProgramImports","imports","importList","getImports","import_id","hasOwnProperty","programSource","nestedImports","key","logAndThrow","getProgramImportNames","getProgramMappingNames","getProgramMappingValue","mappingName","getStateRoot","id","getTransactions","getTransactionsInMempool","inputOrOutputID","submitTransaction","transaction_string","Transaction","body","headers","AleoKeyProviderParams","proverUri","verifierUri","cacheKey","AleoKeyProvider","cache","cacheOption","keyUris","fetchBytes","data","arrayBuffer","Uint8Array","KEY_STORE","Map","useCache","clearCache","clear","cacheKeys","keyId","keys","provingKey","verifyingKey","set","toBytes","containsKeys","has","deleteKeys","delete","getKeys","debug","provingKeyBytes","verifyingKeyBytes","ProvingKey","fromBytes","VerifyingKey","functionKeys","proverUrl","verifierUrl","fetchKeys","getVerifyingKey","transferKeys","visibility","PRIVATE_TRANSFER","CREDITS_PROGRAM_KEYS","transfer_private","prover","verifier","PRIVATE_TO_PUBLIC_TRANSFER","transfer_private_to_public","PUBLIC_TRANSFER","transfer_public","PUBLIC_TO_PRIVATE_TRANSFER","transfer_public_to_private","joinKeys","join","splitKeys","split","feePrivateKeys","fee_private","feePublicKeys","fee_public","bond_public","claim_unbond_public","inclusion","unbond_public","NetworkRecordProvider","networkClient","findCreditsRecords","unspent","searchParameters","undefined","findCreditsRecord","findRecord","findRecords","BlockHeightSearch","singletonWorker","createAleoWorker","worker","Worker","URL","wrap","ProgramManager","keyProvider","recordProvider","setKeyProvider","setRecordProvider","deploy","fee","privateFee","recordSearchParams","feeRecord","programObject","log","feeKeys","deploymentPrivateKey","getCreditsRecord","feeProvingKey","feeVerifyingKey","tx","ProgramManager$1","buildDeploymentTransaction","execute","programName","functionName","inputs","keySearchParams","offlineQuery","executionPrivateKey","buildExecutionTransaction","executeOffline","function_name","proveExecution","executeFunctionOffline","recordOne","recordTwo","joinProvingKey","joinVerifyingKey","RecordPlaintext","buildJoinTransaction","splitAmount","amountRecord","splitProvingKey","splitVerifyingKey","buildSplitTransaction","synthesizeKeys","function_id","keyPair","synthesizeKeyPair","transfer","amount","recipient","transferType","validateTransferType","transferProvingKey","transferVerifyingKey","requiresAmountRecord","buildTransferTransaction","bondPublic","Math","trunc","offlineParams","executionParams","unbondPublic","claimUnbondPublic","verifyExecution","executionResponse","getExecution","getFunctionId","verifyFunctionExecution","createProgramFromSource","creditsProgram","getCreditsProgram","verifyProgram","PRIVATE_TRANSFER_TYPES","VALID_TRANSFER_TYPES","Set","initializeWasm","spawnWorker","module","memory","Promise","resolve","addEventListener","event","unref","capture","once","postMessage","wasm","heap","fill","getObject","idx","heap_next","dropObject","takeObject","ret","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","cachedUint8Memory0","getUint8Memory0","buffer","getStringFromWasm0","ptr","len","slice","addHeapObject","obj","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encode","encodeString","arg","view","buf","read","written","passStringToWasm0","malloc","realloc","subarray","mem","offset","code","charCodeAt","isLikeNone","x","cachedInt32Memory0","getInt32Memory0","Int32Array","debugString","val","description","name","isArray","builtInMatches","exec","call","className","JSON","stringify","_","stack","makeMutClosure","arg0","arg1","dtor","f","state","a","b","cnt","real","args","__wbindgen_export_3","original","__wbg_adapter_34","arg2","wasm_bindgen__convert__closures__invoke1_mut__h47e001539b710464","_assertClass","instance","klass","passArray8ToWasm0","verifyFunctionExecution$1","verifying_key","retptr","__wbindgen_add_to_stack_pointer","Execution$1","VerifyingKey$1","Program$1","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","__wbg_ptr","r0","r1","cachedBigInt64Memory0","getBigInt64Memory0","BigInt64Array","getArrayU8FromWasm0","runRayonThread","receiver","initThreadPool$1","num_threads","initThreadPool","handleError","apply","__wbindgen_exn_store","__wbg_adapter_205","arg3","wasm_bindgen__convert__closures__invoke2_mut__h02e038df64ba0b9e","__wrap","Object","create","prototype","__destroy_into_raw","free","__wbg_address_free","private_key","PrivateKey$1","address_from_private_key","from_view_key","view_key","ViewKey$1","address_from_view_key","address_from_string","deferred1_0","deferred1_1","address_to_string","__wbindgen_free","Signature$1","address_verify","Execution","__wbg_execution_free","execution_toString","execution_fromString","ExecutionResponse","__wbg_executionresponse_free","getOutputs","executionresponse_getOutputs","executionresponse_getExecution","executionresponse_getKeys","KeyPair","getProvingKey","executionresponse_getProvingKey","ProvingKey$1","executionresponse_getVerifyingKey","executionresponse_getFunctionId","executionresponse_getProgram","Field","__wbg_field_free","field_toString","field","field_fromString","__wbg_keypair_free","proving_key","ptr1","keypair_new","keypair_provingKey","keypair_verifyingKey","OfflineQuery","__wbg_offlinequery_free","state_root","offlinequery_new","addStatePath","commitment","state_path","len1","offlinequery_addStatePath","offlinequery_toString","s","offlinequery_fromString","__wbg_privatekey_free","privatekey_new","privatekey_from_seed_unchecked","privatekey_from_string","privatekey_to_string","privatekey_to_view_key","to_address","Address$1","privatekey_sign","newEncrypted","secret","privatekey_newEncrypted","PrivateKeyCiphertext$1","privatekey_toCiphertext","privatekey_fromPrivateKeyCiphertext","__wbg_privatekeyciphertext_free","encryptPrivateKey","decryptToPrivateKey","privatekeyciphertext_decryptToPrivateKey","privatekeyciphertext_toString","privatekeyciphertext_fromString","__wbg_program_free","program_fromString","program_toString","hasFunction","program_hasFunction","getFunctions","program_getFunctions","getFunctionInputs","program_getFunctionInputs","getMappings","program_getMappings","getRecordMembers","record_name","program_getRecordMembers","getStructMembers","struct_name","program_getStructMembers","program_getCreditsProgram","program_id","isEqual","other","program_isEqual","program_getImports","__wbg_programmanager_free","fee_credits","fee_record","fee_proving_key","fee_verifying_key","offline_query","RecordPlaintext$1","ptr2","len2","ptr3","ptr4","ptr5","OfflineQuery$1","programmanager_buildDeploymentTransaction","estimateDeploymentFee","programmanager_estimateDeploymentFee","estimateProgramNameCost","programmanager_estimateProgramNameCost","r2","asUintN","_function","prove_execution","len4","programmanager_executeFunctionOffline","len3","ptr6","ptr7","ptr8","programmanager_buildExecutionTransaction","estimateExecutionFee","programmanager_estimateExecutionFee","estimateFinalizeFee","programmanager_estimateFinalizeFee","record_1","record_2","join_proving_key","join_verifying_key","programmanager_buildJoinTransaction","split_amount","amount_record","split_proving_key","split_verifying_key","programmanager_buildSplitTransaction","amount_credits","transfer_type","transfer_proving_key","transfer_verifying_key","ptr9","programmanager_buildTransferTransaction","programmanager_synthesizeKeyPair","__wbg_provingkey_free","bytes","provingkey_fromBytes","provingkey_toBytes","v1","copy","provingkey_copy","__wbg_recordciphertext_free","recordciphertext_fromString","recordciphertext_toString","recordciphertext_decrypt","recordciphertext_isOwner","__wbg_recordplaintext_free","recordplaintext_commitment","Field$1","recordplaintext_fromString","recordplaintext_toString","recordplaintext_microcredits","recordplaintext_nonce","deferred4_0","deferred4_1","recordplaintext_serialNumberString","r3","Signature","__wbg_signature_free","signature_verify","signature_from_string","signature_to_string","__wbg_transaction_free","transaction_fromString","transaction_toString","transactionId","transaction_transactionId","transactionType","transaction_transactionType","__wbg_verifyingkey_free","verifyingkey_fromBytes","verifyingkey_toBytes","string","verifyingkey_fromString","verifyingkey_toString","__wbg_viewkey_free","viewkey_from_string","viewkey_to_string","deferred3_0","deferred3_1","viewkey_decrypt","__wbg_load","Response","WebAssembly","instantiateStreaming","instantiate","Instance","__wbg_get_imports","wbg","__wbindgen_object_drop_ref","__wbg_new_daafff584c71593b","XMLHttpRequest","arguments","__wbg_overrideMimeType_1a661d17da5f8baf","overrideMimeType","__wbg_open_56fa1eb95989f6a5","arg4","arg5","open","__wbg_send_9f5007eae908c72e","send","__wbg_response_f2acf2ecbe021710","__wbg_new_b51585de1b234aff","__wbindgen_string_new","__wbg_set_092e06b0f9d71865","Reflect","__wbg_new_1eead62f64ca15ce","Headers","__wbindgen_object_clone_ref","__wbg_append_fda9e3432e3e88da","append","__wbg_new_55c9955722952374","AbortController","__wbg_signal_4bd18fb489af2d4c","signal","__wbg_instanceof_Response_fc4327dbfcdf5ced","result","__wbg_status_ac85a3142a84caa2","__wbg_url_8503de97f69da463","__wbg_headers_b70de86b8e989bc0","__wbg_iterator_97f0c81209c6c35a","Symbol","iterator","__wbg_get_97b561fb56f034b5","__wbindgen_is_function","__wbg_call_cb65541d95d71282","__wbindgen_is_object","__wbg_next_526fc47e980da008","next","__wbg_next_ddb3312ca1c4e32a","__wbg_done_5c1f01fb660d73b5","done","__wbg_value_1695675138684bd5","__wbg_abort_654b796176d117aa","abort","__wbg_stringify_e25465938f3f611f","__wbindgen_string_get","__wbg_call_01734de55d61e11d","__wbg_log_10faa3de4533ea5d","__wbg_transaction_new","Transaction$1","__wbg_keypair_new","__wbindgen_module","__wbg_init","__wbindgen_wasm_module","__wbindgen_memory","__wbg_spawnWorker_5ccde1f7f9b580dd","__wbindgen_bigint_from_u64","__wbg_newwithlength_3ec098a360da1909","__wbg_set_502d29070ea18557","__wbg_executionresponse_new","ExecutionResponse$1","__wbindgen_cb_drop","__wbg_arrayBuffer_288fb3538806e85c","__wbg_new_8125e318e6245eed","__wbg_length_72e2208bbc0efc61","__wbg_new_43f1b47c28813cbd","state0","cb0","__wbg_new_898a68150f225f2e","__wbg_push_ca1c26067ef907ac","__wbindgen_number_new","__wbg_new_abda76e883ba8a5f","__wbg_stack_658279fe44541cf6","__wbg_error_f851667af71bcfc6","deferred0_0","deferred0_1","__wbg_subarray_13db269f57aa838d","__wbg_getRandomValues_37fa2ca9e4e07fab","getRandomValues","__wbg_buffer_085ec1f694018c4f","__wbg_set_5cf90238115182c3","__wbg_newwithbyteoffsetandlength_6da8e527659b86aa","__wbg_randomFillSync_dc1e9a60c158336d","randomFillSync","__wbg_crypto_c48a774b022d20ac","crypto","__wbg_process_298734cf255a885d","process","__wbg_versions_e2e78e134e3e5d01","versions","__wbg_node_1cd7a5d853dbea79","node","__wbindgen_is_string","__wbg_msCrypto_bcb970640f50a1e8","msCrypto","__wbg_newwithlength_e5d69174d6984cd7","__wbg_require_8f08ceecec0f4fee","require","__wbg_length_fff51ee6522a1a18","__wbg_get_44be0491f933a435","__wbg_self_1ff1d729e9aae938","self","__wbg_window_5f4faef6c12b79ec","window","__wbg_globalThis_1d39714405582d3c","globalThis","__wbg_global_651f05c6a0944d1c","global","__wbindgen_is_undefined","__wbg_newnoargs_581967eacc0e2604","Function","__wbg_has_c5fcd020291e56b8","__wbg_fetch_8eaf01857a5bb21f","__wbg_fetch_b5d6bebed1e6c2d2","__wbindgen_debug_string","__wbindgen_throw","__wbindgen_rethrow","__wbg_then_b2267541e2a73865","then","__wbg_then_f7e06ee3c11698eb","__wbg_resolve_53698b95aaf7fcf8","__wbg_waitAsync_60fb5e2e86467e31","Atomics","waitAsync","__wbg_new_a0af68041688e8fd","__wbg_waitAsync_73fd6eb3bace0a8d","__wbg_async_e1a2a669aacf35ff","__wbg_value_555e4f564193db05","__wbindgen_link_22046963fe0b707a","encodeURIComponent","__wbg_new_8e7322f46d5d019c","__wbg_setonmessage_f0bd0280573b7084","onmessage","__wbg_of_3f69007bb4eeae65","of","__wbg_postMessage_8c609e2bde333d9c","__wbg_data_ab99ae4a2e1e8bc9","__wbg_newwithstrandinit_cad5cd6038c7ff5d","Request","__wbg_status_114ef6fe27fb8b00","__wbg_responseText_da275667251fd153","responseText","__wbindgen_closure_wrapper5592","__wbindgen_closure_wrapper5615","__wbg_init_memory","maybe_memory","Memory","initial","maximum","shared","__wbg_finalize_init","exports","__wbindgen_start","initSync","Module","input","freeze","__proto__","RecordCiphertext$1","default","wasm_path","wasmInitThreadPool","Private","opt","importHook","serverPath","initializeHook","final_path","Cargo","threads","navigator","hardwareConcurrency","info","proxyMarker","createEndpoint","releaseProxy","finalizer","throwMarker","isObject","transferHandlers","canHandle","serialize","port1","port2","MessageChannel","expose","deserialize","port","serialized","isError","assign","ep","allowedOrigins","callback","ev","origin","allowedOrigin","RegExp","test","isAllowedOrigin","path","argumentList","fromWireValue","returnValue","parent","reduce","prop","rawValue","proxy","transfers","transferCache","catch","wireValue","transferables","toWireValue","removeEventListener","closeEndPoint","TypeError","endpoint","isMessagePort","close","target","createProxy","throwIfProxyReleased","isReleased","releaseEndpoint","requestResponseMessage","proxyCounter","WeakMap","proxyFinalizers","FinalizationRegistry","newCount","isProxyReleased","Proxy","_target","unregister","unregisterProxy","r","p","bind","_thisArg","rawArgumentList","last","processArguments","construct","register","registerProxy","processed","v","arr","concat","handler","serializedValue","msg","floor","random","Number","MAX_SAFE_INTEGER"],"sourceRoot":""}